<apex:page standardController="VisualAntidote__Previous_Form__c" extensions="VisualAntidote.FormEditorController,VisualAntidote.FormPaymentComponentController" id="pg" title="Fast Forms" sidebar="false" tabStyle="FastForms__tab">  
 <apex:remoteObjects jsNamespace="ffRemoteObjs">
    <apex:remoteObjectModel name="VisualAntidote__Form_Page__c" jsShorthand="FormPageObj" fields="Id,VisualAntidote__Fields_xml__c,VisualAntidote__Html__c,VisualAntidote__Page_Order__c,VisualAntidote__Page_Title__c"> </apex:remoteObjectModel>
    
    <apex:remoteObjectModel name="VisualAntidote__Previous_Form__c" jsShorthand="PreviousFormObjForAutoSave" fields="Id,VisualAntidote__Draft_Status__c,VisualAntidote__Fields_Object_xml__c">  
    </apex:remoteObjectModel>
    
    
</apex:remoteObjects>
<apex:remoteObjects jsNamespace="ffRemotePreviousFormObj2">
<apex:remoteObjectModel name="VisualAntidote__Previous_Form__c" jsShorthand="FormObjForAutoSave" fields="Id,VisualAntidote__Draft_Status__c,VisualAntidote__Fields_Object_xml__c,VisualAntidote__Form_Options__c">  
    </apex:remoteObjectModel>
    
</apex:remoteObjects>
<apex:remoteObjects jsNamespace="ffRemotePreviousFormObj">
<apex:remoteObjectModel name="VisualAntidote__Previous_Form__c" jsShorthand="PreviousFormObjForPublishToggle" fields="Id,VisualAntidote__Draft_Status__c,VisualAntidote__Form_Options__c">  
    </apex:remoteObjectModel>
    
</apex:remoteObjects>
<apex:remoteObjects jsNamespace="ffAlertTemplateNS">
<apex:remoteObjectModel name="VisualAntidote__Alert_Template__c" jsShorthand="ffAlertTemplateDelObj" fields="Id,VisualAntidote__Category__c">  
    </apex:remoteObjectModel>  
</apex:remoteObjects>
<apex:remoteObjects jsNamespace="ffAlertTemplateNS2">
 <apex:remoteObjectModel name="VisualAntidote__Alert_Template__c" jsShorthand="ffAlertTemplateCreateObj" fields="Id,VisualAntidote__Category__c,VisualAntidote__Subject__c,VisualAntidote__Body__c,VisualAntidote__Name__c">  
    </apex:remoteObjectModel> 
</apex:remoteObjects>
<apex:remoteObjects jsNamespace="ffAlertNS">
<apex:remoteObjectModel name="VisualAntidote__Alert__c" jsShorthand="ffAlertObj" fields="Id,VisualAntidote__Category__c,VisualAntidote__Alert_Type__c,CreatedDate,VisualAntidote__Status__c,VisualAntidote__Name__c,VisualAntidote__From__c,VisualAntidote__To__c,VisualAntidote__CC__c,VisualAntidote__BCC__c,VisualAntidote__Subject__c,VisualAntidote__Body__c,VisualAntidote__Form__c">  
    </apex:remoteObjectModel>
    
</apex:remoteObjects>
 <head>

<script>
/*Intercom Snippet*/
window.intercomSettings = {
    app_id: "uh2s363g",
    user_id: "{!$Organization.Id}",
    name: "{!$User.FirstName} {!$User.LastName}", // Full name
    email: "{!$User.Email}", // Email address       
    custom_launcher_selector: "#Intercom"
  };
</script>
<script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/uh2s363g';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()
/*End Intercom Snippet*/
</script>
<script>
/*FullStory Snippet*/
window['_fs_debug'] = false;
window['_fs_host'] = 'www.fullstory.com';
window['_fs_org'] = '1ZpR';
(function(m,n,e,t,l,o,g,y){
  g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
  o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
  y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
  g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){FS(l,v)};
  g.clearUserCookie=function(d,i){d=n.domain;while(1){n.cookie='fs_uid=;domain='+d+
  ';path=/;expires='+new Date(0);i=d.indexOf('.');if(i<0)break;d=d.slice(i+1)}}
})(window,document,'FS','script','user');

FS.identify('{!$Organization.Id}', {
  displayName: '{!$User.FirstName} {!$User.LastName}',
  email: '{!$User.Email}'
});

/*End FullStory Snippet*/

</script>

         <meta http-equiv="X-UA-Compatible" content="IE=edge;" />     
         <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"/>

  
         <link rel="stylesheet" href="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/jquery-ui.css')}"/>
            <link rel="stylesheet" href="{!URLFOR($Resource.ffcommon,'ffcommon.css')}" />  
            <link rel="stylesheet" href="{!URLFOR($Resource.formcss)}" /> 
        <link rel="stylesheet" href="{!URLFOR($Resource.jScroll,'css/jquery.jscrollpane.css')}" />     
         <link rel="stylesheet" href="{!URLFOR($Resource.sortable,'sortable/jquery-ui.css')}" />    
         
         <link rel="stylesheet" href="{!URLFOR($Resource.jScroll,'css/customSelectBox.css')}" />
         
         <script src="{!URLFOR($Resource.lzstringJs,'lz-string-master/libs/lz-string.min.js')}"></script>
         <script src="{!URLFOR($Resource.lzstringJs,'lz-string-master/libs/base64-string.js')}"></script>     
 
         
            
         <apex:includeScript value="//code.jquery.com/jquery-1.10.2.min.js" /> 
         <apex:includeScript value="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" />
 
    
        <script src="{!URLFOR($Resource.jScroll,'js/jquery.mousewheel.js')}"></script>       
         <script src="{!URLFOR($Resource.sortable,'sortable/jquery-ui.js')}"></script> 
    
            
         <script src="{!URLFOR($Resource.sticky,'jquery.stickit.js')}"></script>
         <script src="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/jquery-ui.js')}"></script>     
         <script src="{!URLFOR($Resource.Clipboard,'ZeroClipboard.js')}"></script>

             <link rel="stylesheet" href="{!URLFOR($Resource.foundation,'css/foundation.css')}" />     
        <script src="{!URLFOR($Resource.foundation,'js/foundation.min.js')}"></script>
        <script src="{!URLFOR($Resource.foundation,'js/foundation/foundation.joyride.js')}"></script>
         
        
            <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.js"></script>
     
     <script src="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-sliderAccess.js"></script>
        
     
            <link href="//cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.4.5/jquery-ui-timepicker-addon.css" rel="stylesheet">  </link>
        
         <script src="{!URLFOR($Resource.ruleEditorComponentJs)}"></script>
     <script src="{!URLFOR($Resource.commonJSHelper)}"></script>
 <script src="{!URLFOR($Resource.formEditorJS)}"></script>
  <script src="{!URLFOR($Resource.alertHelperJS)}"></script>
 <script src="{!URLFOR($Resource.FFMultiPageJS)}"></script>
         <link rel="stylesheet" href="{!URLFOR($Resource.select2,'select2.css')}" />
        <script src="{!URLFOR($Resource.select2,'select2.js')}"></script>
  
        <script src="{!URLFOR($Resource.Select2MultiCheckboxExt)}"></script>
        <script src="{!URLFOR($Resource.jScroll,'js/jScrollPane.js')}"></script>
<script src="{!URLFOR($Resource.SelectToPicklist)}"></script>
        <script src="{!URLFOR($Resource.SelectToRadioList)}"></script>
         <script src="{!URLFOR($Resource.FFRating)}"></script>
         <script src="{!URLFOR($Resource.CSStoJSON)}"></script>
            <link rel="stylesheet" href="{!URLFOR($Resource.ffcolorpicker,'css/colorpicker_min.css')}"/>
         <script src="{!URLFOR($Resource.ffcolorpicker,'js/colorpicker_min.js')}"></script>
         <link rel="stylesheet" href="{!URLFOR($Resource.ffrangeslider,'rangeslider.css')}"/>
         <script src="{!URLFOR($Resource.ffrangeslider,'rangeslider.js')}"></script>
    <script src="{!URLFOR($Resource.styleEditorComponentJs)}"></script>
    
    <script src="{!URLFOR($Resource.formPaymentComponentJS)}"></script>
<script src="{!URLFOR($Resource.esignature,'jquery.signaturepad.min.js')}"></script>
<script src="{!URLFOR($Resource.esignature,'json2.min.js')}"></script>
    <link rel="stylesheet" href="{!URLFOR($Resource.esignature,'signature.css')}"/>

 <!-- load ace -->
<script src="{!URLFOR($Resource.aceeditor,'aceeditor/ace.js')}"></script>
<!-- load ace language tools -->
<script src="{!URLFOR($Resource.aceeditor,'aceeditor/ext-language_tools.js')}"></script>
 

    <script src="{!URLFOR($Resource.fftextcomplete,'fftextcomplete/textcomplete.min.js')}"></script>
    <link rel="stylesheet" href="{!URLFOR($Resource.fftextcomplete,'fftextcomplete/textcomplete.css')}"/>
    
   
    <script src="{!URLFOR($Resource.FFCKEditor,'ckeditor.js')}"></script>
    <script src="{!URLFOR($Resource.FFFormHelperMethods)}"></script>
    <script src="/soap/ajax/35.0/connection.js" type="text/javascript"></script>
          <script>
               sforce.connection.sessionId='{!GETSESSIONID()}';
        
          </script>
<style>
.fieldDiv input[vatt=DATE],.fieldDiv input[vatt=DATETIME],
.docsignWrapper input.ffdate
{
   background-image:url("{!URLFOR($Resource.ffcommon,'iconalpha/datepicker.png')}")  !important;
    background-repeat: no-repeat !important;
    background-position: right center !important;
}
.fieldDiv input[vatt=REFERENCE]{
    background-image: url("{!URLFOR($Resource.ffcommon,'iconimages/LookUp.png')}")  !important;
    background-repeat: no-repeat !important;
    background-position: 200px center !important;
}
.fieldDiv input[vatt=REFERENCE]:hover{
    background-image: url("{!URLFOR($Resource.ffcommon,'iconimages/LookUpHover.png')}")  !important;
    
}
a.action-icon.expand-icon {
    background-image:url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}");  
    background-repeat: no-repeat;
    background-position: -349px -77px;
}
.sectionLi textarea.ff-label-input {
 width:75%;
}
.fieldLI textarea.ff-label-input {
 width:95%;
}
.advance-options-toggle>td,.picklist-options-toggle>td{
  padding:10px 0px;
}
.advance-options-toggle>td label.label-for,.picklist-options-toggle>td label.label-for{font-weight:600 !important; margin-top:2px; display: inline-block;
color:#616161;}
.ftable-wrap .display-table{
  width:100%;color: #616161;
    font-size: 14px;
    font-weight: 400;
}
.advance-options-box  .display-table,.picklist-options-box .display-table {

        background: #d7e0e4;
    box-shadow: inset 0 2px 4px rgba(2,2,2,.1);
        padding-top: 20px;
    padding-bottom: 20px;
    margin-bottom: 10px;
}
.display-table{display: table; }
.display-table-row{display: table-row;}
.dt-cell{display: table-cell;}
.ftable-wrap .cell-1,.ftable-wrap .cell-1{
  width:40%;
  padding-left: 20px;
}
.advance-options-box a.refresh-field-link {
    text-align: center;
    cursor: pointer;
}
 
.notification-bar .alert{
text-align: left;font-family: 'Open sans';
    font-size: 14px;
   color:#ffffff; 
   min-height: 45px;
       padding: 10px 20px;
    min-width: 300px;
    max-width: 540px;
    border-radius: 25px;
      background-color: #d55555;
    margin: 5px auto;
    -webkit-box-shadow: 0 4px 6px rgba(8,52,80,.15);
    -moz-box-shadow: 0 4px 6px rgba(8,52,80,.15);
    box-shadow: 0 4px 6px rgba(8,52,80,.15); 
}
.notification-bar .alert-warning{  
  }
  .notification-bar .alert-error{    
    background-color: #d55555;    
  }
  .close-text {
    font-weight: 900;
    font-size: 18px;
    float: right;
    cursor: pointer;
}
.notification-bar span.f-item {
    display:  block;
    clear:both;
    font-weight: 600;
}

/*picklist management css*/
.picklist-box .sortable-picklist{
  margin-left: 0px;
    padding-left: 0px;
    background-color: #ffffff; 
    list-style: none;
  }
ul.sortable-picklist li.pick-item {
    margin-left: 0px;
    padding-top: 10px;
     color: #616161;
    padding-bottom: 10px;
    padding-left:10px;    border-bottom: 1px solid #ffffff;
}
ul.sortable-picklist li.pick-t>span {
    font-style: italic;
    font-size: 12px;
   
}
ul.sortable-picklist li.pick-item.selected{ 
background-color: #f7f7f7;
}
ul.sortable-picklist li.pick-item:hover,ul.sortable-picklist li.pick-item.selected:hover{
  background-color: #f2f1f1;
}
ul.sortable-picklist span.drag-ic {
    width: 12px;
    min-height: 16px;
     
}
ul.sortable-picklist li.pick-item:hover .drag-ic{
      background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;
        background-position:-325px -239px;
        cursor: move;
}
 
li.pick-item>span{
    display:inline-block;
    vertical-align: middle;
    cursor: default;
}
li.pick-item .chk-icon{
  margin-left:7px;    
    border-radius: 3px;
    margin-right: 5px;
    
}
li.pick-item.selected .chk-icon{
background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;
    background-position: -9px -235px;
  }
li.pick-item .chk-icon, li.pick-item .del-icon{
  width:20px;
  display: inline-block;
  min-height: 20px;

}
li.pick-item span.pick-t {
    display: inline-block;
    vertical-align: top;max-width: 215px;
}
li.pick-item .del-icon{
   margin-right:10px;
visibility:hidden;
}
li.pick-item.custom-li .del-icon{
   background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;
        background-position:-291px -234px;
        cursor: pointer;
}
li.pick-item.custom-li:hover .del-icon{
visibility:visible;
}
li.pick-item {
    background-image: none !important;
}
.picklist-box-header,.picklist-box,.picklist-actions-box,.picklist-box-footer{
  width:320px;
}
.picklist-box-wrapper{
  max-width:340px;
}
.picklist-box-wrapper .help-icon{
float: right;
    margin-top: -27px;
}
.picklist-actions-box {
    overflow: hidden;
    padding-bottom: 10px; 
}
.picklist-actions-box .f-left{
  float:left;
  display: inline-block;
}
.picklist-actions-box .f-right{
  float:right;
  display: inline-block;
}
.picklist-actions-box span{
      text-decoration: underline;color: #616161;font-size: 14px;cursor: pointer;
}
.picklist-box {
  border: 1px solid #cecccc;

  background-color: #ffffff;
  
}
.picklist-box-header input[type=textbox]{
     width: 100%  !important;
    padding-left: 15px  !important;
    min-height: 40px;    
    border-radius: 5px 5px 0px 0px ;
    border: 1px solid #cecccc ;
        background: #fff url("{!URLFOR($Resource.ffcommon,'iconimages/LookUp.png')}") no-repeat 285px center;
}
.picklist-box-header input:active,.picklist-box-header input:focus{
  border-color: #33aefd;
}
.picklist-box-footer{
  
  height:40px;color:#616161;
    overflow: hidden;
}
.picklist-footer-1{
width: 276px;
    float: left;
    border: 1px solid #cecccc;
    overflow: hidden;
    background-color: #ffffff;
    border-radius: 0px 0px 0px 5px;border-right: 0px;padding: 3px;
    height: 40px;
 -webkit-transition:width .2s ease-in-out,visibility 1s linear, opacity 1s linear; -moz-transition: width .2s ease-in-out,visibility 1s linear, opacity 1s linear; -o-transition:width .2s ease-in-out,visibility 1s linear, opacity 1s linear;
}
.picklist-footer-2{
    border: 1px solid #cecccc;
    display: inline-block;
    background-color: #ffffff;
    border-radius: 0px 0px 5px 0px;
    float: left;padding: 3px;
    height: 40px;
    width: 44px;
     
}
.picklist-footer-2{
border-left: 0px;
background-color: #f2f1f1;
font-family:'Open Sans';
font-weight: 400;
font-size:14px;
  }
  .picklist-footer-2 .add-multi-icon .add-many-txt{
   display: none;
  }.picklist-footer-2 .add-multi-icon{
  display: inline-block;
    float: right;
    min-width: 30px;
    min-height: 30px;cursor: pointer;
  }
   .picklist-footer-2 span.add-micon {
    background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;
    background-position: -45px -232px;
    width: 25px;
    height: 30px;
    display: inline-block;
    float: right;
    margin-right: 8px;
} 
.picklist-box-footer>span {
    display: inline-block;
}
.picklist-box-footer input[type=textbox] {
    border: 0px !important;
    border-radius: 0px !important;
}

.picklist-box{
  border-top:0px;
  border-bottom:0px;
height: 206px;
overflow: auto;
}
.picklist-footer-2 .hide-text-area,.picklist-footer-2 .add-mpick-icon{
display:none;
}
.multi-line-pick{
  margin-top: -244px;
    height: 244px;
    width: 320px;
    resize:none;color: #616161;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
    border: 1px solid #33AEFD !important;
    border-bottom-width: 0px !important;
}
.picklist-footer-1 .search-box{
  padding:7px 7px 7px 40px !important;
  vertical-align: top;
    display: inline-block;
}
.picklist-footer-1 .add-icon{
  width:20px;
  position: absolute;
  height:20px;
  margin-top: 3px;
  margin-left:15px;
  display: inline-block;vertical-align: top;
  background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;    
    background-position: -179px -232px;
}
.picklist-footer-1 .add-icon:hover{
   background-position: -200px -232px;
}
.single-state-add .picklist-footer-1{
    width:320px;border-radius: 0px 0px 5px 5px;    border-right-width: 1px;
    border-right-style: solid;
    border-color: #33aefd ;
  }   
  .single-state-add .picklist-footer-1 .add-icon{ background-position: -201px -232px;}
  .single-state-add .picklist-footer-2{
    opacity: 0; visibility: hidden;height:0px;height:0px;
  }  
  .multi-state-add .picklist-footer-1,.multi-state-enabled .picklist-footer-1{
    opacity: 0;
    visibility: hidden;
    height: 0px;
    border: 0px;
    padding: 0px;
  }
  .multi-state-add .picklist-footer-2,.multi-state-enabled .picklist-footer-2{
   width:320px;border-radius: 0px 0px 5px 5px;
       border: 1px solid #cecccc;
  }
   .multi-state-add .picklist-footer-2 .hide-text-area,.multi-state-add .picklist-footer-2 .add-mpick-icon{
display: inline-block;min-width: 30px;cursor: pointer;
}
.multi-state-add .picklist-footer-2 .add-mpick-icon,.single-state-add .picklist-footer-1 .add-pick-icon{
    float: right;
    margin-right:3px;
}
.multi-state-add .picklist-footer-2 .add-multi-icon {
    display: none  ;
}
  .multi-state-enabled .add-multi-icon .add-many-txt{
   display: inline-block;    margin-top: 4px;
    margin-right: 5px;
  }
  .multi-state-add .add-multi-icon .add-many-txt{
    display: none; 
  }
  .multi-state-enabled .add-multi-icon span.add-micon {
     background-position: -76px -232px;  
}
.multi-state-enabled .add-multi-icon  {
    color:#33aefd;  
}
span.hide-text-area .hide-icon {
  display: inline-block;
  width:25px;
height: 20px;    background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
    background-repeat: no-repeat;
    background-position: -372px -230px;
  }
  span.hide-text-area{
    text-decoration: underline;
    margin-left: 15px;
  }
.multi-state-add .add-icon{
   background-position: -240px -232px;
}
.multi-state-add  .picklist-footer-2 {
   
    border: 1px solid #33AEFD !important;
    border-top-width: 0px !important;
}
 
span.add-pick-icon.vabutton1 { 
    min-width: 30px;
}
select>option[data-disabled="true"] {
    display: none;
}
.picklist-box.multi-line-enabled{
  overflow: hidden;
}
/*picklist management css ends*/
/*picklist management css in rule editor css starts*/

.ffp-input-footer-toggle ,.ffp-input-toggle .ffp-ic{
 
 background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
  background-repeat: no-repeat;
    background-position: -142px 5px; 
}
.ffp-input-toggle .ffp-ic{
     width: 20px;
    height: 20px;
    display: inline-block;
}
.ffp-footer {
        overflow: hidden;
    min-height: 30px;
    display: inline-block;
    width: 100%;
    border: 1px solid #aaa;
    padding: 0px 4px;
    background: #f2f1f1;
    border-radius: 0px 0px 5px 5px;
}
.ffp-input-footer-toggle {
    display: inline-block;
    float: right;
    width: 20px;cursor: pointer;
        background-position: -401px -232px;
    height: 20px;
}
.ffp-expanded-state li.pick-item>span{
background-image:none;
} 
.ffp-expanded-state li.pick-item.ff-selected >span{
  background-image: url("{!URLFOR($Resource.ffcommon,'icon_publish_options/publish_option_sprite.png')}")  ;
   background-repeat: no-repeat;
    background-position: -9px -235px;
}
.ffp-input-search {
    border-radius: 5px 5px 0px 0px;
    background: white;
    font-family: 'Open Sans';
    border: 1px solid #aaa;
    color: #052942;
    padding: 7px;
    font-size: 13.5px;
    outline: none;
   width:100%;
       background: #fff url("{!URLFOR($Resource.ffcommon,'iconimages/LookUp.png')}") no-repeat 98% center;
}
.ffp-select-toggle {
    float: left;
    font-size: 14px;
    text-decoration: underline;
    color: #616161;
    padding: 3px;
    cursor: pointer;
}
.ffp-expanded-state>ul {
    
    border: 1px solid #aaa;
    border-width: 0px 1px;
}
.sfff-rule-statements-.rule-st-3 .sfff-rule-then-setpicklistoptions .sfff-rule-then-existing-field-box, .sfff-rule-statements-.rule-st-3 .sfff-rule-then-setpicklistoptions .sfff-rule-then-static-value-box{
width:100%;
}
li.ffp-pill-li .ff-ext-checkbox-css{
 
  background-image: url("{!URLFOR($Resource.ffcommon,'icon_draft_actions/draft_delete.png')}")  ;
   background-repeat: no-repeat;
    background-position: -1px -1px;
    width: 10px;
    height: 10px;
    margin-right: 5px;
    cursor: pointer;
    display: inline-block;
}
.ff-select-to-picklist-list.custom-picklist-control-container {
    width: 315px;
}
.ffp-collapsed-state .ff-select-to-picklist-ul{
    max-height: 55px;
    overflow: hidden;
  }
.ffp-input-toggle {    
    float: right;
}
.ffp-input-toggle.ff-moreitems{
  margin-top: -26px;position: relative;cursor: pointer;
}
.ffp-txt {
    color:#bababa;background-color: rgba(255, 255, 255, 0.22);
}
/*picklist management css in rule editor css ends*/

/*Dynamic naming for PDF and file upload css starts*/
textarea.maxwh_3_1{
  max-width: 300px;
  max-height: 300px;
}
/**/
</style>
 <script type="text/javascript">
 
    var __sfdcSessionId = '{!GETSESSIONID()}';
 
    </script>
  
 
 
<script type='text/javascript'>
(function(f,b){if(!b.__SV){var a,e,i,g;window.mixpanel=b;b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
    for(g=0;g<i.length;g++)f(c,i[g]);b._i.push([a,e,d])};b.__SV=1.2;a=f.createElement("script");a.type="text/javascript";a.async=!0;a.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";e=f.getElementsByTagName("script")[0];e.parentNode.insertBefore(a,e)}})(document,window.mixpanel||[]);
mixpanel.init("39b7e8be28cfa1b59fdd342bad0004e0");

    </script></head>
    <script type='text/javascript'>
      var availableGenFieldsInRepSecArr = ['OGeneralText', 'OImage', 'OESignature'];
      <apex:outputText rendered="{!IsNative}">
          var systemAlertTypes = ['ADMIN_PDF','FAILURE','SAVE_FOR_LATER'];
        </apex:outputText>
        <apex:outputText rendered="{!!IsNative}">
         var systemAlertTypes = ['EMAIL_VERIFICATION','FAILED_PAYMENT', 'ADMIN_PDF','USER_PDF','FAILURE','SAVE_FOR_LATER'];
        </apex:outputText>
      var systemAlertTypeMap = {'EMAIL_VERIFICATION':'E-Signature Email Verification Request','FAILED_PAYMENT':'Payment Failure','ADMIN_PDF':'Submission PDF','USER_PDF':'E-Signature Email Verification Confirmation','FAILURE':'Submission Failure','SAVE_FOR_LATER':'Save for Later','SUCCESSFUL_SUBMISSION':'Successful Submission'};
      var fastformsAlertTypeMergeFieldsMap = {'EMAIL_VERIFICATION':['ReferrerPage', 'AdminEmail', 'VerifyLink'],'FAILURE':['FormName','SubmissionResults','SubmissionDetails'],'SAVE_FOR_LATER':['FormName','ContinueSubmissionLink']};
      var alertEmailFieldTypeMap ={'userfield':'User Field','fieldvalue':'Email','fieldid':'Field'};      
var commonDialogOptions={resizable: false,modal: true,title: "Close",height: "auto",width: 413,position: 'center'};
var OSDataTypesArr=['OLookup','OMultiPicklist','OSinglePicklist','OCurrency','ONumeric','OSField'];
var PDFEnabledAlertTypeArr=["ADMIN_PDF","USER_PDF","SUCCESSFUL_SUBMISSION"];
var isRelatedObjInfoUpdated='{!isRelatedInfoUpdated}';
var FFUserEmail= '{!$User.Email}';
var FFUserFullName= '{!$User.FirstName} {!$User.LastName}';
var FastFormsRecordId = '{!$CurrentPage.parameters.id}';
var isFormNative= {!IsNative};
var resetFastFormsToken=true;
var isTokenNeedReset={!$Setup.FastFormsTokenInfo__c.Reset__c};
var FFCKEditorurlroot="{!URLFOR($Resource.FFCKEditor)}";
var maxRelatedObject=14;
var ffcommonResuorceUrl  = "{!URLFOR($Resource.ffcommon)}";
var colorTagArray=['Z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y'];
var loadingWebWorker;
var SFOrgPrefix='';
 
if(ffcommonResuorceUrl.toLowerCase().indexOf('visualantidote__')>0){
    SFOrgPrefix='VisualAntidote__';
}
var availableFieldList=[];
window.setInterval(autosaveTriggered, 3000);    
var sfdcHostName =window.location.host.split('.')[1]; 
var organisationId='{!$Organization.Id}';
var lookupWarningFlagDisable='{!isLookupWarningDisabled}';
var saveForLaterWarningFlagDisable='{!isSaveForLaterWarningDisabled}';
var apiSessionId='{!$Api.Session_ID}';
var overRideCheckRuleObject=false;
var ruleObjectsData=[];
var changeRelObjIndx='';
var formRelatedObjectXML='';
var mapLookup=new Object();
var newWin=null;
var togSet=false;
var RunOnces=0;
var isFFValid=true;
var idCounter=0;
var RunTag=true;
var sectionCounter =  0;
var ruleCounter = 0;
var footerBtnHTMLPopulated = false;
var isChangeFieldCallFromReteriveHtml = false;
var isRequiredRemoved = false;
//var imgUrl = "{!URLFOR($Resource.iconImages,'Edit.png')}";
var imgUrl = "{!URLFOR($Resource.alpha,'blank.png')}";
//var deleteImgUrl = "{!URLFOR($Resource.iconImages,'Close.png')}";
var deleteImgUrl = "{!URLFOR($Resource.alpha,'blank.png')}";
var editActiveImgUrl  = "{!URLFOR($Resource.iconImages,'EditActive.png')}";
//var editImgUrl  = "{!URLFOR($Resource.iconImages,'Edit.png')}";
var editImgUrl  = "{!URLFOR($Resource.alpha,'blank.png')}";
var isChangesMadeInForm = false;
var isFirstTimeFormEdit = "false";
var limitValue='';
                
                
$(function() { 
    $(document).foundation();

    $( document ).foundation({ joyride : {         
        tip_animation : 'fade',
        tip_animation_fade_speed: 500,          
        modal:false,
        expose: false,
        next_button: true,
        prev_button: false,
        cookie_monster: true,
        cookie_name: 'fastforms-joyride',
        cookie_domain: false,
        cookie_expires: 365,
        post_ride_callback: function() {
            $(document).foundation('joyride', 'destroy');
        }                    
    }
    });
                     
    $(document).foundation({
        joyride: {
            post_step_callback : function (index) {
                if (index==2 && !$('#generalFieldBox').is(':visible'))
                    toggleAvailableFieldsMenu(document.getElementById('availableHeaderDivFirst'));
            }
        }
    }).foundation('joyride', 'start');


    scrollAvailableDiv();           
    isFirstTimeFormEdit = "{!isFirstTimeFormEdit}";
    //initialize clipborad
    var clip = new ZeroClipboard( 
            $('.code'), {
                moviePath: "{!URLFOR($Resource.Clipboard,'ZeroClipboard.swf')}"
            });
    clip.addEventListener('complete',function(client,text) {
        $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconOK'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Your embed code was copied to the clipboard! </div><br /><div class='secondary'>Simply paste the code into your website using <b>Command+V</b> on Mac or <b>Ctrl+V</b> on Windows.</div></div>");
                             
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Close",
            height: "auto",
            width: 413,
            buttons:{
                "Close":{
                    click: function () {
                        $(this).dialog('close');
                                                                     
                                                                        
                    },
                    text: 'Close',
                    'class': 'vabutton2'
                } 
            }
 
        });
    });          
                             
    $(".selValue").val('{!form.FastFormID__c}');            
    $('.form-canvas-block-Loading').fadeIn();
    remoteGetFormPagesInfoJS();//
                        
    makeJqueryTooltip();
                        
    $("#deleteTemplateLink").hide();
    // Bind required checkbox onchange event to show and hide error message textbox and clear that textbox value
    $( "#requiredChk" ).change(function() {
        if($(this).prop('checked')== true){
            $( "#dialog" ).dialog({ height: 380});
            $("#errMsgForRequiredField").show();
            $("#lblErrMsgForRequiredField").show();
        }else{
            $( "#dialog" ).dialog({ height: 350});
            $("#errMsgForRequiredField").hide();
            $("#lblErrMsgForRequiredField").hide();
            $("#errMsgForRequiredField").val('');
        }
    });
                        
    //Hide/Show Form Information Section
    $( "#showFormLink" ).hide();
    $( "#showRuleLink" ).hide();
                        
    $( "#hideFormLink" ).bind( "click", function() {
        $("#formInformationTbl").hide();
        $(this).hide();
        $("#showFormLink").show();
    });
                        
    $( "#showFormLink" ).bind( "click", function() {
        $("#formInformationTbl").show();
        $(this).hide();
        $("#hideFormLink").show();
                            
    });
                        
    //Scroll to Top
    // Show or hide the sticky footer button 
    $(window).scroll(function() {
        if ($(this).scrollTop() > 220) {
            $('.go-top').fadeIn(500);
        } else {
            $('.go-top').fadeOut(500);
        }
    });
                                                
    // Animate the scroll to top
    $('.go-top').click(function(event) {
        event.preventDefault();               
        $('html, body').animate({scrollTop: 0}, 500);
    })
                        
                        
    $(document).click(function(e) {
        if($('#customfltype').next().html() == "Please provide comma-separated extensions (e.g. .doc, .txt)" || e.target.id == "customfltype" || e.target.className == 'css-label' || e.target.className == 'fancyheader' || e.target.className == 'ExCol' || e.target.className == 'css-checkbox flChk' || e.target.className == 'fancydropdownbottom' || e.target.className == 'fancydropdown'){  

        }else{
            $('.fancyheader').removeClass('addFancy');
            $('.fancyheader').next().hide();
            $('.fancyheader').next().next().hide();
        }
                                
                                
    });
                        
                      
    $( "#createNewRule" ).bind( "click", function() {
        $("#hiddenSelectedRuleId").val('');
        var allFieldsLabel = [];
        var allFieldsName = [];
        var counter = 0;
        if($(".formUlLabel").has('li').length){
            $(".formUlLabel").find('li').each(function(){
                $(this).find('div:first').each(function(){
                    allFieldsLabel[counter] = $(this).attr('lblname');
                    counter++;
                });
            });
        }
        counter =0; 
        if($(".formUlField").has('li').length){
            $(".formUlField").find('li').each(function(){
                $(this).find('div:first').each(function(){
                    allFieldsName[counter] = $(this).attr('id').replace('divField','');
                    counter++;
                });
            });
        }
                                
        var i =0;
        $("#selectOptionsIfFields option").remove(); // removes all options from the select element w
        $("#selectOptionsThenFields option").remove();
                                
        for(i=0;i<allFieldsLabel.length && i<allFieldsName.length;i++){
                                         
            $("#selectOptionsIfFields").append('<option value="'+allFieldsName[i]+'" >'+ allFieldsLabel[i]+'</option>');
            $("#selectOptionsThenFields").append('<option value="'+allFieldsName[i]+'" >'+ allFieldsLabel[i]+'</option>');
        }
        $( '#rulesDialog' ).dialog( 'open' );
                                 
    });
                        
                        
                        
    // Sucess Dialog 
    $( "#dialogSucess" ).dialog({
        height: "auto",
        width: 413,
        modal: true,
        autoOpen: false
    });
                         
    $( "#dialog" ).dialog({
        height: "auto",
        width: 413,
        modal: true,
        autoOpen: false
    });
                            
    //Button Dialog
    $( "#buttonDialog" ).dialog({
        height: "auto",
        width: 413,
        modal: true,
        autoOpen: false
    });
                            
    //Preview Dialog
    $('#preview').dialog({
        autoOpen: false,

        width: 520,
        modal: true,
        title:"Form Preview",
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        },
        close: function (event, ui) {
            closePrivewDialog();
        }
    }); 
                        
                        
    makeSectionsSortable();
    makePagesSortable(); 
    makeMultiPageFormSortable(false,true,true);
                                                        
    isChangesMadeInForm = false; 
                                    
});
                  
function resetScroll()
{
    var isFixed = false;
                    
    var $w = $(window);
    var sMargin=false;

    var legendOffset = $('#headerPanel').offset().top+$('#headerPanel').height()+100;
                                
    var scroll = $w.scrollTop();
    if (scroll <= legendOffset || legendOffset==0 ) {
                    
        if($('.main-content-holder').hasClass('floating-sidebar'))
        {
            $('#availableFieldBox').css({
                'position': 'relative',
                'top': 'auto',
                'margin-top':0
            });
            $('.form-floating-actions').hide();
            $('.main-content-holder').removeClass('floating-sidebar');
        }        

    }
                            
    else {
                               
        if(!$('.main-content-holder').hasClass('floating-sidebar'))
        {
            $('.main-content-holder').addClass('floating-sidebar');
            $('.form-floating-actions').show();
                                 
            $('#availableFieldBox').css({
                'position': 'fixed',
                'top': 0,
                'margin-top':45
            });
        }
    }
}
                 
            
//JQuery  Tootlip 
function makeJqueryTooltip(){         
    $( ".tooltipFieldType" ).tooltip({
        show: {
            effect: "slideDown",
            delay: 250
        }
    });
                 
}
                
                  

         
function removePrimaryLookupField() {
    var primaryObjName = $("#priName").attr('data-object');
    $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
        var objectnumber=(indx+1); 
        var refLabelName=selectRelObjDataAttrByIndex(objectnumber,'data-refidname');
        var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
        if (!isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
            $(sortableUL).find("li").each(function (index,liELem) {
                          
                         
                if (($(this).attr('title') == "REFERENCE" || $(this).attr('title').match(/\(Lookup\)$/g) != null) && $(this).find('label').attr('vaobj') != undefined && $(this).find('.labelDiv label.ff-label').attr('vaobj') == primaryObjName && $(this).find('.labelDiv label.ff-label').attr('data-apiname')==refLabelName) {
                    $(this).hide();
                }
            });
        }
                         
    });
}
          
function saveFormComplete(){
    ruleCounter = 0; 
    $('[id$="formName"]').attr("disabled", true);
    $('[id$="FromTypeOptions"]').attr("disabled", true);
    $('.formName').parent().parent().show();
    $('.objectType').parent().parent().show();
    $('#saveFormBtn').parent().parent().hide();
    $("#parentUlForm").html('');
    calcualteFormInformation();             
}
                 
function sendComplete(){ 
    $(".expandBtnDiv").hide()  
    $( '#success').show();
    $( '#Processing' ).hide();
    if($('[id$="is500InternalError"]').val() == "true") {
        $('#ui-id-1').text('Error');
        $('#dialogSucess #success').hide();
        $('#dialogSucess #failure').show();
                                 
    }else{
        $('#ui-id-1').text('Success');
        $('#dialogSucess #success').show();
        $('#dialogSucess #failure').hide();
        closeSavingDialog();
                                                  
        $(".btnPublishedSaved").text('Publish Draft');
    } 
    disablePublishDraftButton();
    $('#successActionBox').find('a').focus();                                             
}
                 
          
                  
function  ParsedXMLFromService(htmlToParse){ 
    var orgid='{!$Organization.Id}';
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    var htmlserviceURL='{!htmlParsingServiceURL}';
    try{
        if(!isNullOrEmpty(htmlToParse))
        {
            htmlToParse=htmlToParse.replace(/data-test-mode="false"><\/div><\/div><\/div><\/div>/g,'data-test-mode="false"><\/div><\/div><\/div>');
            htmlToParse= htmlToParse.replace(/data-test-mode="true"><\/div><\/div><\/div><\/div>/g,'data-test-mode="true"><\/div><\/div><\/div>');
        }
    }
    catch(err)
    {

    }
    var serviceUrl = htmlserviceURL;
    var xmlParsed='';

    var xhttp = null;
    if(Sarissa.originalXMLHttpRequest) {
        xhttp = new Sarissa.originalXMLHttpRequest();
    } else if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest();
    }
    xhttp.open("POST", serviceUrl,true);
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.setRequestHeader("FastFormsInfo", "Org:"+orgid+" Recid:"+ffrecordid);
    xhttp.setRequestHeader("Authorization", "token PFJTQUtleVZhbHVlPjxNb2R1bHVzPnhBOENDZXBhTFB");
    xhttp.onprogress = function(pe) {
            
    }
    xhttp.onreadystatechange = function () {

        if (xhttp.readyState == 4 && xhttp.status == 200) {

                
            if (xhttp.responseText && xhttp.responseText.length > 0)
            {
                    
                var response =[];
                try{
                    response = $.parseJSON(xhttp.responseText);
                }
                catch(err)
                {
                    if(isFIREFOX){
                        var isResponseValid=getSafeBoolean(xhttp.responseXML.firstChild.childNodes[1].innerHTML,false);
                        if(isResponseValid)
                        {
                            response['isValid']=  true;
                            response['formXML']=   xhttp.responseXML.firstChild.childNodes[0].textContent;
                        }
                    }
                        
                }
                if (response != null) {
                    if (response.isValid) { 
                        var xmlDoc;
                        var xmlstr=response.formXML;
                        if (msieversion()==0) {
                            parser = new DOMParser();
                            xmlDoc = parser.parseFromString(xmlstr, "application/xml");
                        }
                        else // Internet Explorer
                        {
                            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                            xmlDoc.async = false;
                            xmlDoc.loadXML(xmlstr);
                        }
                        if(xmlDoc.getElementsByTagName("parseerror").length>0){
                            commonAlertMessage("An error occurred when attempting to load your form.","Please contact the Fast Forms Support Team at support@fastforms.io for assistance.");
                            messageLogToIntercom('Parsing error while migrating old form to new form');
                        }
                        else if(xmlDoc.getElementsByTagName("SFForm").length>0)
                        {                       
                              

                            var submitOptions='<btnMessage>Thank you for your submission!</btnMessage><btnText>Send</btnText><btnUrl/><notificationEmails/><sendNotificationEmail>false</sendNotificationEmail>';
                            var redirectEnabled=false;
                           
                            var fieldsXML='';
                            var submitBtnInfoXML='';
                            if(!isNullOrEmpty(xmlstr))
                            {
                                if(msieversion()==1){
                                    /* IE browser*/
                                    if(!isNullOrEmpty(xmlDoc.lastChild.lastChild.nodeName) && xmlDoc.lastChild.lastChild.nodeName=='ffPage')
                                    {
                                        fieldsXML= xmlDoc.lastChild.lastChild.xml;
                                        fieldsXML=fieldsXML.replace(/xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"/g,'');
                                        fieldsXML= fieldsXML.replace(/xsi:/g,'');
                                    }
                                    if(!isNullOrEmpty(xmlDoc.lastChild.firstChild.nodeName) && xmlDoc.lastChild.firstChild.nodeName=='submitInfo')
                                    {
                                        submitOptions= xmlDoc.lastChild.firstChild.xml;
                                        submitOptions=submitOptions.replace(/xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"/g,'');
                                        submitOptions= submitOptions.replace(/xsi:/g,'');
                                  
                                        if(!isNullOrEmpty(getXmlElementFromStr(xmlDoc.lastChild.firstChild.xml).getElementsByTagName('btnUrl')[0].text))
                                        {
                                            redirectEnabled=true;
                                        }
                                   
                                        // callToSubmitInfo(redirectEnabled,submitOptions);
                                    }
                                }
                                else
                                {
                                    /* Non IE browser*/
                                    if(xmlDoc.getElementsByTagName("ffPage").length>0)
                                    {
                                        fieldsXML= getXMLStringFromXMLNode(xmlDoc.getElementsByTagName("ffPage")[0]);
                                        fieldsXML=fieldsXML.replace(/xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"/g,'');
                                        fieldsXML=fieldsXML.replace(/xsi:/g,'');
                                    }
                                    if(xmlDoc.getElementsByTagName("submitInfo").length>0)
                                    {
                                        submitOptions=  getInnerXMLStringFromXMLNode(xmlDoc.getElementsByTagName("submitInfo")[0]);
                                        submitOptions=submitOptions.replace(/xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance"/g,'');
                                 
                              
                                        if(!isNullOrEmpty(getInnerXMLStringFromXMLNode(getXmlElementFromStr('<root>'+submitOptions+'</root>').getElementsByTagName('btnUrl')[0])))
                                        {
                                            redirectEnabled=true;
                                        }
                               
                           
                                    }
                                }
                             
                              
                                isHTMLImportTriggered=true;
                                remoteSetFormXMLJS('Page Title',1,fieldsXML,'');

                                callToSubmitInfo(redirectEnabled,submitOptions);


                            }
                            else{
                                commonAlertMessage("An error occurred when attempting to load your form.","Please contact the Fast Forms Support Team at support@fastforms.io for assistance.");
                                messageLogToIntercom('Parsing service error- XML is null');
                            }
                        }
                    }
                    else {
                        commonAlertMessage("An error occurred when attempting to load your form.","Please contact the Fast Forms Support Team at support@fastforms.io for assistance."); 
                            
                        messageLogToIntercom('Parsing Service call error-'+response.otherText);
                         
                    }
                }
            }
            else{
                
                console.log(' Service call exception'+xhttp.responseText) ;  
            }
        }
        else if (xhttp.readyState == 4 && xhttp.status != 200) {
            messageLogToIntercom('Service call exception-'+xhttp.responseText);         
        }
    }
    xhttp.send(htmlToParse);

             
             
              
}
            
           
           
            
var isHTMLImportTriggered=false;
var firstTimeXMLCall=true;
function remoteSetFormXMLJS(pagetitle,pageorder,formXML,pagehtml)
{
    /*String formXML,String pageTitle,Integer pageOrder,String recordid*/
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteCreateFormPage)}',ffrecordid,pagetitle,pageorder,formXML,pagehtml,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result.IsValid)
               {
                   remoteGetFormPagesInfoJS();
               }
               else
               {
                   console.log(' SetFormXML result is not valid ');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function remoteCreateNewFormJS(elemSource,pagetitle,pageorder,formXML,pagehtml,refreshPageOrder)
{
          
    /*String formXML,String pageTitle,Integer pageOrder,String recordid*/
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteCreateFormPage)}',ffrecordid,pagetitle,pageorder,formXML,pagehtml,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result.IsValid)
               {
                   var  fieldsXml=getPrefixedOrgFieldName(SFOrgPrefix,'Fields_xml__c'); 
                   var  pageOrder=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Order__c');
                   var  pageTitle=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Title__c');
                   var  isHidden=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Hidden__c');
                            
                   var formPage=  result.ResultSObject;
                   var mainPageElemWrapper = $(elemSource).parents('#mainMultiPageWrapper');
                   var ispagehidden=getSafeBoolean(formPage[isHidden],false);
                   var pageItem= createJSONPageObj(formPage["Id"],formPage["Name"],formPage[pageTitle],formPage[pageOrder],'','',ispagehidden )
                   addFFPage(mainPageElemWrapper, pageItem);

                   makeSectionsSortable();
                   makePagesSortable();
                   resetMultiPageSortableCall();
                   resetFooterNavigation();
                   if(refreshPageOrder)
                   {
                       refreshPagesOrder();
                   }
               }
               else
               {
                   console.log(' JSCode is null');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function remoteSetOrGetSubmitInfoXMLJS(submitInfoXML,isUpdate,populateOnlyCanvasElems)
{
    /*Get or Set the form options information*/
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteSetOrGetSubmitInfoPage)}',submitInfoXML,ffrecordid,isUpdate,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result.IsValid)
               {
                   if(isUpdate)
                   {
                       $('#formOptionsHidden').val(submitInfoXML);
                       console.log(' Submit info updated ');
                       populateSubmitOptions(getXmlElementFromStr(submitInfoXML),true);
                       resetFooterNavigation();
                   }
                   else
                   {
                       console.log('Reading Submit info ');
                       var decoded = $('<div/>').html(result.ResultText).text();
                       $('#formOptionsHidden').val(decoded);
                       populateSubmitOptions(getXmlElementFromStr(decoded),populateOnlyCanvasElems);
                       resetFooterNavigation();
                   }
               }
               else
               {
                   console.log(' JSCode is null');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function remoteGetFormPagesInfoJS()
{
         
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetFormPagesInfo)}',ffrecordid,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result.length>0 && result[0].IsValid)
               {
                   //populateFormCanvas
                   populateFormCanvas(result);
                            
                   remoteSetOrGetSubmitInfoXMLJS('',false,false);
               }
               else if(result.length>0 && result[0].ResultText=='No record found' && firstTimeXMLCall)
               {
                   firstTimeXMLCall=false;
                   remoteGetFormFinalHTMLJS();
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function remoteValidatePrefillInfoJS(elemSource)
{
           
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteValidatePrefillInfo)}',ffrecordid,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result!=null && result)
               {
                   validateSaveForLaterandThenPublish(elemSource);
               }
               else 
               {
                   commonAlertMessage('You have auto-generated prefill links enabled for your form.','Your primary object has changed since your last made changes to your form. In order to publish your form with these changes, please disable the auto-generated prefill links option in the Publish Options for your form.');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function remoteUpdateFormSettingsInfoJS(previousFormRecord)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteUpdateFormSettingsInfo)}',previousFormRecord,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
              if(result.ResultSObject!=null){
                  setFastFormName(result.ResultSObject["Name"]);
                  if(result.ResultSObject[SFOrgPrefix+"Form_Options__c"]!=null){
                      resetFormFooterInfo(result.ResultSObject[SFOrgPrefix+"Form_Options__c"]);
                  }
              }
              draftchanges(false);                     
          }else if(result != null && !result.IsValid){
              showErrorMessage('Something went wrong while saving your form settings information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
              console.log('updateFormSettingsInfo response is not valid');
          } else {
              showErrorMessage('Something went wrong while saving your form settings information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while saving your form settings information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while saving your form settings information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteGetAlertTemplatesInfoJS(elemSource)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetAlertTemplatesInfo)}',
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
            populateEmailTemplatesTab(elemSource,result);
          } else {
               console.log('remoteGetAlertTemplatesInfo response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while getting alert templates information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while getting alert templates information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteGetStandardAlertsInfoJS(elemSource,systemAlertTypesArr)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetStandardAlertsInfo)}',systemAlertTypesArr,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
            populateStandardAlertInfo(elemSource,result);
          } else {
               console.log('remoteGetStandardAlertsInfo response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while getting alerts information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while getting alerts information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteGetSystemAlertsInfoJS(elemSource)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetSystemAlertsInfo)}',FastFormsRecordId,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
            populateSystemAlertTab(elemSource,result);
          } else {
               console.log('remoteGetStandardAlertsInfo response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while getting alerts information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while getting alerts information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteGetAlertInfoToEditJS(elemSource,recordId)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetAlertInfoToEdit)}',recordId,FastFormsRecordId,
  function(result, event) {
      if (event.status) {
           if (result != null && result.IsValid) {
            var alertcategory = $(elemSource).parents('.oar-content-row').attr('data-category');
            if(!isNullOrEmpty(alertcategory) && alertcategory=='Custom'){
              populateCustomAlertEditInfo(elemSource,result,false);
            }else{
            populateAlertEditInfo(elemSource,result);
            }
          } else {
               console.log('remoteGetAlertInfoToEditJS response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while populating alerts information to edit. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while populating alerts information to edit. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: true
  });
}
function remoteGetAlertTemplateInfoToEditJS(elemSource,recordId)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetAlertTemplateInfoToEdit)}',recordId,
  function(result, event) {
      if (event.status) {
           if (result != null && result.IsValid) {
            populateAlertTemplateEditInfo(elemSource,result,false);
          } else {
               console.log('remoteGetAlertTemplateInfoToEditJS response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while populating alert templates information to edit. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while populating alert templates information to edit. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: true
  });
}
function remoteGetAlertTemplateInfoJS(elemSource,recordId)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetAlertTemplateInfoToEdit)}',recordId,
  function(result, event) {
      if (event.status) {
           if (result != null && result.IsValid) {
            remoteGetAlertTemplateInfoJSCallback(elemSource,result);
          } else {
            alertErrorMessage($(elemSource).parents('.alert-content-holder'),'Something went wrong while getting list of email templates. Please try again');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while populating alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while populating alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteGetAlertTemplatesListJS(parentElem)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetAlertTemplatesList)}',
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.length>0) {
             console.log('remoteGetAlertTemplatesInfoJS response is valid');
           resetAlertTemplateList(parentElem,result);
          } else {
               console.log('remoteGetAlertTemplatesInfoJS response is not valid');
             resetAlertTemplateList(parentElem,null);
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while getting form fields information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while getting form fields information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteAvailableFormFieldsSortedJS(parentElem,alertInfoObject,isNew)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteAvailableFormFieldsSorted)}',FastFormsRecordId,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.length>0) {
             console.log('remoteGetAlertTemplatesInfo response is valid');
           populateFormFieldsSelectElem(parentElem,result,alertInfoObject,isNew);
          } else {
               console.log('remoteGetAlertTemplatesInfo response is not valid');
               populateFormFieldsSelectElem(parentElem,null,alertInfoObject,isNew);
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while getting form fields information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while getting form fields information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteUpdateAlertInfoJS(alertContentHolderElem,alertInfoObj,isNew)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteUpdateAlertInfo)}',alertInfoObj,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
             console.log('remoteUpdateAlertInfo response is valid');
           saveAlertInfoCallback(alertContentHolderElem,isNew);
           updatePreviousFormObjForPublishToggle('Unpublished');
          } else {
             alertErrorMessage(alertContentHolderElem,'Something went wrong while updating the alert. Please try again');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while saving alert information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while saving alert information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
 
function remoteDuplicateAlertInfoJS(alertContentHolderElem,alertRecId)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteDuplicateAlertInfo)}',alertRecId,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
             
           saveAlertInfoCallback(alertContentHolderElem,true);
           
          } else {
            $(alertContentHolderElem).find('.oar-content-row').removeClass('ff-loading');
            alertErrorMessage(alertContentHolderElem,'Something went wrong while creating a new alert from existing one. Please try again');
               console.log('remoteDuplicateAlertTemplateInfoJS response is not valid');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while saving alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while saving alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
function remoteDuplicateAlertTemplateInfoJS(alertContentHolderElem,alertTemplateRecId)
{
        
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteDuplicateAlertTemplateInfo)}',alertTemplateRecId,
  function(result, event) {
      if (event.status) {
                
                
          if (result != null && result.IsValid) {
             
           saveAlertTemplateInfoCallback(alertContentHolderElem,true);
           
          } else {
            $(alertContentHolderElem).find('.oar-content-row').removeClass('ff-loading');
            alertErrorMessage(alertContentHolderElem,'Something went wrong while creating a new email template from existing one. Please try again');
          }

      } else if (event.type === 'exception') {
          showErrorMessage('An exception occured while saving alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      } else {
          showErrorMessage('Some unknown error occured while saving alert template information. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
      }
  }, {
      escape: false
  });
}
 
function populateFormCanvas(result)
{

    <apex:outputText rendered="{!if(isFreemium ,true,false)}">
            resetEditorFreemiumNotificationJS(true);
    </apex:outputText>
    var pageInfoJSONarr=[];
    var  fieldsXml=getPrefixedOrgFieldName(SFOrgPrefix,'Fields_xml__c'); 
    var  pageOrder=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Order__c');
    var  pageTitle=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Title__c');
    var  isHidden=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Hidden__c');
    for(resultIndx=0;resultIndx<result.length;resultIndx++)
    {
        var formPage=  result[resultIndx].ResultSObject;
        var decodedXML = $('<div/>').html(formPage[fieldsXml]).text();
        decodedXML=decodedXML.replace(/'/g,"\'");
        var ispagehidden=getSafeBoolean(formPage[isHidden],false);
        pageInfoJSONarr.push(createJSONPageObj(formPage["Id"],formPage["Name"],formPage[pageTitle],formPage[pageOrder],decodedXML,'',ispagehidden ));
    }
    console.log(' Page Info ready');
    var totalpages=pageInfoJSONarr.length;
    $.each(pageInfoJSONarr, function (index, pageitem) {
        if (pageitem['pXML'] != null) {
            var pageOrder=index;
            pageOrder++;
            if(index>0){
                $('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner').append($('#pageAddNewTEMP').html());
            }
            var addsection=false;
            if(totalpages==1 && (pageitem['pXML']=='' || pageitem['pXML'].indexOf('<sectionList></sectionList>')>0))
            {
                addsection=true;
            }
            var pageElemDiv= getFFPage(addsection);

            populateMultiPageHtml(pageElemDiv,pageitem);      
                                                            
        }
    });
                           
    addLastNewPageElement();
    makeSectionsSortable();
    makePagesSortable();
    makeMultiPageFormSortable(false,true,true);
    resetMultiPageSortable(false,true,true);
                      
    $('.form-canvas-block-Loading').fadeOut();
    resetPageDeleteOption();

    expandFirstPage();
    if(isHTMLImportTriggered)
    {
        isChangesMadeInForm=true;
    }
}

function populateMultiPageHtml(pageElemDiv, pageItem) {
    
    var xmlDocElement=getXmlElementFromStr(pageItem["pXML"]);
    var pageElements = xmlDocElement.getElementsByTagName("ffPage");

    var pagename = pageItem["pTitle"];
    var pagenameHTML=unescapeHTMLString(pagename);
    var pageorder = safeStringValue(pageItem["pOrder"],'');
    var pageid = safeStringValue(pageItem["pId"],'');
    var pageishidden = getSafeBoolean(pageItem["pHidden"],false);
    $(pageElemDiv).find('.ff-page-header-box .page-tag-number').html(pageorder);
    $(pageElemDiv).attr('data-pageid',pageid); 
    $(pageElemDiv).attr('data-ishidden',pageishidden);
    if(isNullOrEmpty(pagename))
    {
        pagename='New Page Title';
    }
    $(pageElemDiv).find('>ul.formPageUl>li .ff-page-header').html(pagenameHTML);
    var pagelabelid=safePageLabel(safeStringValue(pageItem["pFormPageId"],''));
    if (!isNullOrEmpty(pagelabelid)) {
        $(pageElemDiv).find('.ff-page-header').attr('id', pagelabelid);
    }
            
            
    $.each(pageElements, function (pageIndx, pageElement) {


        if (pageElement.childNodes.length > 0) {


            //var pageishidden = firstElementByTagName(pageElement, "isHidden", true);
            var sectionlistElem = firstElementByTagName(pageElement, "sectionList", false);
            $.each(sectionlistElem.getElementsByTagName("OSection"), function (sectionIndex, sectionElement) {
                var sectionElemDiv = $('<div/>').addClass('ff-section-item');
                sectionElemDiv.append($('#pageNewSectionTEMP').html());

                var sectionname = firstElementByTagName(sectionElement, "name", true);
                var sectionnameHTML=unescapeHTMLString(sectionname);
                var sectionorder = firstElementByTagName(sectionElement, "sectionOrder", true);
                var sectionid = firstElementByTagName(sectionElement, "sectionId", true);
                var sectionishidden = firstBooleanElementByTagName(sectionElement, "isHidden", false);
                var sectionRepeat = firstBooleanElementByTagName(sectionElement, "repeat", false);
                var sectionCounter =  safeSectionCounter(sectionid);//sectionid.replace(/sectionFFLabel/g, '');
                sectionElemDiv.find('label.ff-section-header').attr('id', 'sectionLabel' + sectionCounter);
                sectionElemDiv.find('>ul>li .deleteField').attr('id', 'deletedField' + sectionCounter);
                sectionElemDiv.find('>ul>li .deleteField').attr('onclick', 'deleteSection(this,true);');
                sectionElemDiv.find('>ul>li.sectionLi').attr('id', 'sortableForSectionLabelli' + sectionCounter);
                sectionElemDiv.find('>ul.formSectionUl').attr('id', 'labelSectionformUl' + sectionCounter);
                sectionElemDiv.attr('data-ishidden',sectionishidden);
                sectionElemDiv.find('label.ff-section-header').html(sectionnameHTML);

                sectionElemDiv.find('>ul.formSectionUl').removeClass('hideFullSection');
                var setRepeatSectionInfo=false;
                if (sectionishidden) {
                    sectionElemDiv.find('>ul.formSectionUl').addClass('hideFullSection');
                    sectionElemDiv.find('>ul.formSectionUl').attr('data-ishidden',true);
                }
                else{
                    sectionElemDiv.find('>ul.formSectionUl').attr('data-ishidden',false);
                }
                if(sectionRepeat){
                    setRepeatSectionInfo=true;
                   
                    var sectionUlElemDiv=sectionElemDiv.find('>ul.formSectionUl');
                    $(sectionUlElemDiv).addClass('section-repeat');
                    $(sectionUlElemDiv).attr('data-add-link',firstElementByTagName(sectionElement, "addLink",true));
                    $(sectionUlElemDiv).attr('data-remove-link',firstElementByTagName(sectionElement, "removeLink",true));
                    $(sectionUlElemDiv).attr('data-min-count',firstElementByTagName(sectionElement, "minCount",true));
                    $(sectionUlElemDiv).attr('data-max-count',firstElementByTagName(sectionElement, "maxCount",true));
                    resetRepeatableSectionFooter(sectionUlElemDiv);
                }




                var fieldlistElem = firstElementByTagName(sectionElement, "fieldList", false);
                $.each(fieldlistElem.getElementsByTagName("OField"), function (fieldIndex, fieldElement) {
                    var lockhtmlDiv=$('<div />');
                    var lockhtml='';
                    var islockenabled=false;
                    var fieldAttrType = '';
                    if (!isNullOrEmpty(fieldElement.getAttribute('type'))) {
                        fieldAttrType = fieldElement.getAttribute('type');
                    }

                    var fieldLiElemDiv = $('<li/>').addClass('fieldLi');
                    var elemId = firstElementByTagName(fieldElement, "elemId", true);
                    var elemIdWOdot = elemId.replace(/\./g, '');

                    var labelElemDiv = $('<div/>', { 'class': 'labelDiv' }); 
                    var fieldElemDiv = $('<div/>', { 'class': 'fieldDiv' }); 
                    var editDelElemDiv = $('<div/>', { 'class': 'editDelDiv' }); 
                    var imgEditDiv = $('<div/>', { 'class': 'editImg' }); 
                    var imgDelDiv = $('<div/>', { 'class': 'deleteField' }); 
                    var controltype = firstElementByTagName(fieldElement, "controlType", true);
                    var objecttype = firstElementByTagName(fieldElement, "objectType", true);
                    var objectname = firstElementByTagName(fieldElement, "objectName", true);
                    var labeltext = firstElementByTagName(fieldElement, "label", true);
                    var labelHTML=unescapeHTMLString(labeltext);
                    var fieldtype = firstElementByTagName(fieldElement, "type", true);
                    var isfieldhidden = firstBooleanElementByTagName(fieldElement, "hiddenField", false);
                    var labelclass='ff-label';
                    if(isfieldhidden)
                    {
                        labelclass='ff-label grayLabel';
                    }

                    fieldLiElemDiv.attr('id', 'lblli' + elemIdWOdot);
                    fieldLiElemDiv.attr( 'data-otype' , fieldAttrType);
                    
                     

                    var addSField = false;
                    var generalFields = ['generaltext', 'esignature', 'payment', 'fileupload', 'image', 'captcha'];

                    /*field parsing starts*/
                    if (controltype.toLowerCase() != '' && $.inArray(controltype.toLowerCase(), generalFields) < 0) {
                        /*Salesforce object fields*/
                        
                        var vatttype = firstElementByTagName(fieldElement, "vatt", true);
                        var colorcode = firstElementByTagName(fieldElement, "colorCode", true);
                        if(!isNullOrEmpty(colorcode)){
                            colorcode=colorcode.trim();
                            if(setRepeatSectionInfo){
                                var sortableClass=firstElementByTagName(fieldElement, "sortableObject", true); 
                                sectionElemDiv.find('>ul.formSectionUl').attr('data-childclass',colorcode);
                                sectionElemDiv.find('>ul.formSectionUl').attr('data-sortableclass',sortableClass);
                                setRepeatSectionInfo=false;
                            }
                        }
                        fieldLiElemDiv.addClass(colorcode);
                        var sortableobject = firstElementByTagName(fieldElement, "sortableObject", true);
                        fieldLiElemDiv.addClass(sortableobject);
                        fieldLiElemDiv.attr('title', labelHTML + ' (' + firstCharCap(fieldtype) + ')');
                        labelElemDiv.attr('id', 'divLabel' + elemIdWOdot);
                      
                        labelElemDiv.attr('lblname', firstElementByTagName(fieldElement, "label", true));
                        
                        var fieldapiname=getSFieldName(elemId);
                        var labelElem = $('<label />', { 'vatt': vatttype ,'class':labelclass, id:'lbl' + fieldapiname,'html': labelHTML,'data-apiname':fieldapiname });
                        
                        labelElemDiv.html(labelElem);
                     

                        var fieldrequiredmessage = firstElementByTagName(fieldElement, "requiredMessage", true);
                        if (isNullOrEmpty(fieldrequiredmessage)) {
                            fieldrequiredmessage = 'required';
                        }
                        var isfieldupsert = firstBooleanElementByTagName(fieldElement, "upsert", false);
                        var isfieldreadonly = firstBooleanElementByTagName(fieldElement, "readOnly", false);
                        
                        var isdefaultreq = firstBooleanElementByTagName(fieldElement, "isDefaultReq", false);
                        var isuserreq = firstBooleanElementByTagName(fieldElement, "isUserReq", false);

                        if(!isNullOrEmpty(objectname) &&  $.inArray(objectname, validObjects())<0){
                            islockenabled=true;
                            lockHtml=getFreemiumHTML('Only Case, Account, Contact and Lead fields are','freemium-edit-block','');
                        }
                        if(objecttype.toLowerCase()!='primary' )
                        {
                            islockenabled=true;
                            lockHtml=getFreemiumHTML('Related object fields are','freemium-edit-block','');
                        }

                        switch (controltype.toLowerCase()) {
                            /// create LOOKUP elements
                            case 'lookupinput':

                                if(fieldtype=="LOOKUP")
                                {
                                    fieldLiElemDiv.attr('title', labeltext + ' (Lookup)');
                                }
                                else{
                                    fieldLiElemDiv.attr('title', labeltext);
                                }
                                islockenabled=true;
                                lockHtml=getFreemiumHTML('Reference fields are','freemium-edit-block','');
                                var listviewid = firstElementByTagName(fieldElement, "listViewId", true);
                                var listviewobject = firstElementByTagName(fieldElement, "listViewObject", true);
                                var defaultvalueid = firstElementByTagName(fieldElement, "defaultValueId", true);
                                var placeholdertext = firstElementByTagName(fieldElement, "placeholder", true);
                                var defaultvalue = firstElementByTagName(fieldElement, "defaultValue", true);
                                var vaobj = firstElementByTagName(fieldElement, "vaObj", true);
                                var rtypeobj = firstElementByTagName(fieldElement, "rtypeObj", true);
                                var spanLookupElem = $('<span />', { 'class': 'lookupInput' });
                                var inputHiddenElem = $('<input />', { 'type': 'hidden', 'id': elemId + 'hidden', 'vatt': 'REFERENCE' });
                                var inputElem = $('<input />', { 'type': 'textbox', 'id': elemId + '','placeholder':placeholdertext,'name': elemId + '', 'class': 'ff-input-type ff-type-text', 'vatt': 'REFERENCE', 'value': defaultvalue,'data-lobj':vaobj,'data-robj':rtypeobj });
                                updateElementProp(inputHiddenElem, 'data-vaobj', listviewobject, false);
                                updateElementProp(inputHiddenElem, 'data-lookup-value', listviewid, false);
                                if (!isNullOrEmpty(listviewid)) {
                                    updateElementProp(inputHiddenElem, 'data-lookup-value-type', 'list', true);
                                }
                                updateElementProp(inputHiddenElem, 'value', defaultvalueid, false);
                                var aLookupElem = $('<a />',{'onclick':'openLookupRefPopup(this,\''+vaobj+'\',\''+rtypeobj+'\');','id':elemId + '_lkwgt'});
                                var imgElem = $('<img />',{src:'/s.gif', 'class':'lookupIcon'});
                                aLookupElem.append(imgElem);
                                spanLookupElem.append(inputHiddenElem);
                                spanLookupElem.append(inputElem);
                                spanLookupElem.append(aLookupElem);
                                fieldElemDiv.html(spanLookupElem);
                                addSField = true;
                                break;
                                /// create TEXTBOX elements
                            case 'textbox':
                            
                                if (vatttype == 'STRING') {
                                    fieldLiElemDiv.attr('title', labeltext + ' (Textbox)');
                                }

                                var fieldmaxlength = firstElementByTagName(fieldElement, "maxLength", true);
                                var fieldmaxlengthmessage = firstElementByTagName(fieldElement, "maxLengthMessage", true);
                                var placeholdertext = firstElementByTagName(fieldElement, "placeholder", true);

                                var inputElem = $('<input />', { 'type': 'textbox', 'id': elemId + '','placeholder':placeholdertext,'name': elemId + '', 'vatt': vatttype, 'class': 'ff-input-type ff-type-text', 'data-maxlengthmessage': fieldmaxlengthmessage, 'maxlength': fieldmaxlength });

                                var inputdefaultvalue = firstElementByTagName(fieldElement, "defaultValue", true);
                                inputElem.val(inputdefaultvalue);
                                inputElem.attr('value',inputdefaultvalue);

                                if (vatttype.indexOf('CURRENCY') >= 0) {
                                    inputElem.attr('data-formatmessage', 'Please enter a valid currency value');
                                    var currencylbl = firstElementByTagName(fieldElement, "currencyLabel", true);
                                    inputElem.attr('data-currencylabel', currencylbl);
                                }
                                else if (vatttype.indexOf('PERCENT')>=0) {
                                
                                    inputElem.attr('data-formatmessage', 'Please enter a valid percentage');
                                    
                                    inputElem.attr('data-percentlabel', '%');
                                }
                                else if (fieldtype == 'NUMERIC') {

                                    var dataflexmin = firstElementByTagName(fieldElement, "data_flex_min", true);
                                    var dataflexmax = firstElementByTagName(fieldElement, "data_flex_max", true);
                                    var dataflexminlabel = firstElementByTagName(fieldElement, "data_flex_minlabel", true);
                                    var dataflexmaxlabel = firstElementByTagName(fieldElement, "data_flex_maxlabel", true);

                                    var flexcontroltype = firstElementByTagName(fieldElement, "flexControlType", true);
                                    inputElem.attr('data-flexcontrol', flexcontroltype);
                                    if (flexcontroltype == 'integer-npsrating') {
                                        var dataflexmiddle = firstElementByTagName(fieldElement, "data_flex_middle", true);
                                        var dataflexmiddlelabel = firstElementByTagName(fieldElement, "data_flex_middlelabel", true);
                                        inputElem.attr('data-flex-min', dataflexmin);
                                        inputElem.attr('data-flex-max', dataflexmax);
                                        inputElem.attr('data-flex-middle', dataflexmiddle);
                                        inputElem.attr('data-flex-minlabel', dataflexminlabel);
                                        inputElem.attr('data-flex-maxlabel', dataflexmaxlabel);
                                        inputElem.attr('data-flex-middlelabel', dataflexmiddlelabel);
                                    }
                                    else if (flexcontroltype == 'integer-starrating') {
                                        inputElem.attr('data-flex-min', dataflexmin);
                                        inputElem.attr('data-flex-max', dataflexmax);
                                        inputElem.attr('data-flex-minlabel', dataflexminlabel);
                                        inputElem.attr('data-flex-maxlabel', dataflexmaxlabel);
                                    }

                                }
                                fieldElemDiv.html(inputElem);
                                addSField = true;
                                break;
                                /// create TEXTAREA elements
                            case 'textarea':
                             
                                var fieldmaxlength = firstElementByTagName(fieldElement, "maxLength", true);
                                var fieldmaxlengthmessage = firstElementByTagName(fieldElement, "maxLengthMessage", true);
                                var placeholdertext = firstElementByTagName(fieldElement, "placeholder", true);
                                var inputElem = $('<textarea />', { 'id': elemId + '','placeholder':placeholdertext,'name': elemId + '', 'vatt': vatttype, 'class': 'ff-textarea', 'data-maxlengthmessage': fieldmaxlengthmessage, 'maxlength': fieldmaxlength });
                                var inputdefaultvalue = firstElementByTagName(fieldElement, "defaultValue", true);
                                inputElem.val(inputdefaultvalue);
                                inputElem.attr('value',inputdefaultvalue);
                                inputElem.text(inputdefaultvalue);

                                console.log(' TEXTAREA value'+inputdefaultvalue+' Eleme value-'+inputElem.val());
                                fieldElemDiv.html(inputElem);
                                addSField = true;
                                break;

                                /// create BOOLEAN elements
                            case 'checkbox':
                                var inputElem = $('<input />', { 'type': 'checkbox', 'id': elemId + '','name': elemId + '', 'vatt': vatttype, 'class': 'ff-checkbox' });
                                var labelForElem = $('<label />', { 'for': elemId + '', 'vatt': vatttype, 'class': 'css-label' });
                                var inputdefaultvalue = firstBooleanElementByTagName(fieldElement, "defaultValue", false);
                                if (inputdefaultvalue) {
                                    inputElem.prop('checked', true);
                                    inputElem.attr("checked",true);
                                }
                                else {
                                    inputElem.prop('checked', false);
                                    inputElem.removeAttr("checked");
                                }

                                fieldElemDiv.html(inputElem);
                                fieldElemDiv.append(labelForElem);
                                addSField = true;
                                break;

                                /// create SINGLEPICKLIST elements
                            case 'select-one':
                                var selectcontroltype = firstElementByTagName(fieldElement, "flexControlType", true);
                                var isDataSetCustom = firstElementByTagName(fieldElement, "dtCustom", false);
                                var selectElem = $('<select />', { 'name': elemId, 'id': elemId + '', 'vatt': vatttype, 'class': 'ff-select-type ff-singlepicklist', 'data-flexcontrol': selectcontroltype });
                                var selectDataSetWrapper=$('<div/>',{'class':'selectDataSet display-none'});
                                if(isDataSetCustom){ $(selectElem).attr('data-customset',true);
                                    $(selectDataSetWrapper).html($(selectElem).clone().wrap('<p>').parent().html());
                                    $(selectDataSetWrapper).find('select').attr('id','vadataset__'+elemId);
                                    $(selectDataSetWrapper).find('select').removeAttr('class');
                                }
                                var picklistValuesElem = firstElementByTagName(fieldElement, "picklistValues", false);

                                $.each(picklistValuesElem.getElementsByTagName("picklistValue"), function (index, picklistValueElem) {
                                    var optionValue = picklistValueElem.getAttribute('value');
                                    optionValue= unescapeHTMLString(optionValue);
                                    var isCustom=   getSafeBoolean(picklistValueElem.getAttribute('custom'),false);
                                    var isDisabled=   getSafeBoolean(picklistValueElem.getAttribute('ignore'),false);
                                    var isSelected=   getSafeBoolean(picklistValueElem.getAttribute('selected'),false);
                                    if (isSelected) {
                                        if (!isDisabled) {
                                            $("<option />", { value: optionValue, text: optionValue, 'selected': 'true','data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo(selectElem);
                                        }$("<option />", { value: optionValue, text: optionValue, 'selected': 'true','data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo($(selectDataSetWrapper).find('select'));
                                    }
                                    else {
                                        if (!isDisabled) {
                                            $("<option />", { value: optionValue, text: optionValue,'data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo(selectElem);
                                        }$("<option />", { value: optionValue, text: optionValue,'data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo($(selectDataSetWrapper).find('select'));
                                    }

                                });
                                fieldElemDiv.html(selectElem);
                                if(isDataSetCustom){
                                    fieldElemDiv.append(selectDataSetWrapper);
                                }
                                addSField = true;
                                break;

                                /// create MULTIPICKLIST elements
                            case 'select-multi':
                                var selectcontroltype = firstElementByTagName(fieldElement, "flexControlType", true);
                                var isDataSetCustom = firstElementByTagName(fieldElement, "dtCustom", false);
                                var selectElem = $('<select  />', { 'name': elemId, 'id': elemId + '', 'vatt': vatttype, 'class': 'ff-select-type ff-multipicklist', 'data-flexcontrol': selectcontroltype, 'multiple': 'multiple' });
                                var selectDataSetWrapper=$('<div/>',{'class':'selectDataSet display-none'});
                                if(isDataSetCustom){ $(selectElem).attr('data-customset',true);
                                    $(selectDataSetWrapper).html($(selectElem).clone().wrap('<p>').parent().html());
                                    $(selectDataSetWrapper).find('select').attr('id','vadataset__'+elemId);
                                    $(selectDataSetWrapper).find('select').removeAttr('class');
                                }
                                var picklistValuesElem = firstElementByTagName(fieldElement, "picklistValues", false);
                                $.each(picklistValuesElem.getElementsByTagName("picklistValue"), function (index, picklistValueElem) {
                                    var optionValue = picklistValueElem.getAttribute('value');
                                    optionValue= unescapeHTMLString(optionValue);
                                    var isCustom=   getSafeBoolean(picklistValueElem.getAttribute('custom'),false);
                                    var isDisabled=   getSafeBoolean(picklistValueElem.getAttribute('ignore'),false);
                                    var isSelected=   getSafeBoolean(picklistValueElem.getAttribute('selected'),false);
                                    if (isSelected) {
                                        if (!isDisabled) {
                                            $("<option />", { value: optionValue, text: optionValue, 'selected': 'true','data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo(selectElem);
                                        }
                                        $("<option />", { value: optionValue, text: optionValue, 'selected': 'true','data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo($(selectDataSetWrapper).find('select'));
                                    }
                                    else {
                                        if (!isDisabled) {
                                            $("<option />", { value: optionValue, text: optionValue,'data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo(selectElem);
                                        }$("<option />", { value: optionValue, text: optionValue,'data-disabled':isDisabled,'data-iscustom':isCustom }).appendTo($(selectDataSetWrapper).find('select'));
                                    }
                                  

                                });
                                fieldElemDiv.html(selectElem);
                                if(isDataSetCustom){
                                    fieldElemDiv.append(selectDataSetWrapper);
                                }
                                addSField = true;
                                break;
                            default:
                        }
                        if (addSField) {



                            labelElemDiv.find('.ff-label').attr('ondblclick','editFFLabel(this);'); 
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-requiredmessage', fieldrequiredmessage);
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-isdefaultreq', isdefaultreq);
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-isuserreq', isuserreq);
                            if(isdefaultreq || isuserreq){
                                fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-isrequired', true);
                                labelElemDiv.append($('<span/>',{'class':'ff-required-mark','html':'*'}));
                            }
                             
                            addObjectInfoOnLabel(labelElemDiv,sortableobject,colorcode);
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-isupsert', isfieldupsert);
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-ishidden', isfieldhidden);
                            fieldElemDiv.find('select,input,textarea').not(':input[type=hidden]').attr('data-isreadonly', isfieldreadonly);

                            fieldLiElemDiv.html(labelElemDiv);
                            fieldLiElemDiv.append(fieldElemDiv);
                            imgEditDiv.attr('onclick', "openEditDialog(this,true);");
                            
                            <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                                             if(islockenabled)
                            {
                                console.log('LOCKHTML--'+lockHtml);
                                lockhtmlDiv.html(lockHtml);
                                editDelElemDiv.addClass('fm-enabled');
                                editDelElemDiv.html(lockhtmlDiv);                                                 
                            }
                        else
                        {
                              editDelElemDiv.html(imgEditDiv);    
                        }
                        </apex:outputText>
                         <apex:outputText rendered="{!if(isFreemium ,false,true)}">
                              
                         editDelElemDiv.html(imgEditDiv);    
                             
                        </apex:outputText>
                        if(!isdefaultreq )
                        {
                            imgDelDiv.attr('onclick', "deleteField(this,true);");
                            editDelElemDiv.append(imgDelDiv);
                        }
                            
                            
                        fieldLiElemDiv.append(editDelElemDiv);
                        sectionElemDiv.find('ul.formFieldUl').append(fieldLiElemDiv);
                    }
                }
                else if (controltype.toLowerCase() != '') {
                    var addGenField = false;
                    var isPaymentField = false;
                    var onlyLabelDiv = false;
                    fieldLiElemDiv.addClass('generalSortableForFields');
                    imgEditDiv.attr('onclick', "openEditDialog(this,true);");
                    imgDelDiv.attr('onclick', "deleteField(this,true);");
                    var isfieldhidden = firstBooleanElementByTagName(fieldElement, "hiddenField", false);
                    /*general fields*/
                    switch (controltype.toLowerCase()) {
                        /// create GENERALTEXT elements
                        case 'generaltext':
                            fieldLiElemDiv.attr('title', 'Text');
                            labelElemDiv.attr('id', 'divLabel' + elemId);
                            var labelElem = $('<label />', { 'id': 'lbl'+elemId, 'lblname': 'text', 'class': 'ff-label ff-general-text-label', 'html': labelHTML ,'data-ishidden':isfieldhidden});
                            if(isfieldhidden){
                                labelElem.addClass('grayLabel');
                            }
                            labelElemDiv.html(labelElem);
                            imgEditDiv.attr('onclick', "openEditDialog(this,true);");
                            imgDelDiv.attr('onclick', "deleteField(this,true);");
                            addGenField = true;

                            break;

                            /// create ESIGNATURE elements
                        case 'esignature':
                            islockenabled=true;
                            lockHtml=getFreemiumHTML('Signature fields are','freemium-edit-block','lines-3');
                            fieldLiElemDiv.attr('title', 'Signature');
                            labelElemDiv.attr('id', 'divLabel' + elemId);
                            labelElemDiv.hide();
                            fieldElemDiv.attr('class', 'eSignatureFieldDiv');
                            fieldElemDiv.attr('id', 'field' + elemId);
                            var signtype = firstElementByTagName(fieldElement, "signType", true);
                            var signoptions = firstElementByTagName(fieldElement, "signOptions", true);
                            var signlabel = firstElementByTagName(fieldElement, "signLabel", true);
                            var signdate = firstElementByTagName(fieldElement, "signDate", true);
                            var signdatehide = firstElementByTagName(fieldElement, "isDateHidden", true);
                            var signagree = firstElementByTagName(fieldElement, "signAgreeText", true);
                            var signagreehide = firstElementByTagName(fieldElement, "isAgreeHidden", true);
                            var emailverifednabled=firstBooleanElementByTagName(fieldElement, "emailEnabled", false);
                            var emaillabel =safeStringValue( firstElementByTagName(fieldElement, "emailLabel", true),'Email');

                            var inputElem = $('<input />', { 'id': 'input' + elemId, 'type': 'hidden', 'lblname': 'Signature', 'class': 'ffd-esignature-input', 'data-signtype': signtype, 'data-signoptions': signoptions, 'data-signlabel': signlabel, 'data-signdate': signdate, 'data-signdatehide': signdatehide, 'data-signagree': signagree, 'data-signagreehide': signagreehide,'data-emailenabled':emailverifednabled,'data-emaillabel':emaillabel });

                            fieldElemDiv.html(inputElem);
                            var signatureComponentItem = $('#DocSignHTMLTemp').clone().html();
                            var signatureIndex = elemId.replace('ESIGNATURE', '');
                            //fieldElemDiv.html(inputElem);
                            fieldElemDiv.append(signatureComponentItem);
                            fieldElemDiv.find('.ffd-esignature-input').attr('id', 'input' + elemId);
                            fieldElemDiv.find('.ffd-esignature').show();
                            fieldElemDiv.find('.main-docsign-wrapper').attr('id', 'elem' + elemId);

                            assignSignatureElementIds(fieldElemDiv, signatureIndex);
                            imgEditDiv.attr('onclick', "openEditSignatureDialog(this,true);");
                            imgDelDiv.attr('onclick', "deleteSignatureField(this,true);");
                            addGenField = true;
                                
                            break;

                            /// create PAYMENT elements
                        case 'payment':
                            var istestmode = firstBooleanElementByTagName(fieldElement, "testMode", false);

                            var paymentTypeText=getOPaymentTypeVal(fieldAttrType,'PayPal Pro','PayPal Pro','iATS','Stripe','Authorize.Net');
                            var paymentTypePrefix=getOPaymentTypeVal(fieldAttrType,'PayPal','PayPal','IATS','Stripe','AuthorizeNet');
                            var paymentAccType=paymentTypeText.replace('.','');
                            islockenabled=true;
                            lockHtml=getFreemiumHTML('Payment fields are','freemium-edit-block','lines-3');
                            

                            fieldLiElemDiv.attr('title', '');
                            var tempPaymentIndex=safeLegacyPAYPALPAYMENT(elemId);
                            try{
                                tempPaymentIndex=tempPaymentIndex.substring(tempPaymentIndex.indexOf('PAYMENT')+7);
                            }catch(err){
                                tempPaymentIndex=tempPaymentIndex.replace('PAYPALPAYMENT','');
                                tempPaymentIndex=tempPaymentIndex.replace('IATSPAYMENT','');
                                tempPaymentIndex=tempPaymentIndex.replace('AUTHORIZENETPAYMENT','');
                                tempPaymentIndex=tempPaymentIndex.replace('STRIPEPAYMENT','');
                                tempPaymentIndex=tempPaymentIndex.replace('FASTFORMSPAYMENT','');
                            }
                              

                            var labelLiId='lblliFASTFORMSPAYMENT'+tempPaymentIndex;
                            fieldLiElemDiv.attr('id',labelLiId);
                                        
                                       
                            var paymentItem=$('<div/>').html($('#generalFieldBox').find('#lblliFASTFORMSPAYMENT').html());
                                        
                            if (istestmode) {
                                paymentItem.addClass('test-mode-active')
                            }
                            var originaldivId=paymentItem.find('.field-div-payment').attr('id');
                            paymentItem.find('.field-div-payment').attr('title',paymentTypeText+' payment');
                            var newPaymentDivid=originaldivId+tempPaymentIndex;
                            paymentItem.find('.field-div-payment').attr('id',newPaymentDivid);
                            $(paymentItem.find('.payment-item-row')).each(function(indx, ppitemrow) {
                                                                    
                                if(!$(ppitemrow).hasClass('pp-default-hide'))
                                {
                                    $(ppitemrow).show();
                                }
                                                                                    
                                if($(ppitemrow).hasClass('pp-expiry'))
                                {
                                                                        
                                    var ppexpirylblid=$(ppitemrow).find('.PPGeneralLabelDiv label').attr('id');
                                    ppexpirylblid.replace(i,'');
                                    $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id',ppexpirylblid+tempPaymentIndex);
                                    $($(ppitemrow).find('select')).each(function(index, ppitemrowselect) {
                                        var orginalselElemId=$(ppitemrowselect).attr('data-pp-name');
                                        // orginalselElemId=orginalselElemId.replace('FFPayment', paymentTypePrefix);
                                        $(ppitemrowselect).attr('data-pp-name',orginalselElemId);
                                        $(ppitemrowselect).attr('id',orginalselElemId+tempPaymentIndex);
                                        $(ppitemrowselect).attr('name',orginalselElemId+tempPaymentIndex);
                                    });
                                }
                                else
                                {
                                    var inputElem=$(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label');
                                    if($(inputElem).length>0){
                                                                       
                                        var originalElemId=$(inputElem).attr('id'); 
                                        //  originalElemId=originalElemId.replace('FFPayment', paymentTypePrefix);
                                        $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('id',originalElemId+tempPaymentIndex);
                                        $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('name',originalElemId+tempPaymentIndex);
                                        $(ppitemrow).find('.PPGeneralFieldDiv input,.PPGeneralFieldDiv label.ff-label').attr('data-pp-name',originalElemId);
                                        $(ppitemrow).find('.PPGeneralLabelDiv label').attr('id','lbl'+originalElemId+tempPaymentIndex);
                                    }
                                }
                            });
                            var paymentFieldRecId= firstElementByTagName(fieldElement, "paymentFieldId", true); 
                            if(paymentFieldRecId!==undefined && paymentFieldRecId!=='' )
                            {
                                resetPaymentField(paymentItem,fieldAttrType,true,true); 
                                paymentItem.find('.field-div-payment').attr('data-paymentfield-record-id',paymentFieldRecId);
                                                     
                            }
                            else
                            {
                                resetPaymentField(paymentItem,fieldAttrType,false,true); 
                            }
                            console.log('Payment field rec id '+paymentFieldRecId);
                                                     
                                             
                                                    

                            //tempLiHtml  += 
                            if(paymentFieldRecId!==undefined && paymentFieldRecId!=='' )
                            {

                                initializePaymentFieldsInfo(paymentFieldRecId,newPaymentDivid,paymentAccType);
                            }
                                                   
                                                     
                            imgEditDiv.attr('onclick', "openEditPaymentDialog(this);");
                            imgDelDiv.attr('onclick', "deletePaymentField(this,true);");
                            <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                                         if(islockenabled)
                            {
                                  
                                lockhtmlDiv.html(lockHtml);
                                editDelElemDiv.addClass('fm-enabled');
                                editDelElemDiv.html(lockhtmlDiv);                                                 
                            }
                        else
                        {
                              editDelElemDiv.html(imgEditDiv);    
                    }
                    </apex:outputText>
                     <apex:outputText rendered="{!if(isFreemium ,false,true)}">
                                  
                     editDelElemDiv.html(imgEditDiv);    
                                 
                    </apex:outputText>
                    editDelElemDiv.append(imgDelDiv);
                    paymentItem.find('.field-div-payment .editDelDiv').remove();
                    paymentItem.find('.field-div-payment').append(editDelElemDiv);
                    fieldLiElemDiv.append(paymentItem.html());
                    addGenField = true;
                    isPaymentField=true;
                    break;

                    /// create FILEUPLOAD elements
                        case 'fileupload':
                                 islockenabled=true;
                lockHtml=getFreemiumHTML('File Upload fields are','freemium-edit-block','lines-3');
                var fileIndxId=elemId.replace('FileUploadArea','');
                var isrequired = firstBooleanElementByTagName(fieldElement, "required", false);
                var uploadtochatter = firstBooleanElementByTagName(fieldElement, "uploadToChatter", false);
                var fieldrequiredmessage = firstElementByTagName(fieldElement, "requiredMessage", true);
                var allowedfiletypes = firstElementByTagName(fieldElement, "allowedFileTypes", true);
                var filename = firstElementByTagName(fieldElement, "fileName", true);
                var maxfiles = firstElementByTagName(fieldElement, "maxFiles", true);

                fieldLiElemDiv.attr('title', 'File Upload');
                labelElemDiv.attr('id', 'divLabel' + elemId);
                var labelElem = $('<label />', { 'id': 'lblFileUpload' + fileIndxId, 'lblname': 'File Upload', 'class': 'ff-label ff-fileupload-label', 'html': labelHTML });
                if(isfieldhidden){
                    labelElem.addClass('grayLabel');
                }
                labelElemDiv.html(labelElem);

                var fielUploadItem = $('#generalFieldBox #lblliFILEUPLOADAREA .fieldDiv').clone().html();
                if (isrequired)
                {  
                    $(labelElemDiv).find('.ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));
                }
                fieldElemDiv.append(fielUploadItem);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-requiredmessage', fieldrequiredmessage);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-isrequired', isrequired);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-ishidden', isfieldhidden);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-filename', filename);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-maxfiles', maxfiles);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-allowedfiletypes', allowedfiletypes);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('data-uploadtochatter', uploadtochatter);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('id', 'FileUploadArea' + fileIndxId);
                fieldElemDiv.find('.ff-fileupload-drop-area').attr('name', 'FileUploadArea' + fileIndxId);
                fieldElemDiv.find('.ff-fileupload-drop-area label').attr('id', 'lblFileUpload' + fileIndxId+'_Select');
                                 
                fieldElemDiv.find('.ff-fileupload-drop-area label').attr('name', 'FileUpload' + fileIndxId+ '_Select');
                fieldElemDiv.find('.ff-fileupload-drop-area label').attr('for', 'FileUpload' + fileIndxId);
                fieldElemDiv.find('.ff-fileupload-drop-area input').attr('id', 'FileUpload' + fileIndxId);
                fieldElemDiv.find('.ff-fileupload-drop-area input').attr('name', 'FileUpload' + fileIndxId);


                addGenField = true;
                break;

                /// create IMAGE elements
                            case 'image':
                                fieldLiElemDiv.attr('title', 'Image');
            var fieldLiId=elemId.replace('img','');
            fieldLiElemDiv.attr('id', 'lblli'+fieldLiId);
            labelElemDiv.attr('id', 'divLabel' + elemId);
            var labelElem = $('<label />', { 'id': 'lbl' + elemId, 'lblname': 'Image', 'class': 'ff-label ff-image-label','data-ishidden':isfieldhidden });
            if(isfieldhidden){
                labelElem.addClass('grayLabel');
            }
            labelElemDiv.html(labelElem);

            var imageComponentItem = $('#generalFieldBox .imageGeneralFieldDiv').clone().html();
            $ImageComponentWrapper = $('<div />', { 'class': 'imageGeneralFieldDiv', 'id': 'imageField' + elemId });
            $ImageComponentWrapper.append(imageComponentItem);
            var imgSrc = firstElementByTagName(fieldElement, "imgSrc", true);
            labelElemDiv.append($ImageComponentWrapper);
            if (!isNullOrEmpty(imgSrc)) {
                labelElemDiv.find('.ffse-img-input-container-editor').hide();
                var imgwidth = firstElementByTagName(fieldElement, "imgWidth", true);
                var imgHeight = firstElementByTagName(fieldElement, "imgHeight", true);
                var imgAlignment = firstElementByTagName(fieldElement, "alignment", true);
                var imgAltTag = firstElementByTagName(fieldElement, "alt", true);
                if (!isNullOrEmpty(imgAlignment)) {
                    labelElemDiv.find('.imageGeneralFieldDiv').attr('style', 'text-align:' + imgAlignment);
                }
                labelElemDiv.find('.ffse-img-upload-placeholder-editor').show();

                var imagElem = $('<img />', { 'id': elemId });
                labelElemDiv.find('.ffse-img-upload-placeholder-editor').html(imagElem);
                labelElemDiv.find('.ffse-img-upload-placeholder-editor img').attr('width', imgwidth);
                labelElemDiv.find('.ffse-img-upload-placeholder-editor img').attr('height', imgHeight);
                labelElemDiv.find('.ffse-img-upload-placeholder-editor img').attr('alt', imgAltTag);
                labelElemDiv.find('.ffse-img-upload-placeholder-editor img').attr('src', htmlUnescape(htmlUnescape(imgSrc)));
            }
            else {
                labelElemDiv.find('.ffse-img-upload-placeholder-editor').hide();
                labelElemDiv.find('.ffse-img-input-container-editor').show();
            }
            addGenField = true;
            onlyLabelDiv = true;
            break;

            /// create CAPTCHA elements
                            case 'captcha':
                            fieldLiElemDiv.attr('title', 'Captcha');
        labelElemDiv.attr('id', 'divLabel' + elemId);
        var labelElem = $('<label />', { 'id': elemId, 'lblname': 'Captcha', 'class': 'ff-label ff-captcha-label', 'html': labelHTML });
        if(isfieldhidden){
            labelElem.addClass('grayLabel');
        }
        labelElemDiv.html(labelElem);
        var imgElem=$('<img/>',{'src':'https://fastforms.visualantidote.com/Images/captcha.png'});
        <apex:outputText rendered="{!IsNative}">
                                 
         imgElem=$('<img/>',{'src':'http://visualantidote.com/App_Themes/visualantidote/images/reCaptcha.png'});
        </apex:outputText>
                               
        var isreq = firstBooleanElementByTagName(fieldElement, "required", true); 
                                
        if (isreq)
        {  
            $(labelElemDiv).find('.ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));
        }
        var inputElem = $('<input />', { 'type': 'textbox', 'id': elemId + '','name': elemId + '', 'vatt': fieldtype, 'class': 'ff-input-type ff-type-text ff-type-captcha', 'data-maxlengthmessage': 'Maximum 50 characters', 'maxlength': '50','data-isrequired':isreq ,'data-ishidden':isfieldhidden});
        fieldElemDiv.html(imgElem);
        fieldElemDiv.append('<br/>');
        <apex:outputText rendered="{!IsNative}">
       inputElem.addClass('display-none');
        </apex:outputText>
        fieldElemDiv.append(inputElem);
        imgEditDiv.attr('onclick', "openEditDialog(this,true);");
        imgDelDiv.attr('onclick', "deleteField(this,true);");
        addGenField = true;
        break;

                            default:
    }
if (addGenField) {
    if(!isPaymentField)
    {
        if(labelElemDiv.find('.ff-label').length>0){
            labelElemDiv.find('.ff-label').attr('ondblclick','editFFLabel(this);');
        }
        fieldLiElemDiv.html(labelElemDiv);
        if (!onlyLabelDiv) {
            fieldLiElemDiv.append(fieldElemDiv);
        }
        <apex:outputText rendered="{!if(isFreemium ,true,false)}">
                         if(islockenabled)
        {
                              
            lockhtmlDiv.html(lockHtml);
            editDelElemDiv.addClass('fm-enabled');
            editDelElemDiv.html(lockhtmlDiv);                                                 
        }
    else
    {
          editDelElemDiv.html(imgEditDiv);    
    }
    </apex:outputText>
     <apex:outputText rendered="{!if(isFreemium ,false,true)}">
                              
     editDelElemDiv.html(imgEditDiv);    
                             
    </apex:outputText>
    editDelElemDiv.append(imgDelDiv);
    fieldLiElemDiv.append(editDelElemDiv);
}
sectionElemDiv.find('ul.formFieldUl').append(fieldLiElemDiv);
}
}


/*field parsing ends*/




});
pageElemDiv.find('.formSectionUlWrap').append(sectionElemDiv.html());

});
}
});

$('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner').append(pageElemDiv);
initializeESignatureElements();
resetFlexInputElements();
    
resetSelect2FormElements();
}
function remoteGetFormFinalHTMLJS()
{
    /*String formXML,String pageTitle,Integer pageOrder,String recordid*/
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteGetFormFinalHTML)}',ffrecordid,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result.IsValid && !isNullOrEmpty(result.ResultText) && result.ResultText!='null')
               {
                   var decoded = $('<div/>').html(result.ResultText).text();
                   var formHtml = decompressText(decoded);
                   ParsedXMLFromService(formHtml);
                          
               }
               else if(result.ResultText=='No record found')
               {
                   console.log(' Fail-'+result.ResultText);
               }
               else if(result.ResultText=='' || result.ResultText=='null')
               {
                   var submitOptions='<btnMessage>Thank you for your submission!</btnMessage><btnText>Send</btnText><btnUrl/><notificationEmails/><sendNotificationEmail>false</sendNotificationEmail>';
                   var redirectEnabled=false;

                   remoteSetFormXMLJS('Page Title',1,'','');
                   callToSubmitInfo(redirectEnabled,submitOptions);
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
                 
             

function callToSubmitInfo(redirectEnabled,submitOptions)
{
    var formoptions='<formOptions>'
    formoptions+='<submitInfo>';
                              
    formoptions+=submitOptions;
                              
                               
    if(redirectEnabled)
    {
        formoptions+='<redirectEnabled>true</redirectEnabled>';
    }
    else
    {
        formoptions+='<redirectEnabled>false</redirectEnabled>';
    }
    formoptions+='</submitInfo>';
    formoptions+='<multiPageInfo>';
    if($('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner').find('.fc-multi-page-item').length > 1)
    {
        formoptions+='<multiPageEnabled>true</multiPageEnabled>';
    }
    else{
        formoptions+='<multiPageEnabled>false</multiPageEnabled>';
    }
    formoptions+='<breadcrumbEnabled></breadcrumbEnabled>';
    formoptions+='<breadcrumbPrefixEnabled></breadcrumbPrefixEnabled>';
    formoptions+='<breadcrumbPrefix></breadcrumbPrefix>';
    formoptions+='<breadcrumbNumbered></breadcrumbNumbered>';
    formoptions+='<pageValidationType></pageValidationType>';
    formoptions+='<isFooterCustomized>false</isFooterCustomized>';
    formoptions+='<prevBtnText>Back</prevBtnText>';
    formoptions+='<nextBtnText>Next</nextBtnText>';
    formoptions+='</multiPageInfo>';
    formoptions+='<saveForLaterInfo>';
    formoptions+='<saveForLaterEnabled>false</saveForLaterEnabled>';
    formoptions+='<saveBtnText>Save</saveBtnText>';
    formoptions+='<discardBtnText>Discard</discardBtnText>';
    formoptions+='</saveForLaterInfo>';
    formoptions+='</formOptions>';
                              

    remoteSetOrGetSubmitInfoXMLJS(formoptions,true,false);
}
        
function resetSelect2FormElements() {

    $('.fieldDiv select').each(function (i, selectelement) {

        var attrDataFlexControl = $(selectelement).attr('data-flexcontrol');
        if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl != '') {
            switch (attrDataFlexControl) {
                case "picklist-default":
                case "multipicklist-default":
                    break;
                case "picklist-combobox":
                case "multipicklist-multi-tags":
                    $(selectelement).select2();
                    console.log('combo select or simple multi select2');
                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 
                    break;
                case "multipicklist-multi-tags-check":
                    $(selectelement).select2({ closeOnSelect: false, dropdownCssClass: 'ff-multi-checkbox' });
                    console.log(' multi select2 with checkbox'); 
                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 
                    break;
                case "picklist-radiobutton-vertical":
                    $(selectelement).SelectToRadio({ controlType: 'ff-ext-radio', alignment: 'vertical' });

                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 

                    break;
                case "picklist-radiobutton-horizontal":
                    reinitializeSelectToRadioElement('', $(selectelement).parent(), false, false, 'ff-ext-radio', 'horizontal');
                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 

                    break;
                case "multipicklist-checkbox-horizontal":
                    $(selectelement).SelectToRadio({ controlType: 'ff-ext-checkbox', alignment: 'horizontal' });
                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 

                    break;
                case "multipicklist-checkbox-vertical":
                    $(selectelement).SelectToRadio({ controlType: 'ff-ext-checkbox', alignment: 'vertical' });
                    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                                       resetFlexSelectForFM(selectelement);
                    </apex:outputText> 

                    break;
                default: break;
            }
        }
    });

}
function addRequiredMarkOnLabel(){
                
    $(".formFieldUl").find('li.fieldLi').each(function(indx,fieldli){
        addRequiredOnLabel(fieldli)  
    });            
}
                
                 
/* method to remove required reference  fields from Editor area */
function isFieldReference(elem) {

    var returnflag =false;
    try{
        $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
            var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
            if (isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                var labelElem=$(elem).find('.labelDiv .ff-label');
                var objecttype=safeStringValue($(labelElem).attr('vaobj'), "");
                var apiname= safeStringValue($(labelElem).attr('data-apiname'), "");
                if (($(elem).attr("data-otype")=='OLookup') &&  apiname !='' &&  objecttype!='') {
                    var elementName=apiname+' ('+objecttype+')';
                    var lookupobjid=$(ListRelVarElem).find('.objName').attr('id');
                    if(!isNullOrEmpty(elementName) && !isNullOrEmpty(lookupobjid) && elementName==lookupobjid)
                    {
                        console.log(' Field is a reference and available as object  '+lookupobjid);
                        returnflag = true;
                    }
                }
            }
            else{
                if (($(elem).attr("title") == "REFERENCE" || $(elem).attr("title").match(/\(Lookup\)$/g) != null) &&   $(elem).find('label').attr('vaobj') != undefined && $(elem).find('label').attr('vaobj') == $(ListRelVarElem).find('.objName').text()) {
                    returnflag = true;
                }
            }
        });
    }
    catch(err)
    {
        console.log(' Exception handled in isFieldReference: '+err.message);
    }
    return returnflag;
}
       
function removeReference() {

    $("#sortableForRelFields1").find('li').each(function () {
        $(this).show();
    });
    $("#sortableForRelFields1").find('li').each(function () {
        var firstUlLiItem=$(this);
               
        $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
            var ListRelVarElem=$(sortableUL).parents('.list-toggle-div-wrap');
            if (isNullOrEmpty($(ListRelVarElem).attr('data-ischild'))) {
                var labelElem=$(firstUlLiItem).find('.labelDiv .ff-label');
                var objecttype=safeStringValue($(labelElem).attr('vaobj'), "");
                var apiname= safeStringValue($(labelElem).attr('data-apiname'), "");
                var fieldType=safeStringValue($(firstUlLiItem).attr("data-otype"), "");
                        
                if (fieldType=='OLookup' &&  apiname !='' &&  objecttype!='') {
                    var elementName=apiname+' ('+objecttype+')';
                    var lookupobjid=$(ListRelVarElem).find('.objName').attr('id');                           
                    if(!isNullOrEmpty(elementName) && !isNullOrEmpty(lookupobjid) && elementName==lookupobjid)
                    {
                        $(firstUlLiItem).hide();
                    }
                }
            }
            else{
                if (($(firstUlLiItem).attr("title") == "REFERENCE" || $(firstUlLiItem).attr("title").match(/\(Lookup\)$/g) != null) &&   $(firstUlLiItem).find('label').attr('vaobj') != undefined && $(firstUlLiItem).find('label').attr('vaobj') == $(ListRelVarElem).find('.objName').text()) {
                    $(firstUlLiItem).hide();
                }
            }
        });
    });
}
                 


         
        
                

/* General Fields Sortable */
var dropCount=0;
                        
               
                          
                 
function toggleAvailableFieldsMenu(elem)
{
    var fieldListElem= $(elem).parent().find('.list-toggle-div');
                     
                                       
                        
    isSection=false; 
    removePrimaryLookupField();                  
                                                    
    if($(elem).hasClass('activeTab')){
        $(elem).removeClass('activeTab');
                                 
        $(fieldListElem).hide();//.slideUp(300);
        $('.list-toggle-div-wrap').show();
        $('.genlist-toggle-div-wrap').show();
                                
    }else{
        $('.availableHeaderDiv').removeClass('activeTab'); 
                                
                                 
                                                                                                         
        $('.list-toggle-div').slideUp(100); 
                                        
        $(elem).addClass('activeTab');
        $('.list-toggle-div-wrap').hide();
        $('.genlist-toggle-div-wrap').hide(); 
        $(elem).parent().show();     
        if(msieversion()>0)
        {
            $(fieldListElem).slideDown();
        }
        else
        {
                                
            $(fieldListElem).slideDown(100, function() {$(fieldListElem).jScrollPane({mouseWheelSpeed: 100 });});
        }
                                 
    }
                         
}
                 
                


                 
function currentTimeWithMiliseconds()
{
    var currentdate = new Date();
    return currentdate.getSeconds()+'-'+currentdate.getMilliseconds();
}
 
                 
function sort(sortList) {
                   
    console.log(' Initial time sort-'+currentTimeWithMiliseconds());
    $('#'+sortList).html($('#'+sortList).find('li').sort(function (a, b) {        
        return $(a).find('div:first-child > label').text().toUpperCase().localeCompare($(b).find('div:first-child > label').text().toUpperCase());
    })     
    );
    console.log(' End time sort-'+currentTimeWithMiliseconds());
}
                 
                
/* updated on dec 10 2014 - by balinder (functionality added - isreadonly */
function activeClick() {
    var sortableFieldClassName ='';
    $('#sortableForRelFields1 li').unbind();

    $('.available-fields-block-wrapper ul.dropfields li').unbind();
    $('#sortableForRelFields1>li').dblclick(function () {
        var validField=true;
        var fmenabled=false;
        var isReferenceField=false;
        var vatt=$(this).find('>div:first-child > label').attr('vatt');
        if(!isNullOrEmpty(vatt) && vatt=='REFERENCE' )
        {
            isReferenceField=true;
        }
        
        sortableFieldClassName ='sortableForRelFields1';
        var isdefaultrequired=false;
        // if($(this).find('>div:first-child input[id^="isDefaultRequired"]').val() == "true")
             
        if(getSafeBoolean($(this).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('data-isdefaultreq'),false))
        {
            isdefaultrequired=true;
        }
        <apex:outputText rendered="{!if(isFreemium ,true,false)}">
             
                
              

                if(isReferenceField)
        {
            if(!isdefaultrequired)
            {
                upgradeNowMessage("Reference fields are only available for paid subscriptions.","", "");
                    
                validField=false;
            }
            else
            {
                fmenabled=true;
            }
        }
        </apex:outputText>
        if(validField)
        {
            resetSavedButton();
            hideSection();
            var litem = $(this).clone();
            litem = itemAdd(litem);
            if (/RecordTypeId/i.test(litem.attr('id'))) {
                litem.find('.labelDiv label.ff-label').addClass('grayLabel');
            }
            //var addObjName = $('#sortableForRelFields1 li').attr('obj');
            var addObjName = $("#priName").text();
            //Extra div for List Name
            addObjectInfoOnLabel(litem.find('.labelDiv'),sortableFieldClassName,'');
            litem.addClass('sortableForRelFields1');

            if (isdefaultrequired) {
                $(litem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('data-isrequired',true);
                $(litem).find('.deleteField').remove();
                $(litem).find('.labelDiv .ff-required-mark').remove();
                $(litem).find('.labelDiv .ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));
            }
            if(fmenabled && isReferenceField)
            {
                litem.find('.editDelDiv .editImg').removeAttr('onclick');
                var lockHtml=getFreemiumHTML('Reference fields are','freemium-edit-block','lines-3');
                if(!litem.find('.editDelDiv').hasClass('fm-enabled'))
                {
                    litem.find('.editDelDiv').addClass('fm-enabled');
                }
                litem.find('.editDelDiv').prepend(lockHtml);
            }
            litem.find('.labelDiv').removeAttr('style');
            litem.removeAttr('style');
        
            if(litem.find('.labelDiv .ff-label').length>0)
            {
                litem.find('.labelDiv .ff-label').attr('ondblclick', "editFFLabel(this);");
            }
            if(litem.find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').length>0)
            {
                setCurrencyOrPercentLabels(litem.find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea'));
            }
            var lastFieldUlLiItem=$("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl:last-child .formFieldUl").last();
            if($(lastFieldUlLiItem).parents('.formSectionUl').hasClass('section-repeat')){
                addNewSectionItem($(lastFieldUlLiItem).parents('.fc-multi-page-item').find('>.add-newsection-box>a'),false);
                $("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl:last-child .formFieldUl").last().append(litem); 
            }else{
                $(lastFieldUlLiItem).append(litem); 
            }
         
            $(this).remove();
            var dropLiId= litem.attr('id');
            setHover();
            mixpanel.track('Field added by double-click', { "Field ID": litem.attr('id') });
            var metadata = {
                field_name: dropLiId
            };
            sendInfoToIntercom('trackEvent', 'added-field', metadata);  
        }      

    });
    
    $('.available-fields-block-wrapper ul.dropfields li').dblclick(function () {
        resetSavedButton();
        hideSection();

        var isFieldFromRepeatbaleObject=false;
        if($(this).parents('.list-toggle-div-wrap').hasClass('repeat')){
            isFieldFromRepeatbaleObject=true;
        }
        var litem = $(this).clone();        
        var mainFieldElement = litem.find('.fieldDiv').find('>select,>input,input.ff-input-type,input[type=hidden],>textarea');
        var elemId=$(mainFieldElement).attr('id');
        $(mainFieldElement).each(function (indx, inputElem) {
            if ($(inputElem).attr('type') != 'hidden') { 
                elemId=$(inputElem).attr('id');
            }
        });
                        
        var ListMainVarRel = $(this).parents('.list-toggle-div-wrap');
        litem = itemAdd(litem);
        if (/RecordTypeId/i.test(litem.attr('id'))) {
            litem.find('.labelDiv label.ff-label').addClass('grayLabel');
        }
        var addObjName = $(ListMainVarRel).find('.objName').text().replace('Fields', 'Object');
        sortableFieldClassName = $(ListMainVarRel).find('ul.dropfields').attr('id');
        var colorBar =safeStringValue( $(ListMainVarRel).attr('data-childclass'),'');
        litem.find('.labelDiv').removeAttr('style');
        litem.removeAttr('style');
        
        // var lblName = litem.find('.labelDiv label.ff-label').addClass('grayLabel');// $(litem).find('label').attr('id').replace('lbl', '');
        var finalElemId=elemId;
         
        var elemIdWODot=elemId.replace(/\./g, '');
        if (colorBar != undefined && colorBar != '') {
            addObjectInfoOnLabel(litem.find('>div.labelDiv'),sortableFieldClassName,colorBar);
            litem.addClass(colorBar);
            if (colorBar != '') {
                 
                finalElemId = elemId.substring(0, elemId.lastIndexOf('.') );
                 
                finalElemId = finalElemId + '.' + colorBar + '.' + elemId.substring(elemId.lastIndexOf('.') + 1);
            }
            elemIdWODot=finalElemId.replace(/\./g,'');
            litem.attr('id', 'lblli'+elemIdWODot);
            //// commented on June 16 2015 to add functionality of double click only for labels
            //litem.attr('ondblclick', "openEditDialog('" + (litem.attr('id') + 'A') + "',true);");
            // litem.attr('ondblclick', "editFFLabel('" + litem.attr('id') + colorBar+"');");
            if(litem.find('.labelDiv .ff-label').length>0)
            {
                litem.find('.labelDiv .ff-label').attr('ondblclick', "editFFLabel(this);");
            }
            litem.find('label').attr('id', litem.find('label').attr('id') + colorBar);
            $(mainFieldElement).each(function(indx,inputElem){
                if($(inputElem).attr('type')=='hidden')
                {
                    $(inputElem).attr('id', finalElemId+'hidden');
                    $(inputElem).attr('name', finalElemId+'hidden');
                }
                else{
                    $(inputElem).attr('id', finalElemId);
                    $(inputElem).attr('name', finalElemId);
                }
            });
                 

            litem.find('.editImg').attr('onclick', "openEditDialog(this,true);");
            //litem.find('.deleteField').attr('id', litem.attr('id'));
                
            
        } else {
           
            RemoveAllClassColorCodes(litem);
            addObjectInfoOnLabel(litem.find('>div.labelDiv'),sortableFieldClassName,'');
            var midName = '';
            var str = elemId;
            var idArr=str.split('\.');
            if(idArr.length>2)
            {
                midName= idArr[1];
            }
            $("#sortableForRelFields1").find('li').each(function () {
                if (isNullOrEmpty($(ListMainVarRel).attr('data-ischild')))    {
                    if (($(this).attr("title") == "REFERENCE" || $(this).attr("title").match(/\(Lookup\)$/g) != null) && $(this).find('div.labelDiv').attr('lblname') == $(ListMainVarRel).find('.objName').text().substring(0, $(ListMainVarRel).find('.objName').text().indexOf('(') - 1)) {
                        midName = $(this).find('>div:first-child label').attr('id').replace('lbl', '');
                    }
                }
            });

            var priObj = str.substring(0, str.indexOf('.') + 1);
            var fldObj = str.substring(str.lastIndexOf('.'));
            var inputIdStr = priObj + midName + fldObj;
            $(mainFieldElement).each(function(indx,inputElem){
                if($(inputElem).attr('type')=='hidden')
                {
                    $(inputElem).attr('id', inputIdStr+'hidden');
                    $(inputElem).attr('name', inputIdStr+'hidden');
                }
                else{
                    $(inputElem).attr('id', inputIdStr);
                    $(inputElem).attr('name', inputIdStr);
                }
            });          
             
        }
         
        litem.addClass(sortableFieldClassName);
         
       
        litem.attr('id', 'lblli'+elemIdWODot);
        
        if(litem.find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').length>0)
        {
            setCurrencyOrPercentLabels(litem.find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea'));
        }
        if (getSafeBoolean($(mainFieldElement).attr('data-isdefaultreq'),false)) {
            $(mainFieldElement).attr('data-isrequired',true);
            $(litem).find('.deleteField').remove();
            $(litem).find('.labelDiv .ff-required-mark').remove();
            $(litem).find('.labelDiv .ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));
        }
        if(litem.find('.labelDiv .ff-label').length>0)
        {
            litem.find('.labelDiv .ff-label').attr('ondblclick', "editFFLabel(this);");
        }
        /*following line will append html item to the last section on form canvas formFieldUl*/
        var lastFieldUlLiItem=$("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl:last-child .formFieldUl").last();
        if(isFieldFromRepeatbaleObject){
            if($("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl li."+sortableFieldClassName).length>0){
                $("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl li."+sortableFieldClassName).parent().last().append(litem);
            }else{
                addNewSectionItem($(lastFieldUlLiItem).parents('.fc-multi-page-item').find('>.add-newsection-box>a'),false);
                $('#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl').last().addClass('section-repeat');
                var sectionUlElem= $('#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl').last();
                $(sectionUlElem).attr('data-childclass',colorBar);
                $(sectionUlElem).attr('data-sortableclass',sortableFieldClassName);
                $($(sectionUlElem)).find(".formFieldUl").last().append(litem);
            }
        }else{
            if($(lastFieldUlLiItem).parents('.formSectionUl').hasClass('section-repeat')){
                addNewSectionItem($(lastFieldUlLiItem).parents('.fc-multi-page-item').find('>.add-newsection-box>a'),false);
                $("#mainMultiPageWrapper .form-canvas-multi-page-inner .formSectionUl:last-child .formFieldUl").last().append(litem); 
            }else{
                $(lastFieldUlLiItem).append(litem); 
            }
        }
        $(this).remove();
        setHover();
        var dropLiId= litem.attr('id');
        mixpanel.track('Field added by double-click', { "Field ID": litem.attr('id') });
        var metadata = {
            field_name: dropLiId
        };
        sendInfoToIntercom('trackEvent', 'added-field', metadata);        

    });
    
    setHover();
}
         
            
 


function getObjectNameText(fieldLiElem)
{
    var objectNameText='General';
    if(!$(fieldLiElem).hasClass('generalSortableForFields'))
    {
        $('.list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
            var sortableclassName=$(sortableUL).attr('id');
            if(!isNullOrEmpty(sortableclassName) && $(fieldLiElem).hasClass(sortableclassName))
            {
                objectNameText= $(sortableUL).parents('.list-toggle-div-wrap').find('.objName').text();
            }

        });
    }
    return objectNameText;
}
/*call to save function */
function save(isPreview,isAutoSave){
    if(isAutoSave)
    {
        draftchanges(true);
        //var multiPageXMlData=[];
        var multiPageObjList=[];
        $('#multiPageUlForm').find('.fc-multi-page-item').each(function(indx,multiPageItem){
            var pageId=$(multiPageItem).attr('data-pageid');
            if(!isNullOrEmpty(pageId))
            {
                var pageOrder=indx;
                var pagexml= getFFPageXML($(multiPageItem).find('.formPageUl'),$(multiPageItem).find('.page-tag-number').text());
                var renderhtml=  generateFormHTML(multiPageItem,pagexml);
                // multiPageXMlData.push({'pageXML':pagexml,'renderHTML':renderhtml})
                var pageFieldsObjXML=getFieldsObjectXML(pagexml);
                var pagetitle= $(multiPageItem).find('.formPageUl>li> label.ff-page-header').html();
                var pageishidden= getSafeBoolean($(multiPageItem).attr('data-ishidden'),false);
                pageOrder++;
     
                multiPageObjList.push(createJSONFormPageObj(pageId,pagetitle, pageOrder, pagexml,renderhtml,pageFieldsObjXML,pageishidden));
            }
        }); 
        /*  var allPagesFieldXML='';
          $(multiPageXMlData).each(function(indx,pageObj){
           allPagesFieldXML+=pageObj['pageXML'];
           
       
          });
        console.log(' Page result -');
        allPagesFieldXML=allPagesFieldXML.replace(/&/g,'&amp;');
         var fieldsObjectXml=getFieldsObjectXML(allPagesFieldXML);
          remoteSaveFormPagesJs(multiPageObjList,'Unpublished',fieldsObjectXml.replace(/&/g,'&amp;'));*/
        remoteSaveFormPagesJs(multiPageObjList,'Unpublished');

        //updateFormMainObject('Unpublished',fieldsObjectXml.replace(/&/g,'&amp;'));
    }
    else{
        $('.btnPublishedSaved').text('Publishing..');
 

        var relatedObjectsXML=getRelatedObjectInfoXML(false);//'<relatedObjects>';
                                        
        remotevalidatePaymentAndCallSaveJS(relatedObjectsXML, fetchHiddenObjectValues());
    }
 
}
// Handle the Save button
 
function DeletePage(delElem,isAutoSave){             
    // Check section containing a required field.   
    var fieldsUsedInRule = false;
    var pageUsedInRule = false;
    var isSectionContainsReqField = false;
    var sectionUsedInRule =false;// itemUsedInRule($(delElem).parent().parent().attr('id'));
    var lblId = '';
    $(delElem).parents('.fc-multi-page-item').find('ul.formPageUl .formSectionUl>li').each(function(secindx,sectionLiElem){

        var  sectionUsed = itemUsedInRule($(sectionLiElem).find('.ff-section-header').attr('id'));
        if(sectionUsed)
        {
            sectionUsedInRule=true;
        }
        $(sectionLiElem).find(".formFieldUl .fieldLi").each(function(indx,fieldLiElem){
            var inputElem=$(fieldLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');
                                           
            var fieldId =getFormattedElemId(fieldLiElem);
            if (itemUsedInRule(fieldId))
            {
                fieldsUsedInRule = true;     
            }
                                  
            if(getSafeBoolean($(inputElem).attr('data-isrequired'), false))
            { isSectionContainsReqField = true;
            }
        });
    });
    if (pageUsedInRule){
        showError("<div class='primary'>This page is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else if (sectionUsedInRule){
        showError("<div class='primary'>This page contains fields that are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else if (fieldsUsedInRule){
        showError("<div class='primary'>This page contains fields that are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else if(isSectionContainsReqField){
        showError("<div class='primary'>The page you are trying to delete has a required field inside of it.</div><br /> <br /><div class='secondary'>To delete this page, move the required field to a different page and try again.</div>");
    }else {                
                               
        doDeletePage(delElem,isAutoSave);
    }
}
function doDeletePage(elemSource,isAutoSave){
 
    var pageid=$(elemSource).parents('.fc-multi-page-item').attr('data-pageid');
    if(!isNullOrEmpty(pageid))
    {
        draftchanges(true);
        $(elemSource).parents('.fc-multi-page-item').find('ul.formPageUl .formSectionUl .formFieldUl .fieldLi').each(function(indx,fieldLiElem){
            // deleteFieldByParentFieldLi(fieldLiElem,false);
            var fieldLiId=$(fieldLiElem).attr('id');//deleteSignatureField
            if(!isNullOrEmpty(fieldLiId) && fieldLiId.indexOf('lblliESIGNATURE')>=0){
                // deleteSignatureField($(fieldLiElem).find('.deleteField'),false);
            }
            else if(!isNullOrEmpty(fieldLiId) && fieldLiId.indexOf('lblliFASTFORMSPAYMENT')>=0){
                deletePaymentFieldByParentFieldLi(fieldLiElem,false);
            }
            else{
                deleteFieldByParentFieldLi(fieldLiElem,false);
            }
        });
        var record = new ffRemoteObjs.FormPageObj();
        record.del(pageid,deletePageCallback);
        var elemToDel=$(elemSource).parents('.fc-multi-page-item').prev();
        if(elemToDel!=null && $(elemToDel).hasClass('add-newpage-box'))
        {
            $(elemToDel).fadeOut();
            $(elemToDel).remove();

        }
        $(elemSource).parents('.fc-multi-page-item').fadeOut();
        $(elemSource).parents('.fc-multi-page-item').remove();

    }
    else
    {
        console.log('Page Id not found');
    }
}
function deletePageCallback(err, results,objevent){
    if (err) { 
         
        console.log(' err -- '+err);
        draftchanges(false);
    } else {
        console.log(' deletePageCallback:Result- '+results+'  Event-'+objevent);
        refreshAddNewPagesLink();
        draftchanges(false);
    }
}
///PreviousFormObjForAutoSave
// Callback to handle DML Remote Objects calls
function updateCallback(err, results,objevent){
    if (err) { 
         
        console.log(' err -- '+err);
    } else {
        console.log(' UpdateCallback:Result- '+results+'  Event-'+objevent);
        draftchanges(false);
    }
}
/*toggle publish status for draft form*/
function updatePreviousFormObjForPublishToggle(draftStatus){
    var formoptions=$('#formOptionsHidden').val();
    
    var recordid = '{!$CurrentPage.parameters.id}';
    var record ;
    if(isNullOrEmpty(SFOrgPrefix)){
        if(isNullOrEmpty(formoptions))
        {
            record = new ffRemotePreviousFormObj.PreviousFormObjForPublishToggle({
                Id: recordid,
                Draft_Status__c: draftStatus 
            });
        }
        else{
            formoptions= getUpdatedFormOptionsConfigStr(formoptions);
            record = new ffRemotePreviousFormObj.PreviousFormObjForPublishToggle({
                Id: recordid,
                Draft_Status__c: draftStatus ,
                Form_Options__c:formoptions
            });
        }
    }
    else{
        if(isNullOrEmpty(formoptions))
        {
            record = new ffRemotePreviousFormObj.PreviousFormObjForPublishToggle({
                Id: recordid,
                VisualAntidote__Draft_Status__c: draftStatus 
            });
        }
        else{
            formoptions= getUpdatedFormOptionsConfigStr(formoptions);
            record = new ffRemotePreviousFormObj.PreviousFormObjForPublishToggle({
                Id: recordid,
                VisualAntidote__Draft_Status__c: draftStatus ,
                VisualAntidote__Form_Options__c:formoptions
            });
        }
    }
    record.update(updatePreviousFormObjForPublishToggleCallback);


 
}
function updatePreviousFormObjForPublishToggleCallback(err, results,objevent){
    if (err) { 
        draftchanges(false);
        console.log(' err --FormObjForPublishToggle- '+err);
    } else {
        console.log(' UpdateCallback FormObjForPublishToggle:Result- '+results+'  Event-'+objevent);
        draftchanges(false);
    }
}
function getUpdatedFormOptionsConfigStr(formOptionsStr){
    var formoptions=formOptionsStr;//$('#formOptionsHidden').val();
   
    var multiPageEnabled='false';
    if($('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner').find('.fc-multi-page-item').length > 1)
    {
        multiPageEnabled='true';
    }
    var formOptionsXML=getXmlElementFromStr(formoptions);
    if($(formOptionsXML).find('multiPageEnabled').length>0)
    {
        $(formOptionsXML).find('multiPageEnabled').text(multiPageEnabled);
    }
    formoptions= xmlDocToString(formOptionsXML);
    return formoptions;
}
// Handle the Save button
function updateFormMainObject(draftStatus,fieldsInfoXML){
    var formoptions=$('#formOptionsHidden').val();
   
    
                               
    var recordid = '{!$CurrentPage.parameters.id}';
    var record;
    if(!isNullOrEmpty(SFOrgPrefix)){
        if(isNullOrEmpty(formoptions))
        {
            console.log('Not in Form Options');
            record=new ffRemoteObjs.PreviousFormObjForAutoSave({
                Id: recordid,
                VisualAntidote__Draft_Status__c: draftStatus,
                VisualAntidote__Fields_Object_xml__c: fieldsInfoXML 
            });
        }
        else
        {
     
            formoptions= getUpdatedFormOptionsConfigStr(formoptions);
            console.log('Form Options saved'+formoptions);
            record = new ffRemoteObjs.PreviousFormObjForAutoSave({
                Id: recordid,
                VisualAntidote__Draft_Status__c: draftStatus,
                VisualAntidote__Fields_Object_xml__c: fieldsInfoXML,
                VisualAntidote__Form_Options__c:formoptions
            });
        }
    }
    else{
        if(isNullOrEmpty(formoptions))
        {
            console.log('Not in Form Options');
            record=new ffRemoteObjs.PreviousFormObjForAutoSave({
                Id: recordid,
                Draft_Status__c: draftStatus,
                Fields_Object_xml__c: fieldsInfoXML 
            });
        }
        else
        {
     
            formoptions= getUpdatedFormOptionsConfigStr(formoptions);
            console.log('Form Options saved'+formoptions);
            record = new ffRemoteObjs.PreviousFormObjForAutoSave({
                Id: recordid,
                Draft_Status__c: draftStatus,
                Fields_Object_xml__c: fieldsInfoXML,
                Form_Options__c:formoptions
            });
        }
    }
    record.update(updateFormMainCallback);
}
function updateFormMainCallback(err, results,objevent){
    if (err) { 
         
        console.log(' err -- updateFormMain-'+err);
    } else {
        console.log(' UpdateCallback updateFormMain:Result- '+results+'  Event-'+objevent);
        draftchanges(false);
    }
}
function createJSONFormPageObjInfo(pageid,pagetitle,pageorder,pagexml,pagehtml) {
    var dataobj = [{ "ID": pageid}];
    var pagexml_c=getPrefixedOrgFieldName(SFOrgPrefix,'Fields_xml__c');
    var formhtml_c=getPrefixedOrgFieldName(SFOrgPrefix,'Html__c'); 
    var pageorder_c=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Order__c');
    var pagetitle_c=getPrefixedOrgFieldName(SFOrgPrefix,'Page_Title__c');
    dataobj.push({pagetitle_c:pagetitle});
    dataobj[pageorder_c]=pageorder;
    dataobj[pagexml_c]=pagexml;
    dataobj[formhtml_c]=pagehtml; 
    return dataobj;
}
/*call to save function ends  */

function compressText(txtIn)
{
    if (txtIn.length > 131072)
        return LZString.compressToEncodedURIComponent(txtIn);
    else
        return txtIn;
}

function decompressText(txtIn)
{
    if (txtIn.length > 0 && txtIn.charAt(0) != '<')
        return LZString.decompressFromEncodedURIComponent(txtIn);
    else
        return txtIn;
}

function escape(s) {
    var escaped = {
        '&': '&amp;',
        "'": '&#39;',
        '"': '&quot;'
    };
    try {
        return s.replace(/[&<>'"]/g, function (m) {
            return escaped[m];
        });
    } catch(err) {
        return s;
    }
}


/*call to save function ends*/

                 
                 
                
                 
String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
                
function redirectToAdvanceFilter(){
    var res = confirm('Are you sure for navigate to Advanced Editor ?');
    if(res)
        window.location.href = '/apex/Ckeditor';
}
                 
// Make all Li of fields and label make equals
function makeAllLiHeightEqual(){
    var heightOfAllLi = [];
    var i = 0;
    $(".formUlLabel").find('li').each(function(){
        heightOfAllLi[i] = $(this).height();
        i++;
    });
    i = 0;
    $(".formUlField").find('li').each(function(){
        if(i<heightOfAllLi.length )
            $(this).height(heightOfAllLi[i]);
        i++;
    });
                         
}
                 
// Open new Label Dialog
function openNewLabelDialog(){
    $('#hiddenLiId').val('');
    $("#tblForRequirdBlock").hide();
    /*window.frames['FormatToolbar'].document.getElementById('editor').innerHTML = '';*/
    $( "#dialog" ).dialog({ height: 280});
    $('#dialog').dialog('option', 'position', 'center');
    $('#dialog').dialog('open');
}
function resetEditDivOpacity()
{
    ////to hide arrow/delete button on click on any editpanel's arrow button
    $('.fc-multi-page-item').find('.editImg').removeAttr('style');
    $('.fc-multi-page-item').find('.deleteField').show();
                                
}
var selFileType='';
var isShowLabel=false;
function populateSignatureConfig(elemSourceParent)
{
    var expandDiv= $(elemSourceParent).find('.ExpandDivESignature');
    var inputSignatureElement=$(elemSourceParent).find('.ffd-esignature-input');
    var signType= $(inputSignatureElement).attr('data-signtype');
    $(expandDiv).find("input[name='sign-type'][value='"+signType+"']").prop('checked', true);
    var signOptions= $(inputSignatureElement).attr('data-signoptions');
    $(expandDiv).find("input[name='sign-options'][value='"+signOptions+"']").prop('checked', true);
    $(expandDiv).find("#signatureLabel").val($(inputSignatureElement).attr('data-signlabel'));
    $(expandDiv).find("#signatureDate").val($(inputSignatureElement).attr('data-signdate'));
    $(expandDiv).find("#signatureIAgreeText").val($(inputSignatureElement).attr('data-signagree'));
    var signdatehide= $(inputSignatureElement).attr('data-signdatehide');
    var signagreehide= $(inputSignatureElement).attr('data-signagreehide');
    var emailenabled= getSafeBoolean($(inputSignatureElement).attr('data-emailenabled'),false);
    var emaillabel= safeStringValue($(inputSignatureElement).attr('data-emaillabel'),'Email');
    $(expandDiv).find("#signatureEmailLabel").val(emaillabel);

    if(!isNullOrEmpty(signdatehide) && (signdatehide=='true' || signdatehide==true))
    {
        $(expandDiv).find('#signatureDateHide').prop('checked',false);
        $(expandDiv).find("#signatureDate").parents('.fieldRow').slideUp();
    }
    else{
        $(expandDiv).find('#signatureDateHide').prop('checked',true);
        $(expandDiv).find("#signatureDate").parents('.fieldRow').slideDown();
    }

    if(emailenabled)
    {
        $(expandDiv).find('#signatureEmailEnabled').prop('checked',true);
        $(expandDiv).find("#signatureEmailLabel").parents('.fieldRow').slideDown();
    }
    else{
        $(expandDiv).find('#signatureEmailEnabled').prop('checked',false);
        $(expandDiv).find("#signatureEmailLabel").parents('.fieldRow').slideUp();
    }

    if(!isNullOrEmpty(signagreehide) && (signagreehide=='true' || signagreehide==true))
    {
        $(expandDiv).find('#signatureIAgree').prop('checked',false);
        $(expandDiv).find("#signatureIAgreeText").parent().slideUp();
    }
    else{
        $(expandDiv).find('#signatureIAgree').prop('checked',true);
        $(expandDiv).find("#signatureIAgreeText").parent().slideDown();
    }
               
                 
    if(emailenabled){
        $(expandDiv).find('.email-enabled-info').slideDown();
    } 
    else{
        $(expandDiv).find('.email-enabled-info').slideUp();
    }
                
}
function signatureConfigChange(elemSource,isAutoSave)
{
    var expandDiv= $(elemSource).parents('.ExpandDivESignature');
    var inputSignatureElement=$(expandDiv).parents('.fieldLi').find('.ffd-esignature-input');
    var signLabel= $(expandDiv).find("#signatureLabel").val();
    var signType= $(expandDiv).find("input:radio[name='sign-type']:checked").val();
    if(signType=='initials' && signLabel=='Full Name')
    {
        signLabel='Initials';
        $(expandDiv).find("#signatureLabel").val(signLabel);
    } else if(signType=='full' && signLabel=='Initials')
    {
        signLabel='Full Name';
        $(expandDiv).find("#signatureLabel").val(signLabel);
    }
    var signagreehide=!$(expandDiv).find('#signatureIAgree').is(':checked');
    var signdatehide=!$(expandDiv).find('#signatureDateHide').is(':checked');
    var emailenabled=$(expandDiv).find('#signatureEmailEnabled').is(':checked');
    setInputAttributeName(inputSignatureElement,'data-signtype',signType);
    setInputAttributeName(inputSignatureElement,'data-signoptions',$(expandDiv).find("input:radio[name='sign-options']:checked").val());
    setInputAttributeName(inputSignatureElement,'data-signlabel',signLabel);
    setInputAttributeName(inputSignatureElement,'data-signdate',$(expandDiv).find("#signatureDate").val());
    setInputAttributeName(inputSignatureElement,'data-signdatehide',signdatehide);
    setInputAttributeName(inputSignatureElement,'data-signagreehide',signagreehide);
    setInputAttributeName(inputSignatureElement,'data-emailenabled',emailenabled);
    setInputAttributeName(inputSignatureElement,'data-emaillabel',$(expandDiv).find("#signatureEmailLabel").val());

    if(!isNullOrEmpty(signdatehide) && (signdatehide=='true' || signdatehide==true))
    {
                
        $(expandDiv).find("#signatureDate").parents('.fieldRow').slideUp();
    }
    else{
                
        $(expandDiv).find("#signatureDate").parents('.fieldRow').slideDown();
    }


    if(emailenabled)
    {
        $(expandDiv).find("#signatureEmailLabel").parents('.fieldRow').slideDown();
    }
    else{
                
        $(expandDiv).find("#signatureEmailLabel").parents('.fieldRow').slideUp();
    }
    if(!isNullOrEmpty(signagreehide) && (signagreehide=='true' || signagreehide==true))
    {
               
        $(expandDiv).find("#signatureIAgreeText").parent().slideUp();
    }
    else{
                
        $(expandDiv).find("#signatureIAgreeText").parent().slideDown();
    }
    if(emailenabled){
        $(expandDiv).find('.email-enabled-info').slideDown();
    } 
    else{
        $(expandDiv).find('.email-enabled-info').slideUp();
    }
    setInputAttributeName(inputSignatureElement,'data-signagree',$(expandDiv).find("#signatureIAgreeText").val());
    resetESignatureElement($(elemSource).parents('.fieldLi'),isAutoSave);
                 
}
function changeParentLabelHtml(elemSource){
    var parentLiElement=$(elemSource).parents('.pageLi');
                  
    $(parentLiElement).find('> label.ff-page-header').html($(elemSource).val());
    isChangesMadeInForm = true;
    autosaveTriggered();
}
function hideFFParent(elemSource){
    var mainLiElement=$(elemSource).parents('.ExpandFFDiv').parent();
    var isPage=false;
    var hideElement=false;
    if ($(elemSource).prop('checked')!='undefined' &&  $(elemSource).prop('checked'))
    {
        hideElement=true;
    }
               
    if($(mainLiElement).hasClass('pageLi'))
    {
        isPage=true;
    }
    if(isPage)
    {
        if(hideElement)
        {
            $(elemSource).parents('.fc-multi-page-item').attr('data-ishidden',true);
        }
        else{
            $(elemSource).parents('.fc-multi-page-item').attr('data-ishidden',false);
        }
    }
    else{
        if(hideElement)
        {
            $(elemSource).parents('.formSectionUl').addClass('hideFullSection');
        }
        else{
            $(elemSource).parents('.formSectionUl').removeClass('hideFullSection');
        }
    }
    isChangesMadeInForm = true;
    autosaveTriggered();
                 
}
/*here go  openEditDialog()*/
function openEditFFDialog(elemSource)
{
    var elemSourceParent=  $(elemSource).parents('.sectionLi');
    var ishidden=false;
                  
    if($(elemSource).hasClass('pageEdit'))
    {
        elemSourceParent=  $(elemSource).parents('.pageLi');
        ishidden=getSafeBoolean($(elemSource).parents('.fc-multi-page-item').attr('data-ishidden'),false);
                  
    }
    else
    {
        ishidden=getSafeBoolean($(elemSource).parents('.formSectionUl').hasClass('hideFullSection'),false);
    }
    collapsePaymentOptionsDiv();
    resetEditDivOpacity();
    $(".ExpandDiv").remove();
    $('.ExpandDivESignature').remove();
    var expandCurrentDiv=false;
    if($(elemSourceParent).find('.ExpandFFDiv').length==0)
    {
        expandCurrentDiv=true;
    }
                   
                   
    if(expandCurrentDiv)
    {
                    
        toggleSortableOption(true);
        var labelhtml=$(elemSourceParent).find('>label').html();
        $(elemSourceParent).find('.editDelDiv').find('.editImg').addClass('togHoverActive');
        var expandComponentItem = $('#PageOrSectionEditHTMLTemp').clone().html();
        $ExpandFFDiv = $('<div />', {'class': 'ExpandFFDiv','style':'display:none'});
        $ExpandFFDiv.append(expandComponentItem);
        $ExpandFFDiv.find('#changeLabelDiv input').val(labelhtml);
        var chkbxHideElem=$ExpandFFDiv.find('#hideBlockDiv input');
        if(ishidden)
        {
            $(chkbxHideElem).prop('checked',true);
        }
        else{
            $(chkbxHideElem).prop('checked',false);
        }

        $(elemSourceParent).append($ExpandFFDiv);
        $(elemSourceParent).find('.ExpandFFDiv').slideDown(300);
        //populateSignatureConfig(elemSourceParent);
        $(elemSourceParent).find('.ExpandFFDiv').show();


    }
    else
    {
                          
        toggleSortableOption(false);
        $(elemSourceParent).find('.ExpandFFDiv').slideUp(300);
        $(elemSourceParent).find('.ExpandFFDiv').remove();
        $(elemSourceParent).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        isChangesMadeInForm = true;
        autosaveTriggered();
    }
}
function openEditPaymentDialog(elemSource)
{

    var elemSourceParent=  $(elemSource).parents('.fieldLi');
    var   liId=$(elemSourceParent).attr('id');
    if($(elemSource).hasClass('togHoverActive'))
    {                       
        console.log('Close Payment options');
        mixpanel.track('Payment options collapsed',{ "Field ID": liId});
        expandPaymentOptions(elemSourceParent,false);
        resetScroll();
    }
    else
    {                       
        mixpanel.track('Payment options expanded',{ "Field ID": liId});                        
        sendInfoToIntercom('trackEvent', 'opened-payment-options');
        console.log('Expand Payment options');
        expandPaymentOptions(elemSourceParent,false);
    }
                    
}
function openEditSignatureDialog(elemSource)
{
    var elemSourceParent=  $(elemSource).parents('.fieldLi');
    collapsePaymentOptionsDiv();
    resetEditDivOpacity();
    $(".ExpandDiv").remove();
    var expandCurrentDiv=false;
    if($(elemSourceParent).find('.ExpandDivESignature').length==0)
    {
        expandCurrentDiv=true;
    }
                   
                   
    if(expandCurrentDiv)
    {
                    
        toggleSortableOption(true);
        $(elemSourceParent).find('.editDelDiv').find('.editImg').addClass('togHoverActive');
        var signatureComponentItem = $('#DocSignEditHTMLTemp').clone().html();
        $ExpandDivESignature = $('<div />', {
            'class': 'ExpandDivESignature','style':'display:none'
        });
        $ExpandDivESignature.append(signatureComponentItem);
        $(elemSourceParent).append($ExpandDivESignature);
        $(elemSourceParent).find('.ExpandDivESignature').slideDown(300);
        populateSignatureConfig(elemSourceParent);
        $(elemSourceParent).find('.ExpandDivESignature').show();
                   
    }
    else
    {
                          
        toggleSortableOption(false);
        $(elemSourceParent).find('.ExpandDivESignature').slideUp(300);
        $(elemSourceParent).find('.ExpandDivESignature').remove();
        $(elemSourceParent).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        isChangesMadeInForm = true;
        autosaveTriggered();
    }

                    
}
                 
function openEditDialog(elementSource, isFieldLabel) {
    ////to fix issue: Delete button missing / arrow not hiding issue-- added on nov 26 2014 by balinder
    var   liId=$(elementSource).parents('.fieldLi').attr('id');
    if(!isFieldLabel)
    {
        liId= $(elementSource).parents('.sectionLi').attr('id');
    }
    var isGeneralField=false;
    if(isFieldLabel && $(elementSource).parents('.fieldLi').hasClass('generalSortableForFields'))
    {
        isGeneralField=true;
    }
    $("#trForUpsertField").find('.freemium-icon').remove('');
    var infoIsValid=true;
    var firstLabel=$('#'+$("#hiddenLiId").val()).find('>div:first > label:first');
    if($("#" + $("#hiddenLiId").val()).find(".ExpandDiv").length > 0 && !isNullOrEmpty($(firstLabel).attr('vatt')) && $(firstLabel).attr('vatt')=='REFERENCE' && !vaildateLookupEdit($("#hiddenLiId").val()))
    {
        infoIsValid=false;
    }
    if(infoIsValid)
    {
        /*collapse all payment field drawers*/
        collapsePaymentOptionsDiv();
        collapseESignatureEditDialogs();
        resetEditDivOpacity();
        resetPaymentOptions();
        $(".editImg").removeClass('togHoverActive');
        //resetSavedButton();
        isFFValid = true;
        isShowLabel = false;
        var dHide = $("#" + liId + " .deleteField").attr('id');
        if ($("#hiddenLiId").val() == liId && $("#" + $("#hiddenLiId").val()).find(".ExpandDiv").length > 0) {
            mixpanel.track('Field options collapsed',{ "Field ID": liId});
                        
            if (/lblliFILEUPLOADAREA/i.test(liId)) {
                if ($('#customfltype').next().html() == "Please provide comma-separated extensions (e.g. .doc, .txt)") {
                    isFFValid = false;
                    // console.log(' isFFValid false 4118');
                    $('#customfltype').focus();
                } else {
                    $(".ui-icon-closethick").click();
                    var RE = /^-{0,1}\d*\.{0,1}\d+$/;
                    $("#limitValue").next().remove();
                    if (RE.test($("#limitValue").val())) {
                        if ($("#limitValue").val() > 99 || $("#limitValue").val() <= 0) {
                            isFFValid = false;
                            //  console.log(' isFFValid false 4127');
                            $("#limitValue").css('border', '1px solid red');
                            $("#limitValue").after('<span style="color:red;">Please enter a numeric value<span>');
                            $("#limitValue").focus();
                        } else {
                            limitValue = $("#limitValue").val();
                            $("#" + liId).find(".ff-fileupload-drop-area").attr('data-maxfiles', limitValue);
                            isFFValid = true;
                        }
                    } else {
                        isFFValid = false;
                        //   console.log(' isFFValid false 4138');
                        $("#limitValue").css('border', '1px solid red');
                        $("#limitValue").after('<span style="color:red;">Please enter a numeric value<span>');
                        $("#limitValue").focus();
                    }
                }

            }
            if (isFFValid) {
                limitValue = $("#limitValue").val();
                $("#" + liId).find(".ff-fileupload-drop-area").attr('data-maxfiles', limitValue);
                selFileType = $("#selectedfiletypes").val();
                $(".ExpandDiv").slideUp('300', function() {
                    resetFloat();
                    goToNextTourStop();
                });
                setTimeout(function() {
                    $(".ExpandDiv").remove()
                }, 300);
                $("#" + liId + " .deleteField").show();

                $("#" + liId + " .editImg").removeAttr('style');
                                 
                // $(".formFieldUl").sortable("option", "disabled", false);
                //$("#parentUlForm").sortable("option", "disabled", false);
                toggleSortableOption(false);

            }
                        

                        
            console.log(' autosave hit');
            //save(false, true);
            isChangesMadeInForm = true;
            $("#" + liId).parent().parent().parent().parent().parent().removeClass('isFieldEdit');
                         
        } 
        else 
        {
            /*drawer is open                */

            mixpanel.track('Field options expanded',{ "Field ID": liId});
            var metadata = {
                field_name: liId
            };
            sendInfoToIntercom('trackEvent', 'opened-field-options', metadata);                        
            $("#" + liId + " .editImg").addClass('togHoverActive');
                       
            var tempDialogHtml = $("#tempDialogHtml").html();
            if ($("#tempDialogHtml").find('table').length > 0) {
                $("#dialog").html($("#tempDialogHtml").html());
            }
            //$("iframe").remove();
            $(".ExpandDiv").remove();
            $("#hiddenLiId").val(liId);
            $("#hiddenLiLabelId").val($("#" + liId).find('label').attr('id'));
            var labelLIId = $("#hiddenLiLabelId").val();
            var dialogHtml = $('#dialog').html();
            $("#tempDialogHtml").html(dialogHtml);
            $("#" + liId).find('.ExpandDiv').remove();

            $("#" + liId).append('<div title="" class="ExpandDiv" id="ExpandDiv' + liId + '">' + dialogHtml + '</div>');
                        
                        
            $('.arrowUp').bind("click", function() {
                openEditDialog(elementSource, isFieldLabel);
            });


            if (/lblliIMAGE/i.test(liId)) {
                $("#trForLabelEdit").hide();
                $("#trForDefaultValue").hide();
                $("#trForHideField").show();
                $("#trForReadOnlyField").hide();
                $("#trForCurrencyLabelField").hide();
                $("#trForPlaceholderText").hide();
                $('#trForFieldsPicklistdOptionsToggle').hide();
                $('#trForFieldsAdvancedOptionsToggle').hide();
                $("#trForLookupView").hide();
                $("#trForFileField").hide();
                $("#trForLimitField").hide();
                $("#trForUploadToChatterField").hide();
                $("#trForFileUploadFileName").hide();
                $("#trForUpsertField").hide();
                $(".sectionTd").hide();
                $("#trForRequired").hide();
                $("#trForDisplayType").hide();
                $("#trForMsgField").hide();

                $("#trForImageAlignment").show();
                $("#trForImageWidth").show();
                $("#trForImageHeight").show();
                $("#trForImageALT").show();
                $("#tblForRequirdBlock").show();
                            
                /*for lblliIMAGE- updated below code on sep 17 2015 to fix #190 issue*/
                var imgWidth,imgHeight,imgAlign,imgAltTag;
                if($('#' + liId.replace('lblli','img')).length>0)
                {
                    imgWidth = $('#' + liId.replace('lblli','img')).css('width').replace('px','');
                    imgHeight = $('#' + liId.replace('lblli','img')).css('height').replace('px','');
                    imgAltTag = $('#' + liId.replace('lblli','img')).attr('alt');
                    imgAlign = $('#' + liId).find('#divFieldIMAGE').css('text-align');
                }
                              
                if(!isNullOrEmpty(imgAlign))
                {
                    $("#trForImageAlignment").find('#ddlImageAlignment').val(imgAlign);
                }
                if(!isNullOrEmpty(imgWidth))
                {
                    $("#trForImageWidth").find('#imgWidthValue').val(imgWidth);
                }
                if(!isNullOrEmpty(imgHeight))
                {
                    $("#trForImageHeight").find('#imgHeightValue').val(imgHeight);
                }
                if(!isNullOrEmpty(imgAltTag))
                {
                    $("#trForImageALT").find('#imgAltTag').val(imgAltTag);
                }
                              
                            
                          

                if($("#" + liId).find('div:first-child > label').hasClass('grayLabel'))
                {
                    setHideFieldForGeneralField(true);
                }
                else
                {
                    setHideFieldForGeneralField(false);
                }


            } 
            else 
            {


                if (isFieldLabel) {

                    var fieldInputElement=$("#" + liId).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');
                    <apex:outputText rendered="{!if(isFreemium,true,false)}">
                     $("#trForUpsertField").find('input[type="checkbox"]').attr('disabled',true);
                    if(!$("#trForUpsertField").find('label.css-label').hasClass('cursor-not-allowed'))
                    {
                        $("#trForUpsertField").find('label.css-label').addClass('cursor-not-allowed');
                    }
                    var  lockHtml=getFreemiumHTML('','','lines-3');
                    $("#trForUpsertField").find('.formatEdit').append(lockHtml);
                    </apex:outputText>
                    var textLbl=$("#"+liId).find('>div:first-child > label').text();//$("#"+liId).find("#"+labelLIId).html();
                    $('#defaultLabel').val(textLbl);
                    /* if current li element has a field element*/
                    var fieldliiElement=$("#" + liId);
                                
                    $(".fieldTd").show();
                    $("#trForImageALT").hide();
                    $("#trForCurrencyLabelField").hide();

                    var labelElem = $("#" + liId).find('div:first label:first');
                    if ($(labelElem) && $(labelElem).attr('vatt')) {
                        var vattValue = $(labelElem).attr('vatt');
                        if (vattValue.indexOf('DOUBLE') >= 0) {
                            vattValue = 'INTEGER';
                        }
                        showDisplayAsControl(true, vattValue);
                    }
                    if ($(labelElem) && $(labelElem).attr('vatt')) {
                        var vattValue = $(labelElem).attr('vatt');
                        if (vattValue.indexOf('CURRENCY') >= 0) {
                            var currencylabel = $("#" + liId).find('.fieldDiv input.ff-input-type:first').prev().text();
                            $("#trForCurrencyLabelField").show();
                            $("#trForCurrencyLabelField").find('#currencyLabelValue').val(currencylabel);
                        }
                                             
                    }

                    $('#trForFieldsPicklistdOptionsToggle').hide();

                    if(isGeneralField){
                        $('#trForFieldsAdvancedOptionsToggle').hide();
                        $("#trForPlaceholderText").hide();             
                    }else{
                        if(isFieldLabel){
                            var fieldType= safeStringValue($("#" + liId).attr('data-otype'),'');
                            $('#trForFieldsAdvancedOptionsToggle').show();
                            if(fieldType.toLowerCase()=='osinglepicklist' || fieldType.toLowerCase()=='omultipicklist'){
                                $('#trForFieldsPicklistdOptionsToggle').show();
                                $("#trForPlaceholderText").hide();
                            }
                        }
                    }

                    $(".sectionTd").hide();
                    var isSelect = false;
                    var isSelect2 = false;
                    var isSelectRadioBtn = false;
                    var isMultiSelect = false;
                    var isMultiSelect2 = false;
                    var isCustomRorClist = false;
                    var isCustomFlexInputOrSelect = false;

                    var $fieldDivItem=$("#" + liId).find('.fieldDiv').clone();
                    if($fieldDivItem.find('div.selectDataSet').length > 0){
                        $fieldDivItem.find('div.selectDataSet').remove();
                    }
                    $fieldDivItem.removeAttr('disabled');
                    $fieldDivItem.removeAttr('readonly');
                    $fieldDivItem.attr('data-isreadonly',false);
                    var fieldDivHtml = $fieldDivItem.html();
                    var selectElement = $("#" + liId).find('.fieldDiv>select')
                    if (selectElement.length == 1) {
                        selectElement = selectElement[0];
                    }
                    if (selectElement.type == 'select-one') {
                        isSelect = true;
                    } else if (selectElement.type == 'select-multiple') {
                        isMultiSelect = true;
                    }

                    /*april 8 - flexcontrol modification */
                    if ($fieldDivItem.find('div.select2-container').length > 0) {
                        if ($fieldDivItem.find('div.select2-container-multi').length > 0) {
                            isMultiSelect2 = true;
                        } else {
                            isSelect2 = true;
                        } 
                    }

                    if ($fieldDivItem.find('div.custom-flex-control-container').length > 0) {

                        isCustomFlexInputOrSelect = true;
 
                    }


                    $("#trForDefaultValue").find('td:last').html(fieldDivHtml);

                    $("#trForDefaultValue").find('td:last').find('select').attr('id', 'defaultValue');
                    if (isSelect2 || isMultiSelect2) {
                        $("#trForDefaultValue").find('div.select2-container').remove();
                        $("#trForDefaultValue").find('select:first').removeClass('select2-offscreen');

                        var controlType = $("#trForDefaultValue").find('select:first').attr('data-flexcontrol');
                        if (isMultiSelect2) {
                            console.log(' Multi select 2 tags' + controlType);
                            $('.flex-ctrl-display-as select.multi-picklist-type-select').val(controlType);
                        } else if (isSelect2) {
                            $('.flex-ctrl-display-as select.picklist-type-select').val(controlType);
                        } else {

                        }

                    } else if (isCustomFlexInputOrSelect) {
                        /* if control is one of the following type- checkboxlist, radio button list, nps rating or star rating */
                        $("#trForDefaultValue").find('div.custom-flex-control-container').remove();
                        if ($("#trForDefaultValue").find('select:first').length > 0) {
                            $("#trForDefaultValue").find('select:first').removeClass('custom-select-offscreen');

                            var controlType = $("#trForDefaultValue").find('select:first').attr('data-flexcontrol');

                            if (isSelect) {

                                $('.flex-ctrl-display-as select.picklist-type-select').val(controlType);
                            } else if (isMultiSelect) {
                                $('.flex-ctrl-display-as select.multi-picklist-type-select').val(controlType);
                            }
                        } else if ($("#trForDefaultValue").find('input[type="textbox"]:first').length > 0) {
                            $("#trForDefaultValue").find('input[type="textbox"]:first').removeClass('custom-flexcontrol-offscreen');
                            var controlType = $("#trForDefaultValue").find('input[type="textbox"]:first').attr('data-flexcontrol');
                            $('.flex-ctrl-display-as select.integer-type-select').val(controlType);

                            $("#trForDefaultValue").find('td:last').find('input').attr('id', 'defaultValue');

                            // $('.rating-range-block').removeClass('display-none');
                            //   $('.rating-range-block .star-rating-range').removeClass('display-none'); 
                        }


                    } else {
                        if ($(fieldliiElement).find('.lookupInput').length > 0) {
                            var lookupval=$("#trForDefaultValue").find('td:last').find('input[type=hidden]').val();
                            $("#trForDefaultValue").find('td:last').find('input[type="textbox"]').attr('id', 'defaultValue');
                            $("#trForDefaultValue").find('td:last').find('input[type="textbox"]').attr('data-value',lookupval);
                        }
                        else
                        {
                            $("#trForDefaultValue").find('td:last').find('input').attr('id', 'defaultValue');
                        }
                    }

                    /*added datetimepicker to for default valueapril 1 2015*/
                    if ($("#trForDefaultValue").find('td:last').find('input').size() > 0) {
                        var inputElem = $("#trForDefaultValue").find('td:last').find('input');
                        if ($(inputElem).attr('vatt') == 'DATE') {
                            $(inputElem).datetimepicker({
                                showTimepicker: false,
                                addSliderAccess: true,
                                sliderAccessArgs: {
                                    touchonly: false
                                },
                                changeMonth: true,
                                changeYear: true,
                                yearRange: "-100:+10",
                                onSelect: function(dateText) {
                                    // addLabel($(this));
                                    //  resetSavedButton();
                                    $(this).parents('.fieldLi').find('.fieldDiv input[type="textbox"]').val(dateText);
                                    isChangesMadeInForm=true;
                                },
                                constrainInput: false
                            });
                        } else if ($(inputElem).attr('vatt') == 'DATETIME') {
                            $(inputElem).datetimepicker({
                                addSliderAccess: true,
                                sliderAccessArgs: {
                                    touchonly: false
                                },
                                changeMonth: true,
                                changeYear: true,
                                yearRange: "-100:+10",
                                onSelect: function(dateText) {
                                    // addLabel($(this));
                                    //  resetSavedButton();
                                    $(this).parents('.fieldLi').find('.fieldDiv input[type="textbox"]').val(dateText);
                                    isChangesMadeInForm=true;
                                },
                                constrainInput: false
                            });
                        }

                    }

                    $("#trForDefaultValue").find('td:last').find('textarea').attr('id', 'defaultValue');

                    $("#trForDefaultValue").find('td:last').find('textarea').attr('name', $('.ExpandDiv').prev().prev().find('textarea').attr('id'));

                    $("#trForDefaultValue").find('td:last').find('.css-label').attr('for', 'defaultValue');
                    $("#tblForRequirdBlock").show();
                    //setTimeout(function(){$('#FormatToolbar').contents().find('#arrowSection').css('display','none')}, 2000);


                    $("#" + liId).find('#defaultValue').removeAttr('readonly');

                    var fieldrequiredmessage=$(fieldInputElement).attr('data-requiredmessage');
                    var isdefaultreq=getSafeBoolean($(fieldInputElement).attr('data-isdefaultreq'),false);
                    var isreq=getSafeBoolean($(fieldInputElement).attr('data-isrequired'),false);
                    var isuserreq=getSafeBoolean($(fieldInputElement).attr('data-isuserreq'),false);
                    var isfieldupsert=getSafeBoolean($(fieldInputElement).attr('data-isupsert'),false);
                    var isfieldhidden=getSafeBoolean($(fieldInputElement).attr('data-ishidden' ),false);
                    var isfieldreadonly=getSafeBoolean($(fieldInputElement).attr('data-isreadonly'),false);
                    var placeholderText= $(fieldInputElement).attr('placeholder');
                    var hideField=isfieldhidden;
                                      
                    //Disable required checkbox 
                    if(!isGeneralField)
                    {
                        if (isreq || isuserreq) {
                            $('#requiredChk').prop("checked", true);
                                             
                        } else  if (isreq == "false" || isreq == false) {
                            $('#requiredChk').prop("checked", false);
                        }
                        if (isdefaultreq ) {
                            $('#requiredChk').prop("disabled", true);
                            $('#requiredChk').parent().find('label').addClass('checkboxdisabled');
                        } else  if (isdefaultreq == "false" || isdefaultreq == false) {
                            $('#requiredChk').prop("disabled", false);
                            $('#requiredChk').parent().find('label').removeClass('checkboxdisabled');;
                        }
                                    
                        if (isfieldupsert ) {
                            $('#upsertField').prop('checked', true);
                        } else if (isfieldupsert == "false" || isfieldupsert == false) {
                            $('#upsertField').prop('checked', false);
                        }

                                     
                                  
                        var defaultValue = $(fieldInputElement).val();
                        if($(fieldInputElement).length>0 && $(fieldInputElement)[0].type=='checkbox')
                        {
                            defaultValue=$(fieldInputElement).prop('checked');
                        }
                                    
                                    

                        var defaultChekboxVal;
                        $('#trForPlaceholderText').hide();
                        if ($("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').length > 0) {
                            if (defaultValue == 'true' || defaultValue == true)
                                $("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').prop('checked', true);
                            else
                                $("#trForDefaultValue").find('td:last').find('input[type="checkbox"]').prop('checked', false);
                        } else {

                            if ($('#defaultValue').is('select')) {
                                var values = defaultValue;
                                if (values instanceof Array) {
                                    $.each(values, function(i, e) {
                                        $("#defaultValue option[value='" + e + "']").prop("selected", true);
                                    }); 
                                }
                                else{
                                    $("#defaultValue option[value='" + values + "']").prop("selected", true);
                                }
                                                    
                            } else {
                                var attrDataFlexControl = $('#defaultValue').attr('data-flexcontrol');
                                if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl != '') {
                                    $('.rating-range-block .star-rating-range').addClass('display-none');
                                    $('.rating-range-block .nps-rating-range').addClass('display-none');
                                    switch (attrDataFlexControl) {
                                        case "integer-starrating":
                                            $('.rating-range-block').removeClass('display-none');
                                            $('.rating-range-block .star-rating-range').removeClass('display-none');
                                            $('#noOfStars').val($('#defaultValue').attr('data-flex-max'));
                                            $('#starMinLabel').val($('#defaultValue').attr('data-flex-minlabel'));
                                            $('#starMaxLabel').val($('#defaultValue').attr('data-flex-maxlabel'));
                                            break;
                                        case "integer-npsrating":
                                            $('.rating-range-block').removeClass('display-none');

                                            $('.rating-range-block .nps-rating-range').removeClass('display-none');
                                            $('#npsMinLabel').val($('#defaultValue').attr('data-flex-minlabel'));
                                            $('#npsMiddleLabel').val($('#defaultValue').attr('data-flex-middlelabel'));
                                            $('#npsMaxLabel').val($('#defaultValue').attr('data-flex-maxlabel'));

                                            break;
                                        default:
                                            break;
                                    }
                                }
                                $('#trForPlaceholderText').show();
                                $('#defaultValue').val(defaultValue);
                                if(!isNullOrEmpty(placeholderText)){
                                    $('#placeholderText').val(placeholderText);
                                }

                            }
                        }
                        var isReference=false;

                        if ($(fieldliiElement).find('.fieldDiv .lookupInput').length > 0) {
                            isReference=true;
                        }
                                    
                        if (hideField) {
                            $('#hideField').prop('checked', true);
                                            
                            isShowLabel = true;
                            if (isReference) {
                                toggleVisibilityOnHideFieldChange($('#hideField'),$(fieldliiElement).find('.ExpandDiv'),false);
                            }
                        }
                                    
                                     
                        if (isfieldreadonly) {
                            $('#readOnlyField').prop('checked', true);
                            //$('#readOnlyField').change();
                            $('#defaultValue').removeAttr('disabled');
                            if (isReference && !$('#trForReadOnlyField').hasClass('elem-disabled')) {
                                toggleVisibilityOnReadOnlyChange($('#readOnlyField'),$(fieldliiElement).find('.ExpandDiv'),false);
                            }
                        } else {
                            $('#readOnlyField').prop('checked', false);
                            //$('#readOnlyField').change();
                            $('#defaultValue').removeAttr('disabled');
                            if (isReference && !$('#trForReadOnlyField').hasClass('elem-disabled')) {
                                toggleVisibilityOnReadOnlyChange($('#readOnlyField'),$(fieldliiElement).find('.ExpandDiv'),true);

                            }
                        }
                        //Set default true for hide field if field type is reference and disable hide checkbox
                        if (isReference) {
                                           

                            $("#trForDefaultValue").find('td:last').find('input[type="hidden"]').attr('id', 'defaultValueHidden');
                            var refObjectname='';
                            refObjectname=$(fieldliiElement).find('div.fieldDiv input[type="textbox"]').attr('data-lobj');
                            if(!isNullOrEmpty(refObjectname))
                            {
                                //if(refObjectname=='Group'){
                                //    refObjectname='User';
                                // }

                                remoteGetSObjectListViewJS(refObjectname,fieldliiElement);
                            }
                        }
                        $('#errMsgForRequiredField').val(fieldrequiredmessage);

                        //limit check
                                     

                        //default value
                        var elementId = $("#defaultValue").attr('name');
                                    
                        //alert(reval);
                        var mainLabelElem = $('#defaultValue').parents('.fieldLi').find('div.labelDiv > label.ff-label');

                        // setDefaultValues(reval,this);

                        if (document.getElementById('defaultValue').addEventListener) {
                            document.getElementById('defaultValue').addEventListener("keyup", function() {
                                // document.getElementById(reval).value = $('#defaultValue').val();
                                setDefaultValues(elementId, this);
                                if ((!$('#defaultValue').val() instanceof Array)) {
                                    if ($('#defaultValue').val().trim() == "") {
                                        $(mainLabelElem).removeClass('grayLabel');
                                        /* $('.grayLabel').removeClass('grayLabel');*/
                                        /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                        $('#hideField').prop('checked', false);
                                        $('#hideField').attr('disabled', '');
                                        $('#hideField').next().css('pointer-events', 'none');
                                        $('#hideField').next().addClass('checkboxdisabled');
                                    } else {
                                        $('#hideField').removeAttr('disabled');
                                        $('#hideField').next().removeAttr('style');
                                        $('#hideField').next().removeClass('checkboxdisabled');
                                    }
                                }

                            }, false);
                        } else {
                            document.getElementById('defaultValue').attachEvent("onkeyup", function() {
                                // document.getElementById(reval).value = $('#defaultValue').val();
                                setDefaultValues(elementId, this);
                                if ((!$('#defaultValue').val() instanceof Array)) {
                                    if ($('#defaultValue').val().trim() == "") {
                                        $(mainLabelElem).removeClass('grayLabel');
                                        /* $('.grayLabel').removeClass('grayLabel');*/
                                        /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                        $('#hideField').prop('checked', false);
                                        $('#hideField').attr('disabled', '');
                                        $('#hideField').next().css('pointer-events', 'none');
                                        $('#hideField').next().addClass('checkboxdisabled');
                                    } else {
                                        $('#hideField').removeAttr('disabled');
                                        $('#hideField').next().removeAttr('style');
                                        $('#hideField').next().removeClass('checkboxdisabled');
                                    }
                                }

                            });
                        }

                        if (document.getElementById('defaultValue').addEventListener) {
                            document.getElementById('defaultValue').addEventListener("change", function() {
                                // addLabel(this);
                                setDefaultValues(elementId, this);

                                if ((!$('#defaultValue').val() instanceof Array) && $('#defaultValue').val().trim() == "") {

                                    $(mainLabelElem).removeClass('grayLabel');
                                    /* $('.grayLabel').removeClass('grayLabel');*/
                                    /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                    $('#hideField').prop('checked', false);
                                    $('#hideField').attr('disabled', '');
                                    $('#hideField').next().css('pointer-events', 'none');
                                    $('#hideField').next().addClass('checkboxdisabled');
                                } else {
                                    $('#hideField').removeAttr('disabled');
                                    $('#hideField').next().removeAttr('style');
                                    $('#hideField').next().removeClass('checkboxdisabled');
                                }

                            }, false);
                        } else {
                            document.getElementById('defaultValue').attachEvent("onchange", function() {
                                // addLabel(this);
                                                    
                                setDefaultValues(elementId, this);
                                if ((!$('#defaultValue').val() instanceof Array) && $('#defaultValue').val().trim() == "") {
                                    $(mainLabelElem).removeClass('grayLabel');
                                    /* $('.grayLabel').removeClass('grayLabel');*/
                                    /* removed by balinder (dec 10 2014)  to fix issue - empty value as default value in config panel causes all hidden fields to show up on form */
                                    $('#hideField').prop('checked', false);
                                    $('#hideField').attr('disabled', '');
                                    $('#hideField').next().css('pointer-events', 'none');
                                    $('#hideField').next().addClass('checkboxdisabled');
                                } else {
                                    $('#hideField').removeAttr('disabled');
                                    $('#hideField').next().removeAttr('style');
                                    $('#hideField').next().removeClass('checkboxdisabled');
                                }
                            });
                        }
                    }
                    else{
                        $("#trForDisplayType").hide();
                        $("#trForCurrencyLabelField").hide();
                        $("#trForLookupView").hide();
                        $("#trForUpsertField").hide();
                        $("#trForDefaultValue").hide();

                        $("#trForReadOnlyField").hide();
                    }

                    if (/lblliFILEUPLOADAREA/i.test(liId)) {
                        var fieldInputElement= $("#" + liId).find('.fieldDiv .ff-fileupload-drop-area')
                        var fieldrequiredmessage=$(fieldInputElement).attr('data-requiredmessage');
                        var isreq=$(fieldInputElement).attr('data-isrequired');
                        var isfieldhidden=$(fieldInputElement).attr('data-ishidden' );
                        var isfieldreadonly=$(fieldInputElement).attr('data-isreadonly');
                        var maxfiles=$(fieldInputElement).attr('data-maxfiles');
                        var allowedfiletypes=$(fieldInputElement).attr('data-allowedfiletypes');
                        var filename=unscapeXML($(fieldInputElement).attr('data-filename'));
                        var uploadtochatter=$(fieldInputElement).attr('data-uploadtochatter');

                        $("#trForLookupView").hide();
                        $("#trForUpsertField").hide();
                        $("#trForHideField").show();

                        $("#trForFileField").show();
                        $("#trForLimitField").show();
                        $("#trForUploadToChatterField").show();
                        $("#trForFileUploadFileName").show();

                        $("#limitValue").val(maxfiles);
                        $("#ffFileName").val(filename);

                        $("#selectedfiletypes").val(allowedfiletypes);
                        $(".fancyheader  span").html($("#selectedfiletypes").val());
                        if ($("#selectedfiletypes").val() == "") {
                            $(".fancyheader  span").html("All");
                        }
                        if ($("#selectedfiletypes").val().indexOf(".jpg") >= 0) {
                            $("#imgType").prop('checked', true);
                        }
                        if ($("#selectedfiletypes").val().indexOf(".doc") >= 0) {
                            $("#docType").prop('checked', true);
                        }
                        if ($("#selectedfiletypes").val().indexOf(".xls") >= 0) {
                            $("#xlsType").prop('checked', true);
                        }
                        if ($("#selectedfiletypes").val().indexOf(".zip") >= 0) {
                            $("#zipType").prop('checked', true);
                        }
                        if ($("#selectedfiletypes").val().indexOf(".pdf") >= 0) {
                            $("#pdfType").prop('checked', true);
                        }
                        if ($("#selectedfiletypes").val().indexOf(".mp3") >= 0) {
                            $("#multiType").prop('checked', true);
                        }

                        $("#errMsgForRequiredField").val(fieldrequiredmessage);

                        if (isreq==true || isreq=='true') {
                            $('#requiredChk').prop('checked', true);
                        }
                        else {
                            $('#requiredChk').prop('checked', false);
                        }
                        if (uploadtochatter==true || uploadtochatter=='true') {
                            $('#chkUploadToChatter').prop('checked', true);
                        }
                        else{
                            $('#chkUploadToChatter').prop('checked', false);
                        }
                        if (isfieldhidden == "true" || isfieldhidden == true)
                        {
                            setHideFieldForGeneralField(true);
                        }
                        else if (isfieldhidden == "false" || isfieldhidden == false)
                        {
                            setHideFieldForGeneralField(false);
                        }

                    } else {



                        if ($("#" + liId).find('.lookupInput').length > 0) {
                                                
                            $("#trForCurrencyLabelField").hide();     
                                                 
                            $("#trForLookupView").show();                                            
                        } else {
                            $("#trForUpsertField").show();  
                            $("#trForLookupView").hide();                      
                            $("#trForRequired").show();
                            $("#trForMsgField").show();
                            $("#trForHideField").show();
                            $("#trForReadOnlyField").show();                          
                        }
                        $("#trForDefaultValue").show();
                        $("#trForFileField").hide();
                        $("#trForLimitField").hide();
                        $("#trForUploadToChatterField").hide();
                        $("#trForFileUploadFileName").hide();
                                           
                        $("#" + liId).find('.expandDiv').find('.field-tooltip-block').remove();
                        /*   var tooltiphtml = $("<div  />").append($("#" + liId).find('.field-info-tooltip-text').clone()).html();
                            tooltiphtml="<span  class='field-tooltip-block'>"+tooltiphtml+"</span>";
                         $("#" + liId).find('#tblForRequirdBlock').before(tooltiphtml);-disable field info popup*/
                    }

                    if (/lblliCAPTCHA/i.test(liId)) {
                        $(".fieldTd").hide();
                        $("#trForHideField").show();
                        var fieldInputElement= $("#" + liId).find('.fieldDiv .ff-type-captcha')
                        var ishidden=$(fieldInputElement).attr('data-ishidden');
                        if(ishidden==true || ishidden=='true')
                        {
                            setHideFieldForGeneralField(true);
                        }
                        else
                        {
                            setHideFieldForGeneralField(false);
                        }
                        $("#tblForRequirdBlock").slideDown('300');
                    } else if (/lblliGENERALTEXT/i.test(liId)) {
                        $(".fieldTd").hide();

                        $("#trForHideField").show();
                        var fieldInputElement= $("#" + liId).find('.labelDiv .ff-label')
                        var ishidden=$(fieldInputElement).attr('data-ishidden');
                        if(ishidden==true || ishidden=='true')
                        {
                            setHideFieldForGeneralField(true);
                        }
                        else
                        {
                            setHideFieldForGeneralField(false);
                        }
                        $("#tblForRequirdBlock").slideDown('300');
                    } else if (/lblliIMAGE/i.test(liId)) {
                        $(".fieldTd").hide();
                        $("#trForHideField").show();
                        var fieldInputElement= $("#" + liId).find('.labelDiv .ff-label')
                        var ishidden=$(fieldInputElement).attr('data-ishidden');
                        if(ishidden==true || ishidden=='true')
                        {
                            setHideFieldForGeneralField(true);
                        }
                        else
                        {
                            setHideFieldForGeneralField(false);
                        }
                        $("#tblForRequirdBlock").slideDown('300');
                    } else {
                        $(".ExpandDiv").hide();
                        $(".ExpandDiv").slideDown('300', function() {
                            resetFloat();
                            goToNextTourStop();
                        });
                    }

                    if (/RecordTypeId/i.test(liId)) {
                        //$('#hideField').next().addClass('checkboxdisabled');
                        //$('#hideField').attr('disabled', true);
                        //$('#hideField').prop('checked', true);
                    }

                    $("#" + liId + " .deleteField").hide();
                    $("#" + liId + " .editImg").css('opacity', '1');
                    //$(".formUlLabel").sortable("option", "disabled", true);
                    //$("#parentUlForm").sortable("option", "disabled", true);
                    toggleSortableOption(true);
                } else {
                    /*if is section*/
                    var textLbl=$("#"+liId).find('> label').text();//$("#"+liId).find("#"+labelLIId).html();
                    $('#defaultSectionLabel').val(textLbl);
                    $(".sectionTd").show();
                    $(".sectionTd.secRepeat").hide();
                    //code to assign value to sectioncheckbox

                    if ($("#" + liId).parent().hasClass('hideFullSection')) {
                        $('#chkhideSectionField').prop('checked', true);

                    }
                    if($("#" + liId).parent().hasClass('section-repeat')){
                        $(".sectionTd.secRepeat").show();
                        populateRepeatableSectionConfigInfo($("#" + liId).parent());
                    }



                    $(".fieldTd").hide();
                                     
                    $("#" + dHide).hide();
                    $("#" + liId + " .editImg").css('opacity', '1');
                    $("#tblForRequirdBlock").slideDown('300', function() {
                        goToNextTourStop();
                    });
                    //$("#parentUlForm").sortable("option", "disabled", true);
                    toggleSortableOption(true);
                }


                $("#trForImageAlignment").hide();
                $("#trForImageWidth").hide();
                $("#trForImageHeight").hide();            

            }
            $("#hiddenLiId").val(liId);
            $("#hiddenLiLabelId").val($("#" + liId).find('label').attr('id'));

                        
        }

        if ($("#" + liId).find('.ExpandDiv').length > 0) {
            $("#" + liId).find('.editImg').unbind('mouseover');
            $("#" + liId).find('.editImg').unbind('mouseout');
            //$("#"+liId).find('.editImg').attr('src',editActiveImgUrl);
        } else {
            //$("#"+liId).find('.editImg').attr('src',editImgUrl);
            setHover();
        }
    }/* infoIsvalid if  ends*/
}/* openEditDialog ends*/
function setHideFieldForGeneralField(check)
{
    if(check)
    {
        $('#hideField').prop('checked', true);
    }
    else
    {
        $('#hideField').prop('checked', false); 
    }
}
function resetSelectValues(thisElement)
{
    if($(thisElement).is('select'))
    {
                                             
        var selectElement=$(thisElement).parents('.fieldDiv').find('select:first'); 
                                                
        if($(thisElement).parents('.fieldDiv').find('div.select2-container').length>0)
        {
            $(thisElement).parents('.fieldDiv').find('div.select2-container').remove();
        }
        if($(thisElement).parents('.fieldDiv').find('div.custom-flex-control-container').length>0)
        {
            $(thisElement).parents('.fieldDiv').find('div.custom-flex-control-container').remove();
        }
                                                
        var selectedValues=$(thisElement).val();
                                                
                                             
                                                
        //document.getElementById(reval).value = selectedValue;
        if((thisElement.type == 'select-one') ) {
            $(selectElement).find('option').removeAttr("selected");
            $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
            $(selectElement).find('option[value="'+selectedValues+'"]').prop('selected',true);
            var selectType=$('select.picklist-type-select').val();
            if(selectType=="picklist-combobox")
            {
                $(selectElement).select2();
            }
            else if(selectType=="picklist-radiobutton-vertical")
            {
                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'vertical'});
            }
            else if(selectType=="picklist-radiobutton-horizontal")
            {
                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'horizontal'});
            }
            else
            {
                /// default
            }
            //$(selectElement).select2("val",selectedValue);
        }
        else if((thisElement.type == 'select-multiple') ) 
        {
            $(selectElement).find('option').removeAttr("selected");
            if(selectedValues instanceof Array && selectedValues.length>0)
            {
                $.each( selectedValues, function( key, value ) {
                    $(selectElement).find('option[value="'+value+'"]').attr('selected','selected');
                    $(selectElement).find('option[value="'+value+'"]').prop('selected',true);
                });
            }
            else
            {
                $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                $(selectElement).find('option[value="'+selectedValues+'"]').prop('selected',true);
            }
            var selectType=$('select.multi-picklist-type-select').val();
            if(selectType=="multipicklist-multi-tags-check")
            {
                $(selectElement).select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
            }
            else if(selectType=="multipicklist-multi-tags")
            {
                $(selectElement).select2();
            }
            else if(selectType=="multipicklist-checkbox-vertical")
            {
                                                                 
                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'vertical'});
                                     
            }
            else if(selectType=="multipicklist-checkbox-horizontal")
            {
                                                                 
                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'horizontal'});
                                     
            }
            else
            {
                /// default
            }
        }
                                                    
    }
                                        
}
function setDefaultValuesForCustomPicklistDataSet(selectElement,selectedValues){
    var customDataSet=   getSafeBoolean($(selectElement).attr('data-customset'),false);
    if(customDataSet && $(selectElement).parent().find('.selectDataSet select').length>0){
        var dtSelectElement=$(selectElement).parent().find('.selectDataSet select');
        $(dtSelectElement).find('option').removeAttr("selected");
        if(selectedValues instanceof Array && selectedValues.length>0)
        {
            $.each( selectedValues, function( key, value ) {
                $(dtSelectElement).find('option[value="'+value+'"]').attr('selected','selected');
                $(dtSelectElement).find('option[value="'+value+'"]').prop('selected',true);
            });
        }
        else
        {
            $(dtSelectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
            $(dtSelectElement).find('option[value="'+selectedValues+'"]').prop('selected',true);
        }
    }
}
function setDefaultValues(reval,thisElement)
{
    if($(thisElement).is('select'))
    {
                                             
        var selectElement=$(thisElement).parents('.fieldLi').find('.fieldDiv').find('select:first'); 
                                                
        if($(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length>0)
        {
            $(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').remove();
        }
        if($(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length>0)
        {
            $(thisElement).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').remove();
        }
                                                
        var selectedValues=$('#defaultValue').val();
                                                
                                             
        setDefaultValuesForCustomPicklistDataSet(selectElement,selectedValues);
        console.log(' setDefaultValues'+thisElement.type);
                                                
        //document.getElementById(reval).value = selectedValue;
        if((thisElement.type == 'select-one') ) {
                                                        
            $(selectElement).find('option').removeAttr("selected");
            $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
            $(selectElement).find('option[value="'+selectedValues+'"]').prop('selected',true);
            var selectType=$('select.picklist-type-select').val();
            console.log(' selectType 1-'+selectType);
            if(selectType=="picklist-combobox")
            {
                console.log('  Picklist combobox 1');
                $(selectElement).select2();
            }
            else if(selectType=="picklist-radiobutton-vertical")
            {
                console.log('  Picklist radio button list 1');
                $(selectElement).SelectToRadio('destroy');
                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'vertical'});
            }
            else if(selectType=="picklist-radiobutton-horizontal")
            {
                console.log(' Picklist radio button list 2');
                $(selectElement).SelectToRadio('destroy');
                $(selectElement).SelectToRadio({controlType:'ff-ext-radio',alignment:'horizontal'});
            }
            else
            {
                console.log(' selectType-'+selectType);
            }
            //$(selectElement).select2("val",selectedValue);
        }
        else if((thisElement.type == 'select-multiple') ) 
        {
            /* selectedValues = [];
           $.each($("#defaultValue").find('option'), function(){            
                if($(this).attr('selected')=='selected'){ selectedValues.push($(this).attr('value'));}
           });*/
            $(selectElement).find('option').removeAttr("selected");
            if(selectedValues instanceof Array && selectedValues.length>0)
            {
                $.each( selectedValues, function( key, value ) {
                    $(selectElement).find('option[value="'+value+'"]').attr('selected','selected');
                    $(selectElement).find('option[value="'+value+'"]').prop('selected',true);
                });


            }
            else
            {
                $(selectElement).find('option[value="'+selectedValues+'"]').attr('selected','selected');
                $(selectElement).find('option[value="'+selectedValues+'"]').prop('selected',true);
            }
            var selectType=$('select.multi-picklist-type-select').val();
            $(selectElement).SelectToRadio('destroy');
            $(selectElement).removeClass('custom-select-offscreen');
            if(selectType=="multipicklist-multi-tags-check")
            {
                                                                 
                $(selectElement).select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
            }
            else if(selectType=="multipicklist-multi-tags")
            {
                                                                 
                $(selectElement).select2();
            }
            else if(selectType=="multipicklist-checkbox-vertical")
            {

                                                                
                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'vertical'});
            }
            else if(selectType=="multipicklist-checkbox-horizontal")
            {

                                                                
                $(selectElement).SelectToRadio({controlType:'ff-ext-checkbox',alignment:'horizontal'});
            }
            else
            {
                /// default
            }
        }
        else{
                                                        
        }
                                                    
    }
    else if($(thisElement).is(':checkbox')){
                                        
        if ($(thisElement).prop('checked')!='undefined' &&  $(thisElement).prop('checked')) {
            $(thisElement).parents('.fieldLi').find('.fieldDiv input[type="checkbox"]').prop('checked',true);
        }
        else{
            $(thisElement).parents('.fieldLi').find('.fieldDiv input[type="checkbox"]').prop('checked',false);
        }
    }
    else
    {
        document.getElementById(reval).value = $(thisElement).val();
        var attrDataFlexControl = $(thisElement).parents('.fieldLi').find('.fieldDiv').find('>input[type="textbox"]:first').attr('data-flexcontrol');
        if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
            switch (attrDataFlexControl) 
            {     
                case "integer-starrating":
                    var noofitems=$('#noOfStars').val();                    
                    var minlabel=$('#starMinLabel').val();
                    var maxlabel=$('#starMaxLabel').val();
                    setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,attrDataFlexControl);
                    break;
                case "integer-npsrating":
                    var minlabel=$('#npsMinLabel').val();
                    var middlelabel=$('#npsMiddleLabel').val();
                    var maxlabel=$('#npsMaxLabel').val();
                    setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,attrDataFlexControl);
                                                                                                                                
                    break;
                default:
                    setRatingInput($(thisElement).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',attrDataFlexControl);
                    break;
            }
        }
                                                
    }
}
function showDisplayAsControl(show,dataType)
{
                         
    console.log(' showDisplayAsControl - '+dataType);
    $("#trForDisplayType").find('.flex-ctrl-display-as').each(function (indx, flexControlDiv) {
        if(!$( flexControlDiv).hasClass('display-none'))
        {
            $( flexControlDiv).addClass('display-none');
        }
    });

    var showFlexControl=false;
    if(show)
    {
                                
        switch (dataType) {     
            case "INTEGER":
                showFlexControl=true;
                console.log(' Integer dataType-'+dataType);
                $("#trForDisplayType").find('.integer-display-type').removeClass('display-none');
                break;
            case "PICKLIST":
                showFlexControl=true;
                console.log('Picklist dataType-'+dataType);
                $("#trForDisplayType").find('.picklist-display-type').removeClass('display-none');
                break;
            case "MULTIPICKLIST":
                showFlexControl=true;
                console.log('MPicklist dataType-'+dataType);
                $("#trForDisplayType").find('.multi-picklist-display-type').removeClass('display-none');
                break;
            default:
                console.log('Default  dataType-'+dataType);
                break;
        }
    }
    if(show && showFlexControl)
    {
        $("#trForDisplayType").show();
                        
    }
    else
    {
        $("#trForDisplayType").hide();
    }
}
function changeDisplayType(elemSource){
    var selectedValue=   $(elemSource).val();

    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">   
       if (selectedValue != 'picklist-default' && selectedValue != 'multipicklist-default' && selectedValue != 'integer-default') {
           var controlName=$(elemSource).find('option:selected').text();
           if(isNullOrEmpty(controlName))
           {
               controlName='This display';
           }
           upgradeNowMessage(controlName+' type is only available in Professional, Enterprise and NativeCloud editions of Fast Forms.','','');
           $(elemSource).prop('selectedIndex',0);
       }
    </apex:outputText>

    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                        
       if($(elemSource).hasClass('integer-type-select'))
    {
        var parentRatingRangeBlock= $(elemSource).parent().find('.rating-range-block');
        if(selectedValue!='integer-default')
        {
                                                                
            $(parentRatingRangeBlock).find('div.rating-range').addClass('display-none');
            $(parentRatingRangeBlock).removeClass('display-none');
            if(selectedValue=='integer-npsrating')
            {
                $(parentRatingRangeBlock).find('div.star-rating-range').addClass("display-none");
                $(parentRatingRangeBlock).find('div.nps-rating-range').removeClass("display-none");
                $(parentRatingRangeBlock).find('div.nps-rating-range div.rating-range').removeClass('display-none');
                //$(parentRatingRangeBlock).find('.star-rating-range').removeClass('display-none');
                setUpFlexControl(selectedValue,elemSource);
            }
            else if(selectedValue=='integer-starrating')
            {
                $(parentRatingRangeBlock).find('div.nps-rating-range').addClass("display-none");
                $(parentRatingRangeBlock).find('div.star-rating-range').removeClass('display-none');
                $(parentRatingRangeBlock).find('div.star-rating-range div.rating-range').removeClass('display-none');
                setUpFlexControl(selectedValue,elemSource);
            }
        }
        else
        {
            $(parentRatingRangeBlock).addClass('display-none');
            setUpFlexControl(selectedValue,elemSource);
        }
                         
    }
else if($(elemSource).hasClass('picklist-type-select'))
    {
        setUpFlexControl(selectedValue,elemSource);
    }
else if($(elemSource).hasClass('multi-picklist-type-select'))
    {
        setUpFlexControl(selectedValue,elemSource);
    }

    resetSavedButton();
    mixpanel.track('Field display as option changed',{ "Field ID": $(elemSource).parent().attr('id')});
    var metadata = {
        field_name: $(elemSource).parent().attr('id'),
        display_as: selectedValue
    };
    sendInfoToIntercom('trackEvent', 'changed-field-display-as', metadata);
    </apex:outputText>            
}
                 
function setUpFlexControl(controlType,elemSource){
    var readonly=  $('#readOnlyField').prop('checked');
    var parentFieldLi= $(elemSource).parents('.fieldLi');
    switch (controlType) {     
        case "picklist-default":
            console.log(' Picklist default ');
            destroySelectToRadio($(parentFieldLi).find('.fieldDiv'));
            destroySelect2($(parentFieldLi).find('.fieldDiv'));  
            $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','picklist-default');
                                        
            break;
        case "picklist-combobox":
            console.log(' Picklist combobox ');
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),false,true,'','');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','picklist-combobox');
            $(parentFieldLi).find('.fieldDiv').find('select:first').select2();                
                                
            break;
        case "picklist-radiobutton-vertical":
            console.log(' Picklist radiobutton ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-radio','vertical'); 
            break;
        case "picklist-radiobutton-horizontal":
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-radio','horizontal');
                                                
            break;
        case "multipicklist-default":
            console.log(' multipicklist default ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'ff-ext-checkbox');
            $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-default');
            break;
        case "multipicklist-checkbox-vertical":
            console.log(' multipicklist checkbox ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-checkbox','vertical');
            break;
        case "multipicklist-checkbox-horizontal":
            console.log(' multipicklist checkbox ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,false,'ff-ext-checkbox','horizontal');
            break;
        case "multipicklist-multi-tags":
            console.log(' multipicklist tags ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'','');
            $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-multi-tags');
            $(parentFieldLi).find('.fieldDiv').find('select:first').select2();
            break;
        case "multipicklist-multi-tags-check":
            console.log(' multipicklist tags with checkbox ');
            destroySelect2($(parentFieldLi).find('.fieldDiv'));
            reinitializeSelectToRadioElement(controlType,$(parentFieldLi).find('.fieldDiv'),readonly,true,'','');
            $(parentFieldLi).find('.fieldDiv').find('select:first').attr('data-flexcontrol','multipicklist-multi-tags-check');
            $(parentFieldLi).find('.fieldDiv').find('select:first').select2({closeOnSelect:false,dropdownCssClass : 'ff-multi-checkbox'});
            break;  
        case "integer-default":
            console.log(' integer- default ');
            $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-default');
            setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',controlType);
            break;
        case "integer-npsrating":
            console.log(' integer-npsrating ');
                                        
                                        
            var minlabel=$('#npsMinLabel').val();
            var middlelabel=$('#npsMiddleLabel').val();
            var maxlabel=$('#npsMaxLabel').val();
            $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-npsrating');
            setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,controlType);
            break;
        case "integer-starrating":
            console.log(' integer-starrating ');
            var noofitems=$('#noOfStars').val();
                                        
            var minlabel=$('#starMinLabel').val();
            var maxlabel=$('#starMaxLabel').val();
            $(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first').attr('data-flexcontrol','integer-starrating');
            setRatingInput($(parentFieldLi).find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,controlType);
            break;
        default:
            console.log(' In default ');
            break;
    }
}
function changeInputRatingAttrs(elementSource)
{
    var controltype='';
    if($(elementSource).parent().hasClass('star'))
    {
                                        
        controltype='integer-starrating';
        var noofitems=$('#noOfStars').val();
                                        
        var minlabel=$('#starMinLabel').val();
        var maxlabel=$('#starMaxLabel').val();
        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,'',maxlabel,controltype);
    }
    else if($(elementSource).parent().hasClass('nps'))
    {
        controltype='integer-npsrating';
        var minlabel=$('#npsMinLabel').val();
        var middlelabel=$('#npsMiddleLabel').val();
        var maxlabel=$('#npsMaxLabel').val();
        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),noofitems,minlabel,middlelabel,maxlabel,controltype);
    }
    else
    {
        setRatingInput($(elementSource).parents('.fieldLi').find('.fieldDiv').find('input[type="textbox"]:first'),'','','','',controltype);
    }
    //mixpanel.track('Field rating attributes changed',{ "Field ID": $(elemSource).parent().attr('id')});
                                
    resetSavedButton();  

}
                         
/*Main method to intialize Star and NPS rating control
-It first detory anu existing custom display type Div and then initialize the input element with new control type 
*/   
function setRatingInput(inputElement,noofitems,minlabel,middlelabel,maxlabel,controltype){
                        
    <apex:outputText rendered="{!if(isFreemium  ,true,false)}">
                   resetFlexInputForFM(inputElement);
    </apex:outputText> 
    var readOnly=false;
    switch (controltype) {     
        case "integer-starrating":
            if(noofitems=='')
            {
                noofitems=5;
                $('#noOfStars').val('5');
            }
            $(inputElement).ffrating('destroy');
            $(inputElement).attr('data-flexcontrol',controltype);
            $(inputElement).attr('data-flex-min',1);
            $(inputElement).attr('data-flex-max',noofitems);
            $(inputElement).attr('data-flex-minlabel',minlabel);
            $(inputElement).attr('data-flex-maxlabel',maxlabel); 
            if ( $(inputElement).is('[readonly]') ) 
            { 
                readOnly=true;
            }
            $(inputElement).ffrating('show', {readonly:true,showSelectedRating:true});
            break;
        case "integer-npsrating":
            $(inputElement).ffrating('destroy');
            $(inputElement).attr('data-flexcontrol',controltype);
            $(inputElement).attr('data-flex-min',0);
            $(inputElement).attr('data-flex-middle',5);
            $(inputElement).attr('data-flex-max',10);
            $(inputElement).attr('data-flex-minlabel',minlabel);
            $(inputElement).attr('data-flex-middlelabel',middlelabel);
            $(inputElement).attr('data-flex-maxlabel',maxlabel); 

            if ( $(inputElement).is('[readonly]') ) 
            { 
                readOnly=true;
            }
            $(inputElement).ffrating('show', {readonly:true,isStar:false});
            break;
        default:
            $(inputElement).ffrating('destroy');
            if($(inputElement).hasClass('custom-flexcontrol-offscreen'))
            {
                $(inputElement).removeClass('custom-flexcontrol-offscreen');
            }
                                        
            break;
    }
                         
}
function resetFlexSelectByParentLiForFM(parentFieldLi)
{
    var inputElement=$(parentFieldLi).parents('.fieldLi');
    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='picklist-default')
    {
        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
        var lockHtml=getFreemiumHTML('Flexible controls are','freemium-edit-block','');

        $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
    }
}
function resetFlexSelectForFM(inputElement)
{
    var parentFieldLi=$(inputElement).parents('.fieldLi');
    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='picklist-default' && $(inputElement).attr('data-flexcontrol')!='multipicklist-default')
    {
        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
        var controlType=flexControlDisplayName($(inputElement).attr('data-flexcontrol'),'This display');
        var lockHtml=getFreemiumHTML(controlType+' type is','freemium-edit-block','');

        $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
        $(parentFieldLi).find('.editImg').remove();
    }
}
function resetFlexInputForFM(inputElement)
{
    var parentFieldLi=$(inputElement).parents('.fieldLi');
    if($(parentFieldLi).hasClass('sortableForRelFields1') && !isNullOrEmpty($(inputElement).attr('data-flexcontrol')) && $(inputElement).attr('data-flexcontrol')!='integer-default')
    {
        $(parentFieldLi).find('.editDelDiv .freemium-edit-block').remove();
        var controlType=flexControlDisplayName($(inputElement).attr('data-flexcontrol'),'This display');
        var lockHtml=getFreemiumHTML(controlType+' type is','freemium-edit-block','');

        $(parentFieldLi).find('.editDelDiv').prepend(lockHtml);
        $(parentFieldLi).find('.editImg').remove();
    }
}
function expandDiv(){
    //$('#FormatToolbar').css('height','170px');
}
function destroySelect2(parentSelectElement)
{
    $(parentSelectElement).find('select:first').select2('destroy'); 
    $(parentSelectElement).find('div.select2-container').remove();
    $(parentSelectElement).find('select:first').removeClass('select2-offscreen');
}
function destroySelectToRadio(parentSelectElement)
{
    $(parentSelectElement).find('select:first').SelectToRadio('destroy');  
    $(parentSelectElement).find('select:first').removeClass('custom-select-offscreen');
                        
}
function reinitializeRatingElement(inputElementParent)
{
                             
    var inputElement=$(inputElementParent).find('>input[type="textbox"]:first');   
                                    
    var attrDataFlexControl = $(inputElement).attr('data-flexcontrol');
    if (typeof attrDataFlexControl !== typeof undefined && attrDataFlexControl !== false && attrDataFlexControl!='') {
        switch (attrDataFlexControl) 
        {     
            case "integer-starrating":
                var noofitems=$(inputElement).attr('data-flex-max');
                var minlabel=$(inputElement).attr('data-flex-minlabel');
                var maxlabel=$(inputElement).attr('data-flex-maxlabel');

                setRatingInput($(inputElement),noofitems,minlabel,'',maxlabel,attrDataFlexControl);
                // $('.rating-range-block').removeClass('display-none');
                //   $('.rating-range-block .star-rating-range').removeClass('display-none'); 
                break;
            case "integer-npsrating":
                var minlabel=$(inputElement).attr('data-flex-minlabel');
                var maxlabel=$(inputElement).attr('data-flex-maxlabel');
                var middlelabel=$(inputElement).attr('data-flex-middlelabel');
                setRatingInput($(inputElement),'',minlabel,middlelabel,maxlabel,attrDataFlexControl);
                //$('.rating-range-block').removeClass('display-none');
                // $('.rating-range-block .nps-rating-range').removeClass('display-none'); 
                break;
            default:
                setRatingInput($(inputElement),'','','','',attrDataFlexControl);
                break;
        }
    }

}
function reinitializeSelectToRadioElement(selectedcontrolType,selectElementParent,readOnly,destroyOnly,displayType,controlAlignment)
{
    var controltype=selectedcontrolType;
    var displaytype=displayType;
    var controlalignment=controlAlignment;
                        
                        
    console.log(' reinitializeSelectToRadioElement controltype '+controltype);
    $(selectElementParent).find('select:first').SelectToRadio('destroy');  
    /* just remove custom style list if destroy doesn't work just in case*/
    $(selectElementParent).find('div.custom-flex-control-container').remove();
    $(selectElementParent).find('select:first').removeClass('custom-select-offscreen');
    if(!destroyOnly)
    {
        var flexcontrolattr=       $(selectElementParent).find('select:first').attr('data-flexcontrol');
        if(controltype=='')
        {
            controltype=  flexcontrolattr;// $(selectElementParent).find('select:first').attr('data-flexcontrol');
        }
        if(controlalignment=='')
        {
                                                 
            if(flexcontrolattr.indexOf('multipicklist-')>=0)
            {
                                                        
                controlalignment=controltype.replace('multipicklist-checkbox-','');
            }
            else
            {
                console.log(' ALIGNMENT changed-'+controltype);
                controlalignment=controltype.replace('picklist-radiobutton-','');
            }
        }
                                        
        if(displaytype=='' )
        {
                                                 
            if(flexcontrolattr.indexOf('multipicklist-')>=0)
            {
                displaytype='ff-ext-checkbox'; 
            }
            else
            {
                displaytype='ff-ext-radio'; 
            }
        }

        $(selectElementParent).find('select:first').SelectToRadio({controlType:displaytype,alignment:controlalignment,readonly:readOnly});
        $(selectElementParent).find('select:first').attr('data-flexcontrol',controltype);
    }
}
function callDiv(){
    //$('#FormatToolbar').css('height','101px');
}
function formatIframeLoaded(containerId, lblId,isFieldLabel){
    var backColor = '\'#e6ecef !important;\'';
    var textLbl=$("#"+containerId).find("#"+lblId).html();
    /*window.frames['FormatToolbar'].document.getElementById('editor').innerHTML=textLbl;
    if(isShowLabel){
            //$(window.frames["FormatToolbar"].document).find('.fieldLabel').after('<label style="padding-left:20px;color: #616161;font-size: 11px;"><i>Field will not be visible to user</i></label>');
            window.frames['FormatToolbar'].document.getElementById('hideText').innerHTML  = '<i>Field will not be visible to user</i>';
    }*/
}         
//save label with field default values and required,hide values
function addLabel(elemSource) {
    var parentLi=$(elemSource).parents('.fieldLi');
    updateDefaultConfig(parentLi,false);
}
function updateFieldConfigByElem(elemSource) {
    var parentLi=$(elemSource).parents('.fieldLi');
    updateDefaultConfig(parentLi,true);
}
/* function addLabel() { 
var fieldLabelHtml =$('#defaultLabel').val(); 

}*/
                
function addNewLiItem(){
    //calculate Li Index             
}
function addNewSectionDetail(){
                       
}
                 
                 
                 
function openNewButtonDialog(){
    if(footerBtnHTMLPopulated==false)
    {
        $('#hiddenLiId').val('');
        //submit Button text
        $("#btnTxt").val('Send') ;
        $("#txtbxSubmitButtonLabel").val('Send') ;
        $("#btnUrl").val('');
        $("#txtareaThankyoumsg").val("Thank you for your submission!");
        $("#tblForRequirdBlock").hide();
        $("#btnUrl").val('') ;
        $("#btnFootnote").val('- required');
        $("#submitBehaviorOptions").val('Display a message') ;
        $("#submitBehaviorOptions").change();
    }
}
var isbtnSection=true;
                
                 
function itemUsedInRule(itm){
    console.log(' Item to be deleted- '+itm);
    var rulestr=isRuleExistForId(itm);
    var   returnflag=false;
    if(rulestr!='undefined' && rulestr!='')
    {
        returnflag=true;
    }
    return returnflag;/*(lstRuleFields.indexOf(itm) > -1 );*/
}
                 
function calcualteFormInformation(){
    var countOfButtons = $("#mainMultiPageWrapper").find('.Ulbtn').length;
    var countOfSection = $("#mainMultiPageWrapper").find('.formFieldUl').length;
    var countOfFields =  $("#mainMultiPageWrapper .formFieldUl").find('.fieldLi').length;
    var buttonUrlHtml = '';
    var salesforceObjects = '';
    $("#parentUlForm").find('.Ulbtn').each(function(){
        if(buttonUrlHtml != '')
            buttonUrlHtml += '<br/>';
        buttonUrlHtml +=  $(this).find('input[type="button"]').attr('btnUrl');
    });
    var strFieldId = '';
    //Add div
    $("#mainMultiPageWrapper .formFieldUl").find('.fieldLi div div').each(function(){
        if($(this).hasClass('deleteField') == false){
            strFieldId = $(this).children().attr('id').split('.')[0];                   
            if(salesforceObjects.indexOf(strFieldId)== -1){
                if(salesforceObjects != '')
                    salesforceObjects += ', ';
                salesforceObjects += strFieldId;
            }
        }   
    });             
    $('#countOfButtons').text(countOfButtons);
    $('#countOfSection').text(countOfSection);
    $('#countOfFields').text(countOfFields );
    $('#buttonUrlHtml').html(buttonUrlHtml);
    $("#countOfRules").text('0');
    $('#salesforceObjects').text(salesforceObjects);
}
function ruleEdit(ruleId){
    var ruleIndex = ruleId.replace('ruleEdit','');
    $("#hiddenSelectedRuleId").val(ruleIndex);
    $("#selectOptionsIf").val($("#selectOptionsIf"+ruleIndex).val());
    $("#selectOptionsIfFields").val($("#selectOptionsIfFields"+ruleIndex).val());
    $("#selectOptionsIfOperators").val($("#selectOptionsIfOperators"+ruleIndex).val());
    $("#ifFieldValue").val($("#ifFieldValue"+ruleIndex).val());
    $("#selectOptionsThenOperators").val($("#selectOptionsThenOperators"+ruleIndex).val());
    $("#selectOptionsFormattedLike").val($("#selectOptionsFormattedLike"+ruleIndex).val());
    $("#errorMsgWhenRuleNotFollowed").val($("#errorMsgWhenRuleNotFollowed"+ruleIndex).val());
    $( '#rulesDialog' ).dialog( 'open' );

}
function deleteSignatureField(elemSource,isAutoSave)
{
    var elemSourceParent=$(elemSource).parents('.fieldLi');
    deleteSignatureFieldByParentLi(elemSourceParent,isAutoSave)
}
function deleteSignatureFieldByParentLi(elemSourceParent,isAutoSave){
    /* if(!overRideCheckRuleObject && (ruleObjectsData==null || ruleObjectsData.length==0 )){
     checkRuleBeforeDeleteElement(elemSourceParent,isAutoSave);
   }else{*/
    var signatureId=$(elemSourceParent).attr('id');
    if(!isNullOrEmpty(signatureId) && itemUsedInRule(signatureId.replace('lblli','')))
    {
        showError("<div class='primary'>This field is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else{
        $(elemSourceParent).fadeOut('slow');
        $(elemSourceParent).remove();
 
        resetPDFRequiredOption(true);
        if(isAutoSave){
            isChangesMadeInForm =true;
            autosaveTriggered();
        }
    }
    //}
}
function resetPDFRequiredOption(isDeletefield)
{
    var countCheck=1;
    if(isDeletefield)
    {
        countCheck=0;
    }
    else
    {
        $('.chkbxPDFConfirmationRecord').prop('checked','checked');
    }
    if($('#mainMultiPageWrapper .formFieldUl .fieldLi .eSignatureFieldDiv').length==countCheck)
    {
        resetPDFRequired(!isDeletefield);
    }
   
 
}

function isValidChild(elem)
{
    var returnflag=false;
    $('.list-toggle-div-wrap').each(function(indx,wrapperDiv){
                            
        if($(wrapperDiv).attr('data-childclass') !=undefined && $(wrapperDiv).attr('data-childclass') !="" && $(elem).attr('id').lastIndexOf($(wrapperDiv).attr('data-childclass'))==$(elem).attr('id').length-1){
            returnflag=true;
        }
    });
    return returnflag;
}
// Delete Field from form
function fetchNewHTMLValue(val){
    var objs = ['li','label'];
    for(var i=0;i<=objs.length-1;i++){
                             
        if($(val).find(objs[i]).attr('id').length >0 && isValidChild($(val).find(objs[i]))){
                                
            var newId = $(val).find(objs[i]).attr('id');
            console.log(' newId '+newId);
            $(val).find(objs[i]).attr('id',newId.substr(0,newId.length-1));
        }
    }
    $(val).find('.fieldDiv .ff-input-type,.fieldDiv .ff-select-type,.fieldDiv .ff-checkbox,.fieldDiv .ff-textarea').each(function (index) {
        if($(this).attr('id').length >0 && isValidChild($(this))){
            var newId = $(this).attr('id');
            console.log(' newId 1-1 '+newId);
            $(this).attr('id',newId.substr(0,newId.length-1));
        }
                        
    });
    if($(val).find('.fieldDiv').children().attr('id') && $(val).find('.fieldDiv').children().attr('id').length >0 && isValidChild($(val).find('.fieldDiv').children())){
        var newId = $(val).find('.fieldDiv').children().attr('id');
        $(val).find('.fieldDiv').children().attr('id',newId.substr(0,newId.length-1));
    }
    $(val).find('input[type="hidden"]').each(function(e){
        if($(this).attr('id').length >0 && isValidChild($(this))){
            var newId = $(this).attr('id');
            console.log(' newId 3 '+newId);
            $(this).attr('id',newId.substr(0,newId.length-1));
        }
    });
    $(val).find(".listName").remove();

    console.log(' HTML______ '+$(val).html());
    return $(val).html();
}
                
function sortingFieldLabel(){
    var labelVals = [];
    var lblLIValues = $("#sortableForRelFields1").find('li.lbl').remove();
    var btnLIValues = $("#sortableForRelFields1").find('li.Ulbtn').remove();
    var labelWithLiMap = new Object();
    $("#sortableForRelFields1").find('li').each(function(){
        if($(this).hasClass('lbl')==false){
            labelVals.push($(this).find("div:visible").attr('lblname'));
            labelWithLiMap[$(this).find("div:visible").attr('lblname')] = $(this).clone().wrap('<p>').parent().html();
        }
    });
    labelVals.sort();
    $("#sortableForRelFields1").find('li').remove();
    for(var i = 0, l = labelVals.length; i < l; i++){
        $("#sortableForRelFields1").append(labelWithLiMap[labelVals[i]]);
    }
    $("#sortableForRelFields1").append(lblLIValues);
    $("#sortableForRelFields1").append(btnLIValues);           
    makeJqueryTooltip();            
}
// Delete Field from form
function deleteField(elemSource,isAutoSave)
{
    var liElement=$(elemSource).parents('.fieldLi');
    deleteFieldByParentFieldLi(liElement,isAutoSave);
}
function deleteFieldByParentFieldLi(liElement,isAutoSave){
    /* if(!overRideCheckRuleObject && (ruleObjectsData==null || ruleObjectsData.length==0 )){
checkRuleBeforeDeleteElement(liElement,isAutoSave);
}else{*/
    var delId =$(liElement).attr('id');
    clearFieldInfoPopupContent(liElement);
    var fieldId =getFormattedElemId(liElement);
    if (itemUsedInRule(fieldId)){
        showError("<div class='primary'>This field is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    } else {        
        var sortableListClass='';
        for(indx=1;indx<=25;indx++){
            var classname='sortableForRelFields'+indx;
            if($(liElement).hasClass(classname))
            {
                sortableListClass=classname;
            }
        }
                                 
        $(liElement).find('div:first').find('.requiredSpan').remove();
        /*reset filedli id and input field id- specially for child record fields*/
        var mainFieldElement= $(liElement).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea'); 
        $(mainFieldElement).each(function (indx, inputElem) {
            var elemid=$(inputElem).attr('id');
            if(!isNullOrEmpty(elemid)){
                var newElemIdWOCode=replaceAllColorCodeFromId(elemid);
                if(!isNullOrEmpty(newElemIdWOCode)){
                    $(inputElem).attr('id',newElemIdWOCode);
                    var newElemIdWOCodenDot=newElemIdWOCode.replace(/\./g,'');
                    $(liElement).attr('id','lblli'+newElemIdWOCodenDot);
                    var originalLabelName= $(liElement).find('div.labelDiv label.ff-label').attr('data-text');
                    if(!isNullOrEmpty(originalLabelName)){
                        $(liElement).find('.labelDiv .ff-label').text(originalLabelName);
                    }
                    else{
                        originalLabelName= $(liElement).find('div.labelDiv').attr('lblname')
                        if(!isNullOrEmpty(originalLabelName)){
                            $(liElement).find('.labelDiv .ff-label').text(originalLabelName);
                        }
                    }}
            }
        });
        /*reset filedli id and input field id-end*/
        if($(liElement).find('.selectDataSet').length>0){
            $(liElement).find('.selectDataSet').remove();
        }

        RemoveAllClassColorCodes(liElement);

                                          
        $(liElement).find('.obj-info').remove();
        $(liElement).find('.ExpandDiv').remove();
        $(liElement).find('div.fieldDiv').hide();    
        $(liElement).find('select,input').val('');
        $(liElement).find('textarea').text('');
        $(liElement).find('label').removeClass('grayLabel');
        $(liElement).find('.labelDiv .ff-required-mark').remove();
        $(liElement).find('.labelDiv .ff-label').removeAttr('ondblclick');
        $(liElement).find('select,input,textarea').removeAttr('value');
        $("#trForDefaultValue").find('td:last').find('input').attr('id','defaultValue');
        $("#trForDefaultValue").find('td:last').find('textarea').attr('id','defaultValue');
        $(liElement).find('input[type="hidden"]').val('');
        $(liElement).find('.editDelDiv').remove();             
        $(liElement).addClass("fieldLi ui-state-default");
        $(liElement).removeAttr('ondblclick');
        $(liElement).find('.fieldDiv .ff-percent').remove();
        $(liElement).removeAttr('style');

 
                                
        try{
                                
            $(liElement).find('.custom-flex-control-container').next().removeClass('custom-select-offscreen');
            $(liElement).find('.custom-flex-control-container').next().removeClass('custom-flexcontrol-offscreen');
            $(liElement).find('.select2-container').next().removeClass('select2-offscreen');
            $(liElement).find('.custom-flex-control-container').next().attr('data-flexcontrol','');

        }
        catch(err)
        {}
        $(liElement).find('.select2-container').remove();
        $(liElement).find('.custom-flex-control-container').remove();
                                
        //var deletedLiHtml = $("#"+delId).clone().wrap('<p>').parent().html();
        var deletedLiHtml = fetchNewHTMLValue($(liElement).clone().wrap('<p>').parent());
                                

        $(liElement).remove();
        if (/lblliIMAGE/i.test(delId)){
            $(liElement).removeClass("fieldLiImage");
            $(liElement).removeClass("fieldLiImageActive");
        }
        else if(/lblliFILEUPLOADAREA/i.test(delId) || /lblliGENERALTEXT/i.test(delId) || /lblliCAPTCHA/i.test(delId)){
                                        
        }else{                
                                         
            if($("#"+sortableListClass).length>0)
            {
                $("#"+sortableListClass).append(deletedLiHtml);
                sort(sortableListClass);
            }
            //Bind Events
            activeClick();
        }
                                                     
                                
        if(isAutoSave)
        {
            isChangesMadeInForm = true;
            autosaveTriggered();
        }
    }
    // }
}
                 
//Delete Section
function deleteSection(delElem,isAutoSave){             
    // Check section containing a required field.   
    var fieldsUsedInRule = false;
    var isSectionContainsReqField = false;
    var sectionUsedInRule = itemUsedInRule($(delElem).parent().parent().attr('id'));
    var lblId = '';
    $(delElem).parents('ul.formSectionUl').find(".formFieldUl .fieldLi").each(function(indx,fieldLiElem){
        var inputElem=$(fieldLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,input[type=hidden],>textarea');
                                         
        var fieldId =getFormattedElemId(fieldLiElem);
        if (itemUsedInRule(fieldId))
        {
            fieldsUsedInRule = true;     
        }
                                
        if(getSafeBoolean($(inputElem).attr('data-isrequired'), false))
        { isSectionContainsReqField = true;
        }
    });
    if (sectionUsedInRule){
        showError("<div class='primary'>This section is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else if (fieldsUsedInRule){
        showError("<div class='primary'>This section contains fields that are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else if(isSectionContainsReqField){
        showError("<div class='primary'>The section you are trying to delete has a required field inside of it.</div><br /> <br /><div class='secondary'>To delete this section, move the required field to a different section and try again.</div>");
    }else {                
        $(delElem).parents('ul.formSectionUl').find(".formFieldUl .fieldLi").each(function(indx,fieldLiElem){
            var fieldLiId=$(fieldLiElem).attr('id');//deleteSignatureField
            if(!isNullOrEmpty(fieldLiId) && fieldLiId.indexOf('lblliESIGNATURE')>=0){
                // deleteSignatureField($(fieldLiElem).find('.deleteField'),false);
            }
            else if(!isNullOrEmpty(fieldLiId) && fieldLiId.indexOf('lblliFASTFORMSPAYMENT')>=0){
                deletePaymentFieldByParentFieldLi(fieldLiElem,false);
            }
            else{
                deleteFieldByParentFieldLi(fieldLiElem,false);
            }
        });
        $(delElem).parents('.formSectionUl').remove();
        if(isAutoSave)
        {
            isChangesMadeInForm = true;
            autosaveTriggered();
        }
    }
}
                 
//Delete Section
function deleteSectoionLabel(delId){
    $('#'+delId).parent().parent().remove();
    resetSavedButton();
                       
}
                 
function addNotificatonEmail(emailValue){
    $(".tdForNotification").append('<div class="notificationDiv"><input type="text" class="notificationEmail"  value="'+ emailValue+'"/></div>');
    if($(".notificationDiv").length>1)
        $("#removeImg").show();
    else
        $("#removeImg").hide();
}
                 
function removeNotificatonEmail(){
    $(".tdForNotification").find('.notificationDiv:last').remove();
    if($(".tdForNotification").find('.notificationDiv').length ==1)
        $("#removeImg").hide(); 
}
                 
                
                 
                 
//Close Form and Asked confirmation that you want to close form without save or not.
function closeForm(){           
    if(isChangesMadeInForm == true){
        $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to close this form without saving?</div></div>");
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Close",
            height: "auto",
            width: 413,
            position: 'center',
            buttons: {
                "Close": function () {
                    $(this).dialog('close');
                    $('.button').removeClass('active');          
                    $('#tabList tr td').find('.button').each(function(){ 
                        if($(this).text() == 'Close'){
                            $(this).addClass('active');
                        }              
                    });
                    callback(true);
                },
                "Cancel": function () {
                    $(this).dialog('close');
                    callback(false);
                }
            },
            open: function( event, ui ) {
                $('.ui-dialog :button').blur();
            }
        });
                                
        function callback(value) {
            if (value) {
                ffNavigateToUrl( '/apex/FormMenu',SFOrgPrefix);
                                                
            }else {
                return false;
            }
        }
    }else{
        ffNavigateToUrl( '/apex/FormMenu',SFOrgPrefix);
    }
    hideSection();
}
//hide arrow section 
function hideSection(){
    /*  $(".dragDropInfoDiv").hide();
      $(".arrowUpper").hide();
      $(".addNewSection").css('margin-top','0%');*/
}
function resetMultiPageSortableCall(){
    var item1=false;
    var item2=false;
    var item3=false;
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
    item1=true;
    </apex:outputText>
    <apex:outputText rendered="{!if(packageTier == 'Enterprise' || packageTier == 'NativeCloud' || packageTier == 'Professional',true,false)}">
    item2=true;
    </apex:outputText>
    <apex:outputText rendered="{!if(packageTier == 'Enterprise' || packageTier == 'NativeCloud',true,false)}">
    item3=true;
    </apex:outputText>
    resetMultiPageSortable(item1,item2,item3);
    objectInfoDisplay();
}
                
function showFirstTimePublish(){
    var urltopublishpage='{!$Site.BaseUrl}/apex/FormPublish?ffid={!$CurrentPage.parameters.Id}';
    $("#SaveFormInfoDialog").html("<div class='dialogHeader'><div class='dialogIcon dialogIconOK'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Your form has been saved successfully!</div><br /><br /><div class='secondary'>Ready to publish? Click on the 'Go to Publish Options' below to publish your form.</div></div>");
    // Define the Dialog and its properties.
    $("#SaveFormInfoDialog").dialog({
        resizable: false,
        modal: true,
        title: "Save Info",
        height: "auto",
        width: 413,
        buttons: {
            "Cancel": {
                click: function () {
                                                
                    ffNavigateToUrl( urltopublishpage,SFOrgPrefix);
                },
                text: 'Go To Publish Options',
                'class': 'vabutton1'
            },
            "OK": {
                click: function () {
                    $(this).dialog("close");
                },
                text: 'Stay in Form Editor',
                'class': 'vabutton2'
            }
        },
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();           
}
                 
             
function showError(msg){
    $("#dialog-error").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'>"+msg+"</div>");
    // Define the Dialog and its properties.
    $("#dialog-error").dialog({
        resizable: false,
        modal: true,
        title: "Save Info",
        height: "auto",
        width: 413,
        buttons: {
            "OK":{click :function () {
                $(this).dialog('close');
            },
                text: 'OK',
                'class': 'vabutton1'
            }
        },
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();
}
function showUpgradePrompt(msg){
    $("#dialog-error").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>"+msg+"</div></div>");
    // Define the Dialog and its properties.
    $("#dialog-error").dialog({
        resizable: false,
        modal: true,
        title: "Save Info",
        height: "auto",
        width: 413,
        buttons: {
            "OK":{
                click: function() {
                    window.open('http://visualantidote.com/fastforms#Subscribe', '_blank');
                },
                text: 'Upgrade Now!',
                'class': 'vabutton1'
            },
            "No thanks":{
                click: function () {
                    $(this).dialog('close');
                },
                text: 'No thanks',
                'class': 'vabutton2'
            }
        },
                                 
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();
}        
                
                
                
function setHeightOfEditorInFieldDiv(){ 
}
             
function closePrivewDialog(){
    $('#preview').dialog('close');           
    $("#removeFiles").remove();
    $('.button').removeClass('active'); 
}
             
function closeSavingDialog(){
    $( '#dialogSucess' ).dialog( 'close' );
}
             
function closeErrorDialog(){
    $( '#dialogSucess' ).dialog( 'close' );
}
             
function Blend(a, b, alpha) {

    var aa = [
                parseInt('0x' + a.substring(1, 3)), 
                parseInt('0x' + a.substring(3, 5)), 
                parseInt('0x' + a.substring(5, 7))
    ];
                
    var bb = [
                parseInt('0x' + b.substring(1, 3)), 
                parseInt('0x' + b.substring(3, 5)), 
                parseInt('0x' + b.substring(5, 7))
    ];
                
    r = '0' + Math.round(aa[0] + (bb[0] - aa[0])*alpha).toString(16);
                
    g = '0' + Math.round(aa[1] + (bb[1] - aa[1])*alpha).toString(16);
                
    b = '0' + Math.round(aa[2] + (bb[2] - aa[2])*alpha).toString(16);
                
    return '#'
                + r.substring(r.length - 2)
                + g.substring(g.length - 2)
                + b.substring(b.length - 2);
}
            
function fadeText(cl1,cl2,elm){
    var t = [];
    var steps = 100;
    // you can customize
    var delay = 1000;
    // you can customize
    for (var i = 0;i<steps;i++) {
        (function(j) {
            t[j] = setTimeout(function() {
                var a  = j/steps;
                var color = Blend(cl1,cl2,a);
                elm.style.backgroundColor = color;
            }, j*delay/steps);           
        })(i);
    }
    return t; 
}
                
function stopfade(t){
    for (i in t) {
        clearTimeout(t[i]);
    }       
}
function hasRequiredBlankHiddenField(){
    var returnFlag=false;
    $('#mainMultiPageWrapper .fieldLi').each(function(indx,fieldLiItem){
        var dataType=$(fieldLiItem).attr('data-otype');
        if(!isNullOrEmpty(dataType) && $.inArray(dataType,OSDataTypesArr)>=0){
            var mainFieldElement= $(fieldLiItem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');
            var isreq=getSafeBoolean($(mainFieldElement).attr('data-isrequired'),false);
            var ishidden=getSafeBoolean($(mainFieldElement).attr('data-ishidden'),false);
            if(isNullOrEmpty($(mainFieldElement).val()) && isreq && ishidden){
                returnFlag=true;
                return false;
            }
        }
    });  
    return returnFlag;                
}
                 
function publishDraft(elemSource){
                        
    mixpanel.track('Publish draft clicked');
    sendInfoToIntercom('trackEvent', 'published-draft');
    if ($("#btnSaved").hasClass('va-disabled'))
    {
        remoteIsFormPublishedJS();
                       
    } else {
        if(hasRequiredBlankHiddenField()){
            $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Warning: Your form has one or more hidden required fields without a default value set.<br /><br />Are you sure you want to continue?<br/><br /></div><div class='secondary'>If you're populating these fields by conditional rules or prefill, you can ignore this message.</div></div>");
                       
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                title: "Close",
                height: "auto",
                width: 413,
                position: 'center',
                buttons: {                                        
                    "Yes":{
                        click: function () {                                              
                            $(this).dialog('close');
                            _CallBackToPublish(true);
                        },
                        text: 'Continue',
                        'class': 'vabutton1'
                    },
                    "No":{
                        click: function () {                                                                                              
                            $(this).dialog('close');
                            _CallBackToPublish(false);
                        },
                        text: 'Cancel',
                        'class': 'vabutton2'
                    } 
                },
                open: function( event, ui ) {
                    $('.ui-dialog :button').blur();
                }
            });
            function _CallBackToPublish(callBackFlag){
                if(callBackFlag){ 
                    remoteValidatePrefillInfoJS(elemSource);
                }
                else{
                    $(".btnPublishedSaved").text('Publish Draft');
                    $(".btnPublishedSaved").removeClass('va-disabled');                                                
                    return false;
                }
            }
        }
        else{
            remoteValidatePrefillInfoJS(elemSource);
        }    
    }
}
function isSaveForLaterEnabled(){
    var isSFLEnabled=false;
    if($('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner .fc-multi-page-item .Ulbtn .ff-btn-save').length>0 ){
        isSFLEnabled=getSafeBoolean($('#mainMultiPageWrapper').find('.form-canvas-multi-page-inner .fc-multi-page-item .Ulbtn .ff-btn-save').first().attr('data-saveenabled'),false);
    }
    return isSFLEnabled;
}
function validateSaveForLaterandThenPublish(elemSource){
                  
    if(getSafeBoolean(saveForLaterWarningFlagDisable,false)){
        callToPublishDraft();
    } 
    else{
        if(isSaveForLaterEnabled()){
                   
            $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Warning: You have enabled  \'Save for later\' for your form. Any changes you make may impact any saved submissions for this form.<br /><br />Are you sure you want to continue?<br/><br /></div><div class='secondary'><input id='chkbxSaveForLaterWarningFlag' type='checkbox'/><label for='chkbxSaveForLaterWarningFlag'>Don't show me this message again</label></div></div>");
            // Define the Dialog and its properties.
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                title: "Close",
                height: "auto",
                width: 413,
                position: 'center',
                buttons: {                                        
                    "Yes":{
                        click: function () {                                              
                            $(this).dialog('close');
                            _CallBackToPublish(true);
                        },
                        text: 'Publish',
                        'class': 'vabutton1'
                    },
                    "No":{
                        click: function () {                                                                                              
                            $(this).dialog('close');
                            _CallBackToPublish(false);
                        },
                        text: 'Cancel',
                        'class': 'vabutton2'
                    } 
                },
                open: function( event, ui ) {
                    $('.ui-dialog :button').blur();
                }
            });
            function _CallBackToPublish(callBackFlag){
                if(callBackFlag){
                    if($('#chkbxSaveForLaterWarningFlag').is(':checked'))
                    {
                                                       
                        saveForLaterWarningFlagDisable=true;
                    }
                    else{
                        console.log(' Warning enable');
                        saveForLaterWarningFlagDisable=false; 
                    }
                    callToPublishDraft();
                }
                else{
                    $(".btnPublishedSaved").text('Publish Draft');
                    $(".btnPublishedSaved").removeClass('va-disabled');                                                
                    return false;
                }
            }
        }else{
            callToPublishDraft();
        }
    }
}
function callToPublishDraft(){
    $("#btnSaved").addClass('va-disabled');
    if(isTokenNeedReset && !isFormNative && !resetFastFormsToken){
        resetFastFormsToken=true;
        callToPublishDraft();
        /*Reauthorize app check starts*/
        /* native app change
         $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconInfo'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>You are going to authorize Fast Forms server to submit your form\'s data to your Salesforce instance.<br /><br /></div><div class='secondary'>Are you sure you want to continue?<br/></div></div>");
          // Define the Dialog and its properties.
          var dialogOptions=commonDialogOptions;
          dialogOptions["buttons"]={                                        
                                      "Yes":{
                                              click: function () {                                              
                                                  $(this).dialog('close');
                                                  _CallBackToPublish(true);
                                              },
                                              text: 'Authorize',
                                              'class': 'vabutton1'
                                      },
                                      "No":{
                                              click: function () {                                                                                              
                                                  $(this).dialog('close');
                                                  _CallBackToPublish(false);
                                              },
                                              text: 'Cancel',
                                              'class': 'vabutton2'
                                      } 
                              };
                      $("#dialog-confirm").dialog(dialogOptions);
                    function _CallBackToPublish(callBackFlag){
                      if(callBackFlag){
                        resetFastFormsToken=true;
                        callToPublishDraft();
                      }
                      else{
                        $(".btnPublishedSaved").text('Publish Draft');
                        $(".btnPublishedSaved").removeClass('va-disabled');                                                
                          return false;
                      }
                    }
                    */
        /*Reauthorize app check ends*/
    }
    else
    {                         
        if(isFFValid){   
            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
           lookupFieldConfirmAndPublish();
            </apex:outputText>                            
            <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">                                
            if(!(isFirstOperandValid() && ifThenBlockIsValid()))
            {
                ruleValidationCheck();  
            } 
        else
        {
                        lookupFieldConfirmAndPublish();
        }   
        </apex:outputText> 
    }
else{
                  showErrorMessage("An error occurred when attempting to publish your form.","Please refresh your page and try again. If the issue persists, contact the Fast Forms Support Team at support@fastforms.io for assistance.");
    messageLogToIntercom('Error occured in function-callToPublishDraft');
}
}
}
/* function reauthorizeFastForms()
 { 
Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteReauthorizeFastForms)}',
function(result, event) { 
    
      if (event.status) {
       
        if(result!=null && result!==undefined)
        {
          isTokenNeedReset=result;
          resetFastFormsToken=true;
          callToPublishDraft();
        }
        else
        {
          $("#btnSaved").removeClass('va-disabled');
            console.log(' reauthorizeFastForms is null');
        }
      } else {
        $("#btnSaved").removeClass('va-disabled');
        console.log('reauthorizeFastForms Fail-'+result);
      }
   
},
{ buffer: true, escape: true, timeout: 30000 }
);
 }*/
function ruleValidationCheck()
{
    $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>You have one or more incomplete rules. Do you want to publish your draft anyway?</div></div>"); 
                         
    // Define the Dialog and its properties.
    $("#dialog-confirm").dialog({
        resizable: false,
        modal: true,
        title: "Save",
        height: "auto",
        width: 413,
        buttons: {                                                            
            "Yes":{
                click: function () {
                    $(this).dialog('close');                                               
                    callback(true);
                },
                text: 'Yes',
                'class': 'vabutton1'
            },
            "No":{
                click: function () {
                    $(this).dialog('close');
                    callback(false);
                },
                text: 'No',
                'class': 'vabutton2'
            }               
        },                  
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();
    $('#dialog-confirm').dialog('option', 'position', 'center');
    function callback(value) {
        if (value) {
            lookupFieldConfirmAndPublish();
        }else {
            return false;
        }
    }
}
function checkLookupFieldsVisibillity()
{
    var allLookupFieldHidden=true;
    $("#mainMultiPageWrapper .formFieldUl li.fieldLi").each(function(indx,fielLiElement){
        var labelElement=$(fielLiElement).find('div.labelDiv > label');
        var textElement=$(fielLiElement).find('div.fieldDiv input[type="textbox"]');
        if($(labelElement)!=undefined && $(labelElement).attr('vatt')=='REFERENCE'  && !$(labelElement).hasClass('grayLabel') && isNullOrEmpty($(textElement).attr('disabled')))
        {
            console.log(' Lookup field visible-'+$(labelElement).text());
            allLookupFieldHidden = false;
        }
                             
    });
    return allLookupFieldHidden;
}
function checkPaymentFieldsVisibillity()
{
    var paymentSetupWrapperHidden=true;
    $("#mainMultiPageWrapper .formFieldUl li.fieldLi .payment-overlay-wrapper").each(function(indx,paymentwrapperDiv){
                         
        if(isNullOrEmpty($(paymentwrapperDiv).css('display')) || $(paymentwrapperDiv).css('display')!='none')
        { 
            paymentSetupWrapperHidden = false;
        }
                             
    });
    return paymentSetupWrapperHidden;
}
                
                 
function lookupFieldConfirmAndPublish()
{
    var lookupVisibilityOk = false;
    var paymentVisibiliyOk=checkPaymentFieldsVisibillity();
    //Validate to the tool so that if a reference field is required, the user has to pick a value using the lookup before they can save their form.
                     
    lookupVisibilityOk = checkLookupFieldsVisibillity();
                                 
                                 
    if ((lookupVisibilityOk == true || (lookupWarningFlagDisable==true || lookupWarningFlagDisable=='true') ) && paymentVisibiliyOk) {
        showPublishConfirm();
    }
    else {
        if(paymentVisibiliyOk)
        {


            $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Warning: This form contains a lookup field which allows external users to view your Salesforce records.<br /><br />Are you sure you want to continue?<br/><br /></div><div class='secondary'><input id='chkbxLookupWarningFlag' type='checkbox'/><label for='chkbxLookupWarningFlag'>Don't show me this message again</label></div></div>");
            // Define the Dialog and its properties.
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                title: "Close",
                height: "auto",
                width: 413,
                position: 'center',
                buttons: {                                        
                    "Yes":{
                        click: function () {                                              
                            $(this).dialog('close');
                            if($('#chkbxLookupWarningFlag').is(':checked'))
                            {
                                console.log(' Warning disable');
                                lookupWarningFlagDisable=true;
                            }
                            else{
                                console.log(' Warning enable');
                                lookupWarningFlagDisable=false; 
                            }
                                                    
                            showPublishConfirm();
                        },
                        text: 'Publish',
                        'class': 'vabutton1'
                    },
                    "No":{
                        click: function () {                                                                                              
                            $(this).dialog('close');
                            $(".btnPublishedSaved").text('Publish Draft');
                            $(".btnPublishedSaved").removeClass('va-disabled');                                                
                            return false;
                        },
                        text: 'Cancel',
                        'class': 'vabutton2'
                    } 
                },
                open: function( event, ui ) {
                    $('.ui-dialog :button').blur();
                }
            });
        }
        else
        {
            commonAlertMessage("One or more payment fields are not set up!","");
        }
    }
}
function showPublishConfirm()
{ 
    var hasEmptyRefField = false;
    var fieldLid = '';
                    
    //Validate to the tool so that if a reference field is required, the user has to pick a value using the lookup before they can save their form.
    $('#mainMultiPageWrapper .formFieldUl li.fieldLi[data-otype="OLookup"]').each(function(){
        if($(this).parent().find('>label:first').hasClass('grayLabel')){
            var inputElem=$(this).find('.fieldDiv >input[type="textbox"]');
            fieldLid  = $(inputElem).attr('id');
            fieldLid  = fieldLid.replace('isUserSelectedRequired','defaultValue');
            var defaultValue = $(inputElem).val();
            var isrequired=getSafeBoolean($(inputElem).attr('data-isrequired'),false);
            if(!isNullOrEmpty(defaultValue) && isrequired ){
                hasEmptyRefField = true;
            }
        }
    });
                                 
    if (hasEmptyRefField == false) {
        save(false,false);
    }
    else {
        $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>There are one or more reference fields in your form without a default value.<br /><br /></div><div class='secondary'>Are you sure you want to continue?</div></div>");
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Close",
            height: "auto",
            width: 413,
            position: 'center',
            buttons: {
                "Yes":{
                    click: function () {                                              
                        $(this).dialog('close');
                        save(false,false);
                    },
                    text: 'Yes',
                    'class': 'vabutton1'
                },
                "No":{
                    click: function () {                                                                                              
                        $(this).dialog('close');
                        $(".btnPublishedSaved").text('Publish Draft');
                        $(".btnPublishedSaved").removeClass('va-disabled');                                                
                        return false;
                    },
                    text: 'No',
                    'class': 'vabutton2'
                }
                                         
            },
            open: function( event, ui ) {
                $('.ui-dialog :button').blur();
            }
        });
    }
}
function showPublishResponse()
{
    if(isFirstTimeFormEdit == "true"){
        showFirstTimePublish();
        $('.publish-draft').addClass('va-disabled');
        $('.draft-saved').hide();
    }
    else{
        showSuccessMessage();
        $('.publish-draft').addClass('va-disabled');
        $('.draft-saved').hide();
    }
}
function showSuccessMessage(){
    var editorurl="{!$Page.FormPublish+'?ffid='+$CurrentPage.Parameters.id}";
    showNotification("successActionBox", "<span >Your form has been updated successfully!<span> <a href='"+editorurl+"' class='vabutton1 ml50 publish-link-btn' >Publish Options</a>");
}
function showErrorMessage(message){
    if(isNullOrEmpty(message))
    {
        message='An unexpected error has occurred with your form. Please contact the Fast Forms Support Team at support@fastforms.io for assistance.';
    }
    showNotification("errorActionBox", message);
}
function autosaveTriggered(){
    if (isChangesMadeInForm) {
        save(false,true);
        isChangesMadeInForm = false;    
        hideNotification('successActionBox'); 
    }   
}        
                
//  javascript for open custom lookup page
function openLookupRefPopup(thisElement,Ltype,Rtype)
{
    if(Ltype=='Group' || Ltype=='Queue')
    {
        var elemeId=$(thisElement).parent().find('input[type="textbox"]').attr('name');
        if(!isNullOrEmpty(elemeId))
        {
            var idItems=lengthSplitId(elemeId);
            if(idItems==2)
            {
                //primary
                Rtype=  elemeId.split('.')[0];
            }
            else if(idItems>2)
            {
                //secondary
                Rtype=  elemeId.split('.')[1];
            }
        }
    }
    openLookupPopup(Ltype,Rtype);
}
function openLookupPopup(Ltype,Rtype){
    var left = (screen.width/2)-(600/2);
    var top = 250
    //ltype=RecordType&rtype=Account
                 
    var url = '/apex/FastFormsLookup?ltype='+Ltype+'&rtype='+Rtype+'&sourcePage=editor';
    newWin = window.open(url, 'Popup','height=500,width=600,left='+left+',top='+top+',resizable=no,scrollbars=yes,toolbar=no,status=no');
             
                 
}
                
                 
                
function closeLookupPopup(){
    if(null!=newWin){
        newWin.close();               
    } 
}
function lookupPick(a,b,c,d,e,f,g,h) {
    console.log(' lookup Pick ');
    if($("#defaultValue").attr('name') == undefined  || $("#defaultValue").attr('name') ==''){
        $( "input[id='" + c + "']").val(f);
    }else{
        $("#defaultValueHidden").val(e);
        $("#defaultValue").val(f);
        c=$(".ExpandDiv").parent().find('input[type="textbox"]').attr('id');
        if(c != null){
            document.getElementById(c).value=f;
        } 
        mixpanel.track('Lookup value selected',{ "Field ID": c});
                                
    }             
    addLabel($("#defaultValue"));
    resetSavedButton();                 
    newWin.close();
}
function lookupPick2(a,b,c,d,e,f,g,h) {   
    if(!isNullOrEmpty(g) && g=='rule')
    {            
        setRuleLookupOptions(a,b,c,d,e,f,g,h)   ;       
    }
    else{
        if($("#defaultValue").attr('name') == undefined  || $("#defaultValue").attr('name') =='')
        {   $( "input[id='" + c + "']").val(e);}
        else{
            $("#defaultValueHidden").val(d);
            $("#defaultValue").val(e); 
            c=$(".ExpandDiv").parent().find('input[type="textbox"]').attr('id');

            if(c != null){                  
                //document.getElementById(c).value=e; 
                $(".ExpandDiv").parent().find('.fieldDiv input[type="textbox"]').val(e);
                $(".ExpandDiv").parent().find('.fieldDiv input[type="textbox"]').attr('value',e);
                $(".ExpandDiv").parent().find('.fieldDiv input[type="hidden"]').val(d); 
            }                  
        }               
        addLabel($("#defaultValue"));
        isChangesMadeInForm=true;  
                        
    }
    newWin.close();
}
function changeImg(x,con){
    if(con=='add'){
        x.src="{!URLFOR($Resource.iconImages,'AddHover.png')}";
    }
    if(con=='remove'){
        x.src="{!URLFOR($Resource.iconImages,'RemoveHover.png')}";
    }
    if(con=='Copy'){
        x.src="{!URLFOR($Resource.alpha,'HelpHover.png')}";
    }            
    if(con==undefined){
        x.src="{!URLFOR($Resource.iconImages,'CloseHover.png')}";
    }
}
function rechangeImg(x,con){
    if(con=='add'){
        x.src="{!URLFOR($Resource.iconImages,'Add.png')}";
    }
    if(con=='remove'){
        x.src="{!URLFOR($Resource.iconImages,'Remove.png')}";
    }
    if(con=='Copy'){
        x.src="{!URLFOR($Resource.alpha,'HelpActive.png')}";
    }
    if(con==undefined){
        x.src="{!URLFOR($Resource.iconImages,'Close.png')}";
    }
}
function itemAdd(item){
    var itemid=item.attr('id');
    var isPaymentField=false;
    var isESignaturefield=false;
    if(itemid!==undefined && itemid.indexOf('FASTFORMSPAYMENT')>0)
    {
        isPaymentField=true;
    }
    else if(itemid!==undefined && itemid.indexOf('ESIGNATURE')>0)
    {
        isESignaturefield=true;
    }
    if(isPaymentField)
    {
        item.find('.payment-item-header').hide();
        item.removeAttr('style');
                        
        $(item.find('.payment-item-row')).each(function(i, ppitemrow) {
            if(!$(ppitemrow).hasClass('pp-default-hide'))
            {
                $(ppitemrow).find('.PPGeneralFieldDiv').show();
                $(ppitemrow).show();
            }
                                                
                                             
        });
        item.find('.alert-payment-setup').show();
                         
    }
    else if(isESignaturefield){
        item.removeAttr('style');
    }
    else
    {
        item.find('div').show();
        item.find('div:first').css('width','40%');
    }
                        
    item.removeClass('tooltip');
    $( ".formUlLabel" ).children().removeClass('ui-state-default');
    item.find('.deleteField').show();
    var dropLiId = item.attr('id');
    item.removeClass('ui-state-default');
    var editDelDivHtml = '<div class="editDelDiv">';  

    if(item.find('.deleteField').length==0 && item.find('.editImg').length==0){                            
                             
        if(isPaymentField)
        {
                                             
            editDelDivHtml += '<img class="editImg" src="'+imgUrl +'" onclick="openEditPaymentDialog(this);" />';
            editDelDivHtml += '<img id="'+dropLiId+'" src="'+deleteImgUrl+'" class="deleteField" onclick="deletePaymentField(this,true);"/>';
        }
        else if(isESignaturefield){
            editDelDivHtml += '<img class="editImg" src="'+imgUrl +'" onclick="openEditSignatureDialog(this);" />';
            editDelDivHtml += '<img id="'+dropLiId+'" src="'+deleteImgUrl+'" class="deleteField" onclick="deleteSignatureField(this,true);"/>';
        }  
        else
        {
            editDelDivHtml += '<img class="editImg" src="'+imgUrl +'" onclick="openEditDialog(this,true);" />';
            editDelDivHtml += '<img id="'+dropLiId+'" src="'+deleteImgUrl+'" class="deleteField" onclick="deleteField(this,true);"/>';
        }
    }
    editDelDivHtml += '</div >';
    if(isPaymentField)
    {
        item.find('.editDelDiv').remove();
        item.find('.field-div-payment').append(editDelDivHtml);
    } else {
        item.append(editDelDivHtml);
    }
                        
    return item;
}
function editText(e){
    e.readOnly='';
    $(e).removeClass('editText');
    $(e).addClass('editTextfocus');            
}
function saveEdit(e){
    saveEditText($(e).val());
    e.readOnly=true;            
    $(e).removeClass('editTextfocus');
    $(e).addClass('editText');                        
}
function checkUploadToChatter(e){   
    updateFieldConfigByElem(e,true);        
}

function checkReq(e){           
    updateFieldConfigByElem(e,true);        
                           
}
                
function checkHide(e) {
    var lblelem = $(e).parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
    var referenceField=false;
    var isOnlyLabel=false;

    var parentFIeldLiElement=$(e).parents('.fieldLi');
    var parentExpandDiv=$(parentFIeldLiElement).find('.ExpandDiv');
    if ($(parentFIeldLiElement).find('.fieldDiv span.lookupInput').length > 0)
    {
        referenceField=true;
    }
    var dataType=safeStringValue($(parentFIeldLiElement).attr('data-otype'),'');
    if(dataType=='OGeneralText' || dataType=='OImage'){
        isOnlyLabel=true;
    }
    mixpanel.track('Field hidden option checked',{ "Field ID": lblelem.attr('id')});

    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
     if (!$('#hideField').is(":checked")) {
         $(lblelem).removeClass('grayLabel');
         $('#defaultLabelDiv').find('.hideText').innerHTML = '';
         $(parentFIeldLiElement).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea,div.ff-fileupload-drop-area').attr('data-ishidden',false);
         if(isOnlyLabel){
             $(parentFIeldLiElement).find('.labelDiv .ff-label').attr('data-ishidden',false);
         }
                    
     } else {
            $(lblelem).addClass('grayLabel');
    $('#defaultLabelDiv').find('.hideText').innerHTML = '<i>Field will not be visible to user</i>';
    $(parentFIeldLiElement).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea,div.ff-fileupload-drop-area').attr('data-ishidden',true);
    if(isOnlyLabel){
        $(parentFIeldLiElement).find('.labelDiv .ff-label').attr('data-ishidden',true);
    }
}    
                
if (referenceField) {
    upgradeNowMessage('Lookup fields are only available in Professional, Enterprise and NativeCloud editions of Fast Forms.','','');                       
    e.checked = true;
    toggleVisibilityOnHideFieldChange(e,parentExpandDiv,false);
}
else
{
    addLabel(e);
    resetSavedButton();  
}
</apex:outputText>
<apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
    if (!$('#hideField').is(":checked")) {
        $(lblelem).removeClass('grayLabel');
        $('#defaultLabelDiv').find('.hideText').innerHTML = '';
        $(parentFIeldLiElement).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea,div.ff-fileupload-drop-area').attr('data-ishidden',false);
        if(isOnlyLabel){
            $(parentFIeldLiElement).find('.labelDiv .ff-label').attr('data-ishidden',false);
        }
        if(referenceField)
        {
            toggleVisibilityOnHideFieldChange(e,parentExpandDiv,true);
        }
    } else {
                    $(lblelem).addClass('grayLabel');
$('#defaultLabelDiv').find('.hideText').innerHTML = '<i>Field will not be visible to user</i>';
$(parentFIeldLiElement).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea,div.ff-fileupload-drop-area').attr('data-ishidden',true);
if(isOnlyLabel){
    $(parentFIeldLiElement).find('.labelDiv .ff-label').attr('data-ishidden',true);
}
if(referenceField)
{   
    toggleVisibilityOnHideFieldChange(e,parentExpandDiv,false);
}
}    
              
            </apex:outputText>

}
function toggleVisibilityOnHideFieldChange(elemSource,parentExpandDiv,showELem)
{
    if(showELem)
    {
        if(!$(parentExpandDiv).find('#trForReadOnlyField').find('input[type=checkbox]').is(":checked"))
        {
            toggleVisibilityOnReadOnlyChange($(parentExpandDiv).find('#trForReadOnlyField'),parentExpandDiv,showELem);
        }
        //$(parentExpandDiv).find('#trForReadOnlyField').removeClass('elem-disabled');

    }
    else{
        //$(parentExpandDiv).find('#trForReadOnlyField').addClass('elem-disabled');
        //$(parentExpandDiv).find('#trForReadOnlyField').find('#readOnlyField').prop('checked', true);
        toggleVisibilityOnReadOnlyChange($(parentExpandDiv).find('#trForReadOnlyField'),parentExpandDiv,showELem);
    }
}
function toggleVisibilityOnReadOnlyChange(elemSource,parentExpandDiv,showELem)
{
    if(showELem)
    {
        $(parentExpandDiv).find('#trForRequired').removeClass('elem-disabled');
        $(parentExpandDiv).find('#trForLookupView').removeClass('elem-disabled');
        $(parentExpandDiv).find('#trForMsgField').removeClass('elem-disabled');
        $(parentExpandDiv).find('.edit-dialog-alert').show();
    }
    else
    {
        $(parentExpandDiv).find('.edit-dialog-alert').hide();
        $(parentExpandDiv).find('#trForRequired').addClass('elem-disabled');
        $(parentExpandDiv).find('#trForLookupView').addClass('elem-disabled');
        $(parentExpandDiv).find('#trForMsgField').addClass('elem-disabled');                            
    }
}
function setFieldCurrencyLabel(elemSource)
{
    console.log(' currency label for fields '+$(elemSource).val());
    $(elemSource).parents('.fieldLi').find('.fieldDiv').find('>input:first').prev().text($(elemSource).val());
    $(elemSource).parents('div[class="ExpandDiv"]').find('#trForDefaultValue input:first').prev().text($(elemSource).val());
    isChangesMadeInForm = true;
    autosaveTriggered();
}
function chkhideSection(chkboxElem)
{ 
    if ($(chkboxElem).prop('checked')!='undefined' &&  $(chkboxElem).prop('checked'))
    {
            
        
        $(chkboxElem).parents('.formSectionUl').addClass('hideFullSection');
        $(chkboxElem).parents('.formSectionUl').attr('data-ishidden',true)
    }
    else
    {
            
        $(chkboxElem).parents('.formSectionUl').removeClass('hideFullSection');
        $(chkboxElem).parents('.formSectionUl').attr('data-ishidden',false);
        
    }
}
function changeFieldLabel(e)
{
    var parentFieldLiElement=$(e).parents('.fieldLi');
    $(parentFieldLiElement).find('>div:first-child > label').html($(e).val());
}

function changeSectionLabel(e)
{
    var parentSectionLiElement=$(e).parents('.sectionLi');
    $(parentSectionLiElement).find('> label.ff-section-header').html($(e).val());
}

function checkReadOnly(e) {
       
    var referenceField=false;
    var parentFIeldLiElement=$(e).parents('.fieldLi');
    var parentExpandDiv=$(parentFIeldLiElement).find('.ExpandDiv');
    if ($(parentFIeldLiElement).find('.fieldDiv span.lookupInput').length > 0)
    {
        referenceField=true;
    }
    var lblelem = $(e).parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
    var fieldelem=null;
    if(referenceField)
    {
        fieldelem =$(e).parents('div[class="ExpandDiv"]').parent().find('.fieldDiv').find('input[type=textbox]');
    }
    else
    {
        fieldelem = $(e).parents('div[class="ExpandDiv"]').parent().find('.fieldDiv').children('input[type=textbox],input[type=text],input[type=checkbox],textarea,select');
    }
        
    var lblId = lblelem.attr('id').replace('lbl', '');
        
    mixpanel.track('Field readonly option checked',{ "Field ID": lblId});
    var mainFieldElement= $(e).parents('.fieldLi').find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');//.attr('data-isuserreq'), false);
            
             
    $(mainFieldElement).each(function (indx, inputElem) {
                 
        $(inputElem).attr('data-isreadonly', $('#readOnlyField').prop("checked"));
                
    });
    if (!$('#readOnlyField').is(":checked")) {
        $(lblelem).removeClass('readOnlyLabel');

                  
        if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length > 0) {
            console.log(' Readonly disabled ');
            $(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').removeAttr('disabled');
        } else if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length > 0) {
            if ($(e).parents('.fieldLi').find('.fieldDiv').find('>input[type="textbox"]:first').length > 0) {
                $(fieldelem).removeAttr('readonly');
                $(fieldelem).attr('data-isreadonly',false);
                $('#defaultValue').removeAttr('readonly');
                reinitializeRatingElement($(e).parents('.fieldLi').find('.fieldDiv'));
            } else {
                reinitializeSelectToRadioElement('', $(e).parents('.fieldLi').find('.fieldDiv'), false, false, '', '');
            }

        } else {

            if ($(fieldelem).is('select')) {
                $(fieldelem).removeAttr('disabled');
                $(fieldelem).attr('data-isreadonly',false);
                $('#defaultValue').removeAttr('disabled');
            } else {

                $(fieldelem).removeAttr('readonly');
                $('#defaultValue').removeAttr('readonly');
                $(fieldelem).attr('data-isreadonly',false);
            }
        }


    } else {
        $(lblelem).addClass('readOnlyLabel');
        /* $('#defaultValue').attr('disabled','true');*/


        if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').length > 0) {
            console.log(' Readonly enabled ');
            $(e).parents('.fieldLi').find('.fieldDiv').find('div.select2-container').attr('disabled', 'true');
        } else if ($(e).parents('.fieldLi').find('.fieldDiv').find('div.custom-flex-control-container').length > 0) {
            /* flexcontrol */
            if ($(e).parents('.fieldLi').find('.fieldDiv').find('>input[type="textbox"]:first').length > 0) {
                $(fieldelem).attr('readonly', 'true');
                $('#defaultValue').attr('readonly', 'true');
                $(fieldelem).attr('data-isreadonly',true);
                reinitializeRatingElement($(e).parents('.fieldLi').find('.fieldDiv'));
                                
            } else {
                reinitializeSelectToRadioElement('', $(e).parents('.fieldLi').find('.fieldDiv'), true, false, '', '');
            }
        } else {
            if ($(fieldelem).is('select')) {
                $(fieldelem).attr('disabled', 'true');
                $('#defaultValue').attr('disabled', 'true');
                $(fieldelem).attr('data-isreadonly',true);
            } else {
                $(fieldelem).attr('readonly', 'true');
                $('#defaultValue').attr('readonly', 'true');
                $(fieldelem).attr('data-isreadonly',true);
            }

        }
    }
    <apex:outputText rendered="{!if(isFreemium,false,true)}">
if(referenceField)
    {
        if (!$(e).is(":checked")) {
            toggleVisibilityOnReadOnlyChange(e,parentExpandDiv,true);
        }
        else
        {
            toggleVisibilityOnReadOnlyChange(e,parentExpandDiv,false); 
        }
    }
    </apex:outputText>
     <apex:outputText rendered="{!if(isFreemium,true,false)}">
     if(referenceField)
    {
        upgradeNowMessage('Lookup fields are only available for paid subscriptions.','','');
    }
    chk.checked = true;
    </apex:outputText>
            
    //}

}
        
function removeError(e){
    if($(e).hasClass('errorMsg')){
        $(e).removeClass('errorMsg');
        $(e).val('');
    }
}
                
  function sortPrimaryList(a,b){
    a = a.text.toLowerCase();
    b = b.text.toLowerCase();
    if(a > b) {
        return 1;
    } else if (a < b) {
        return -1;
    }
    return 0;
} 
function resetPrimaryObjectListOrder(){
  var selectList = $('select.select-primary-element option');
          var primaryObjectSelected=$('select.select-primary-element option:selected').val();
selectList.sort(sortPrimaryList);
$('select.select-primary-element').html(selectList);
        $('select.select-primary-element').select2();
        if(!isNullOrEmpty(primaryObjectSelected)){
        $('select.select-primary-element').select2('val',primaryObjectSelected);
      }
}             
//Form Setting Toggle Div
function toggleFormSettingSection(expandFormsettings){   
    //$("#headerPanel").animate({ scrollTop: 0 }, "slow");
                
    if($('#frmSetting').is(':visible')){
        UnSaved(false);
    }else{         
resetPrimaryObjectListOrder();
        refreshRelatedObjectInfo('.select-secondary-element-wrapper');    
        disableSelectLookupOption();
                        
        $("#FrmImg").addClass('togHoverActive');
                                
                
                                
        $('.FrmName').val($('.editText').val());
        $('.editText').addClass('disableColor');
        $('.form-editor-title-box').addClass('va-disabled-items');
                    
        $('#tabList .button').addClass('btnSaved');
        $('.ObjectName h4').addClass('disableColor');
                
        $('.objectDiv').addClass('disableColor');
        $('#formTitle').addClass('disableColor');
        //$('.tooltips').addClass('disableColor');
                          
        if(expandFormsettings)
        {
            $("#frmSetting").slideDown(300);
                     
            getRemoteRuleFieldsInfoJs();
            $('#txtareaPDFName').val(unscapeXML($('#txtareaPDFName').val()));
            setHover();
            setColorTag(); 
            resetAddRelatedObjectBlock();
            <apex:outputText rendered="{!if(isFreemium,true,false)}">  
           resetPrimaryForFreemium('select.select-primary-element'); 
            </apex:outputText>    
        }
                         
        setRelatedObjectXML();
    }
    if(expandFormsettings){ 
               
        getOrSetJavascriptCodeJS(false,'');
        scrollToElement("headerPanel");
        remoteSetOrGetSubmitInfoXMLJS('',false,false);

    }
}
function initializeJSEditor(jsCode)
{
    // trigger extension
    ace.require("ace/ext/language_tools");
    var jsEditor = ace.edit("javascriptEditor");
    jsEditor.session.setMode("ace/mode/javascript");
    jsEditor.setTheme("ace/theme/tomorrow");
    // enable autocompletion and snippets
    jsEditor.setOptions({
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: false
    });
    jsEditor.on('blur', function(e) {
        console.log('Change occured in JS editor');
        onFormSettingsChange(e.target,true);
    });
    jsEditor.setValue(jsCode);
}
function scrollToElement(elementid)
{
    if(!isNullOrEmpty(elementid)){ 
        $('html, body').animate({
            scrollTop: $("#"+elementid).offset().top
        }, 100);        
    }
}
function setRelatedObjectXML()
{
    console.log('in setRelatedObjectXML ');  
    var secObjectXML='';
    $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {
        if(  !isNullOrEmpty($(secSelectBlock).find('select.select-secondary-element').select2("val")))
        {
            var selectedOptionName=$(secSelectBlock).find('select.select-secondary-element option:selected').attr("name");
            if(!isNullOrEmpty(selectedOptionName))
            {
                var selectedval=    $(secSelectBlock).find('select.select-secondary-element').select2("val"); 
                var selectedText=    $(secSelectBlock).find('select.select-secondary-element').select2('data').text;
                            
                console.log(' SECONDARY selected Object value-  '+selectedval+' selectedOptionName- '+selectedOptionName);
                secObjectXML+='<object>';
                secObjectXML+='<text>'+selectedText+'</text>';
                secObjectXML+='<value>'+selectedval+'</value>';
                secObjectXML+='<relationtype>'+selectedOptionName+'</relationtype>';
                secObjectXML+='</object>';
            }   
        }
    });
    secObjectXML='<objects>'+secObjectXML+'</objects>';
    formRelatedObjectXML=secObjectXML;
        
}
function getRelatedObjectInfoXML(callFromFormSettings)
{ 
    var relObjectsXML='';
    var returnxml='';
    if(callFromFormSettings){
        var optionItems=[];
        $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {
            if(  !isNullOrEmpty($(secSelectBlock).find('select.select-secondary-element').select2("val")))
            {
                var selectedid=$(secSelectBlock).find('select.select-secondary-element').select2("val");
                var selectedOptionName=$(secSelectBlock).find('select.select-secondary-element option:selected').attr("name");
                if(!isNullOrEmpty(selectedOptionName))
                {
                    var isrepeat=false;
                    if($(secSelectBlock).find('.repeat-object-box').length>0){
                        isrepeat=$(secSelectBlock).find('.repeat-object-box input.vff-checkbox').is(':checked');
                    }
                    optionItems.push({'id':selectedid,'type':selectedOptionName,'isrepeat':isrepeat})
                }
            }
        });
        $.each(optionItems, function(i, item) {
            console.log('Item type-'+item["type"]);
            var itemtype=item["type"];
            var itemid=item["id"];
            if(!isNullOrEmpty(itemtype)){
                if(itemtype=='detail'){
                    $('.relatedFFObjsListWrapperCSS .related-obj-item.object-detail').each(function(indx,objitemdiv){
                        var objitem=$(objitemdiv).find('.data-item');
                        var isrepeat=item["isrepeat"];
                        var objrelname= safeStringValue($(objitem).attr("data-relationshipname"), "");
                        var objname= safeStringValue($(objitem).attr("data-objname"), "");
                        if(itemid== objrelname+' ('+objname+')'){
                            returnxml+='<relobject repeat="'+isrepeat+'" relObjectType="'+itemtype+'">';
                            returnxml+='<objName>'+safeStringValue($(objitem).attr("data-objname"), "")+'</objName>';
                            returnxml+='<objLabel>'+safeStringValue($(objitem).attr("data-objlabel"), "")+'</objLabel>';
                            returnxml+='<relationshipName>'+safeStringValue($(objitem).attr("data-relationshipname"), "")+'</relationshipName>';
                            returnxml+='<refToRec>'+safeStringValue($(objitem).attr("data-reftorec"), "")+'</refToRec>';
                            returnxml+='<refToRecTrim>'+safeStringValue($(objitem).attr("data-reftorectrim"), "")+'</refToRecTrim>';
                            returnxml+='<refIdName>'+safeStringValue($(objitem).attr("data-refidname"), "")+'</refIdName>';
                            returnxml+='<refIdLabel>'+safeStringValue($(objitem).attr("data-refidlabel"), "")+'</refIdLabel>';
                            returnxml+='</relobject>';
                        }
                    });
                }
                else if(itemtype=='lookup'){
                    $('.relatedFFObjsListWrapperCSS .related-obj-item.object-lookup').each(function(indx,objitemdiv){
                        var objitem=$(objitemdiv).find('.data-item');
                        var objname= safeStringValue($(objitem).attr("data-objname"), "");
                        var objref= safeStringValue($(objitem).attr("data-reftorectrim"), "");
                        if(itemid== objname+' ('+objref+')'){
                            returnxml+='<relobject relObjectType="'+itemtype+'">';
                            returnxml+='<objName>'+safeStringValue($(objitem).attr("data-objname"), "")+'</objName>';
                            returnxml+='<objLabel>'+safeStringValue($(objitem).attr("data-objlabel"), "")+'</objLabel>';
                            returnxml+='<relationshipName>'+safeStringValue($(objitem).attr("data-relationshipname"), "")+'</relationshipName>';
                            returnxml+='<refToRec>'+safeStringValue($(objitem).attr("data-reftorec"), "")+'</refToRec>';
                            returnxml+='<refToRecTrim>'+safeStringValue($(objitem).attr("data-reftorectrim"), "")+'</refToRecTrim>';
                            returnxml+='<refIdName>'+safeStringValue($(objitem).attr("data-refidname"), "")+'</refIdName>';
                            returnxml+='<refIdLabel>'+safeStringValue($(objitem).attr("data-refidlabel"), "")+'</refIdLabel>';
                            returnxml+='</relobject>';
                        }
                    });

                }
            }
        });
             
    }else{
        $('.ObjectName h4 span.secName').each(function(indx,secNameElem){
            var objectype='lookup';
            if($(secNameElem).parent().hasClass('object-detail'))
            {
                objectype='detail';
            }
            if($(secNameElem).parent().hasClass('is-repeat'))
            {
                returnxml+='<relobject repeat="true" relObjectType="'+objectype+'">';
            }else{
                returnxml+='<relobject relObjectType="'+objectype+'">';
            }
             
            returnxml+='<objName>'+safeStringValue($(secNameElem).attr("data-objname"), "")+'</objName>';
            returnxml+='<objLabel>'+safeStringValue($(secNameElem).attr("data-objlabel"), "")+'</objLabel>';
            returnxml+='<relationshipName>'+safeStringValue($(secNameElem).attr("data-relationshipname"), "")+'</relationshipName>';
            returnxml+='<refToRec>'+safeStringValue($(secNameElem).attr("data-reftorec"), "")+'</refToRec>';
            returnxml+='<refToRecTrim>'+safeStringValue($(secNameElem).attr("data-reftorectrim"), "")+'</refToRecTrim>';
            returnxml+='<refIdName>'+safeStringValue($(secNameElem).attr("data-refidname"), "")+'</refIdName>';
            returnxml+='<refIdLabel>'+safeStringValue($(secNameElem).attr("data-refidlabel"), "")+'</refIdLabel>';
            returnxml+='</relobject>';
        });
    }

    if(!isNullOrEmpty(returnxml)){
        relObjectsXML+='<relobjects>'+returnxml+'</relobjects>';

    }
          
    return relObjectsXML;
}
function getRelatedObjectXML()
{
    return formRelatedObjectXML;
}

var isExpanding = false;
var isSection=true;
var i=0;
/////addded to fix issue: #33 Fields scrolling to top - on nov 26 2014 by balinder
function toggleGenFieldsSection() {
    var headerpanelbottomoffset =$('#headerPanel').position().top+$('#headerPanel').outerHeight(true)+184;
    if (!isExpanding) {
        if ($(document).scrollTop() > headerpanelbottomoffset) {
            $('#availableFieldBox').css('position', 'relative');
            $('#availableFieldBox').css('top', $(document).scrollTop() - headerpanelbottomoffset);
            //$('#generalFieldBox').css('position', 'relative');
        }
        //$('#generalFieldBox').css('top', $('#availableFieldBox').css('top'));
        isExpanding = true;
                                 
        var hr = 0;
                                
        if ($(".generalFields").hasClass("activeItem")) {
            console.log(' gnFldImg  collapse '); 
            $("#divForGenFields").hide();//.slideUp(300);
            $(".generalFields").removeClass('activeItem');
                                         
                                        
            if ($(document).scrollTop() > headerpanelbottomoffset) {
                $('#availableFieldBox').css('position', 'fixed');
                $('#availableFieldBox').css('top', 0);
                                                 
            }
            $('.list-toggle-div-wrap').show();
            isExpanding = false;
                                         
        } else {
            console.log(' gnFldImg expand ');
                                        
            $(".generalFields").addClass('activeItem');
                                        
            hideAllAvailableFieldLists();
            $("#divForGenFields").slideDown(10, function(){
                goToNextTourStop();
            });
            isSection = true;
                                         

            if ($(document).scrollTop() > headerpanelbottomoffset) {
                                
                $('#availableFieldBox').css('position', 'fixed');
                $('#availableFieldBox').css('top', 0);
                                                
            }
            else
            {
                             
            }
            isExpanding = false;
                                        
        }
    }
}
                
function checkFileUploadInput(evt){
    var charCode = (evt.which) ? evt.which : evt.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
        return false;    
    return true;
}
function checkFileUploadRegInput(e){
    var parentFieldLi=$(e).parents('.fieldLi');
    var RE = /^-{0,1}\d*\.{0,1}\d+$/;
    if($(parentFieldLi).length>0){
        $("#limitValue").next().remove();
        if($("#limitValue").val() == ''){
            $("#limitValue").css('border','1px solid red');
            $("#limitValue").focus();
            isFFValid = false;   
            //   console.log(' isFFValid false checkFileUploadRegInput 1');                             

        }else{
            if(RE.test($("#limitValue").val())){
                if($("#limitValue").val() > 99 || $("#limitValue").val() <=0 ){
                    isFFValid = false;
                    //  console.log(' isFFValid false checkFileUploadRegInput 2');  
                    $("#limitValue").css('border','1px solid red');
                    $("#limitValue").after('<span style="color:red;">Limit is incorrect<span>');
                    $("#limitValue").focus();
                }else{
                    $("#limitValue").css('border','1px inset #cecece');
                    isFFValid = true;                              
                }
            }else{
                isFFValid = false;
                // console.log(' isFFValid false checkFileUploadRegInput 3');  
                $("#limitValue").css('border','1px solid red');
                $("#limitValue").after('<span style="color:red;">Limit is incorrect<span>');
                $("#limitValue").focus();
            }
        }
    }
}
function errorSave(){
    $("#dialogSucess").dialog("close");
    $("#failure").css('display','none');
    resetSavedButton();
}

var isPrimary=false;
$(document).ready(function(){
    resetFastFormsHREFLinks('.form-information-wrapper-outer',SFOrgPrefix);
    resetFastFormsHREFLinks('.bread-crumb',SFOrgPrefix);
    setHover();
                        
});
function changePrimaryObjectCall(elemSource)
{
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
                      if(elemSource.value != '' &&  $.inArray(elemSource.value, validObjects())<0) 
    {
                        
                         
        upgradeNowMessage("Only Case, Account, Contact and Lead objects are available in Fast Forms free edition.","","http://visualantidote.com/fastforms#Subscribe");
 
        $(elemSource).select2("val",$('#priName').attr('class'));
        return false;
    }
else{
    </apex:outputText>
    $(".btnPublishedSaved").text('Publish Draft');
    $("#btnSaved").removeClass('btnGreenClick');
    $("#dialog-confirm").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to change your form's primary object?<br /><br /></div><div class='secondary'>Changing your form's primary object will remove all fields, related objects and rules from your form. </div></div>");                 
    // Define the Dialog and its properties.
    $("#dialog-confirm").dialog({
        resizable: false,
        modal: true,
        title: "Save",
        height: "auto",
        width: 413,
        buttons:{                                        
            "Yes":{
                click: function () {
                    $(this).dialog('close');
                    callback(true);
                },
                text: 'Yes',
                'class': 'vabutton1'
            },
            "No":{
                click: function () {
                    $(this).dialog('close');                                           
                    callback(false);
                },
                text: 'No',
                'class': 'vabutton2'
            }           
        },
                                                                    
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();
    $('#dialog-confirm').dialog('option', 'position', 'center');
    function callback(value) {
        if (value) {
            //Primary Object Changed
            //saveEditFormName($('#formnameedit').val());
            updateformTitle();
            var formnm=$('#formTitle').val();
            var tracksubmissions=IsTrackingEnabled();
            var emailnotifications=IsEmailNotificationsEnabled();
            var notifyemail=getNotificationEmail();
            var  primaryObjectVal=$(elemSource).val();
            var pdfChatterEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationChatter');
            var pdfRecordEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationRecord');
            var pdfEmailEnabled=isPdfAttachmentEnabledFor('.chkbxPDFEmailEnabled');
            var pdfSendEmailTo= getHTMLElementValue('.txt-pdf-sendtomail');
            var pdfName= getHTMLElementValue('#txtareaPDFName');
            console.log(' Updated primaryObjectVal-'+primaryObjectVal)
            changePrimaryObject(primaryObjectVal,formnm,tracksubmissions,emailnotifications,notifyemail,pdfChatterEnabled,pdfRecordEnabled,pdfEmailEnabled,pdfSendEmailTo,pdfName);
        }else {
            $(elemSource).select2("val",$('#priName').attr('class'));
            return false;
        }
    }
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
    }/*else condition ends*/
</apex:outputText>
}
function callToUpdateRelatedObject(){

    var isUpdated=getSafeBoolean(isRelatedObjInfoUpdated,true);
    if(!isUpdated)
    { 
        console.log('Updating Legacy related object info to new related object field..')
        var relatedObjectsXML=getRelatedObjectInfoXML(false); 
        updateRelatedObjectIfNeeded(relatedObjectsXML);
        isChangesMadeInForm=true;
        autosaveTriggered();
    }
    getRemoteRuleFieldsInfoJs();
    allFieldsHealthCheck();
}
function resetRelatedObjectUpdateVar(){
    isRelatedInfoUpdated=true;
}
function disable_scroll() {
    document.body.style.overflow="hidden";
}
function enable_scroll() {
    document.body.style.overflow="auto";
}
var previousOpenedFirst = false;
                 
                 
                 
var previousOpenedSecond = false;
                
                
function setTitleSortable(){
    {
        if(RunTag){   
            console.log('set title parent hit runtag ');           
            var relIndx=0;
            $('.ObjectName h4 span.secName').each(function(indx){
                if($(this).attr('id') != 'priName'){
                    relIndx++;
                                                    
                }
            });
                                       
            if(relIndx==0)
            {
                DummyTrigger('');
            }
            else if(relIndx>0){ 
                var relatedObjectsXML=getRelatedObjectInfoXML(false); 
                addRelatedObjectThird(relatedObjectsXML );                      
                                          
                                
            }
            if(relIndx>=0){ 
                // toggleFormSettingSection(false); /*added to populate related objects - Dec 10 2014*/ 
                //  UnSaved(false);/*added to populate related objects - Dec 10 2014*/                    
                //  hideSection();
                RunTag=false;
            }
                        
        }
                        
                                            
    }
    /// setTitleParent();
                      
}
var previousOpenedThird = false;
                
var delFirst=false;
var delSecond=false;
var delThird=false;
var delObjectSecond='';
var delObjectThird='';
                
var firstImage;
                 
function setColorTag(){
    var childCount=1;
    $('.select-secondary-element-wrapper').find('.select2-container.select-secondary-element a.select2-choice').find('.color-span').remove();
    $('.select-secondary-element-wrapper').find('.select2-container.select-secondary-element a.select2-choice').removeClass('ff-repeat');
    $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {
        var optionselected=$(secSelectBlock).find('select.select-secondary-element option:selected');
        if( isNotNullOrUndefined(optionselected) &&  !isNullOrEmpty($(optionselected).attr('name')))
        {
                          
            var selectedOptionName= $(optionselected).attr('name');
            $(secSelectBlock).find('.repeat-object-box').addClass('display-none');
            if(!isNullOrEmpty(selectedOptionName) && selectedOptionName=='detail')
            {
                             
                $(secSelectBlock).find('.repeat-object-box').removeClass('display-none');
                var repeatClass='no-ffrepeat';
                if($(secSelectBlock).find('.repeat-object-box input.chkbx-repeating').is(':checked')){
                    repeatClass='ff-repeat';
                }
                var containerHtml =  '<span class="color-span '+colorTagArray[childCount]+'"></span>';//'<img class="branchImage '+repeatClass+'" src="'+ffcommonResuorceUrl+'/iconalpha/'+colorTagArray[childCount]+'.png" />';
                $(secSelectBlock).find('.select2-container.select-secondary-element a.select2-choice').append(containerHtml);
                $(secSelectBlock).find('.select2-container.select-secondary-element a.select2-choice').addClass(repeatClass);
                childCount += 1;
            }else{
                $(secSelectBlock).find('.repeat-object-box input.chkbx-repeating').prop('checked',false);
            }   
        }
    });
}
var delObjectName='';
                
                 
                
                 
function isLookupOption(fistListId){
    if(fistListId != undefined){
        return fistListId.indexOf('lookup') > -1;
    }
    return false;
}
               
function UnSaved(triggerByELement){
                         
    $("#frmSetting").slideUp(300);
    rePopulateFormSettingObjectList();
    $('.change').removeClass('del');           
    $('.del').removeClass('del');
    $('#tabList .button').removeClass('btnSaved');
    $("#FrmImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'Formexpand.png')}");
    $("#FrmImg").addClass('curChange');
                         
    $('.ObjectName h4').removeClass('disableColor');
    $('.editText').removeClass('disableColor');
    $('.form-editor-title-box').removeClass('va-disabled-items');
         
    $('.frmSet').removeClass('disableColor');  
                         
    $('.objectDiv').removeClass('disableColor');
                        
    $("#FrmImg").removeClass('togHoverActive');
    $('#formTitle').removeClass('disableColor');
    setColorTag();  
    if(triggerByELement)
    {
        scrollToElement("headerPanel");
    }
    //$('.tooltips').find('img').attr('src','{!URLFOR($Resource.VisualAntidote__iconImages,'Copy-icon-Back.png')}');  
}
function rePopulateFormSettingObjectList()
{
    parseFormSettingXML (getRelatedObjectXML());
}
function parseFormSettingXML(xmlstr)
{
                         
         
    var xmlDocElement=getXmlElementFromStr(xmlstr);
    var elem=xmlDocElement.getElementsByTagName("object");
                         
                            
    $.each(elem, function(index, objElement){
                                
                                
        if(objElement.childNodes.length>0)
        {
                                        
            var selectedValue='';
            $.each(objElement.getElementsByTagName("value"), function(index, subitem){
                                                     
                selectedValue=$(subitem).text();
            });
            if(selectedValue!='')
            {
                var relindx=index;
                relindx++;
                setRelatedObjectStyle($('.select-related-'+relindx).parent(),selectedValue);
                                                    
            }
            else
            {
                console.log('Selected Value is empty  ');
            }
        }
    });
}
function setRelatedObjectStyle(elem,selectedVal)
{
    if(elem!=undefined)
    {
        console.log('Selected Value is not empty  '+selectedVal);
        $(elem).find('.delete-object-box').show();
        $(elem).find('select.select-secondary-element').select2("val",selectedVal);
    }
                        
}
function updateformTitle()
{
    $('#formTitle').val($('#formnameedit').val());
}
function resetTrackSubmissions(){
    if( $('.chkbxtrackingEnabled').prop('checked'))
    {
        updateTrackSubmissionsOption(true);
    }
    else
    {
        updateTrackSubmissionsOption(false);
                
    }
}
/*saved()  function starts  -call from save changes in form settings */
function resetObjectFieldLists(relatedOnly){
    changeRelObjIndx='';
    var relatedObjectsXML=getRelatedObjectInfoXML(true);
    saveObjectChanges(relatedObjectsXML);
}
function Saved(){
                     
                    
    console.log(' Related Object XML- '+getRelatedObjectXML());
                
                  
    updateformTitle(); 
    resetSavedButton();
                           
    var formnm=$('#formTitle').val();
    var tracksubmissions=IsTrackingEnabled();
                    
    var emailnotifications=IsEmailNotificationsEnabled();
    var notifyemail=getNotificationEmail();
    var hiddenObjValues=fetchHiddenObjectValues();    
    var relatedObjectsXML=getRelatedObjectInfoXML(true);//'<relatedObjects>';
                                       
    console.log(' relatedObjectsXML '+relatedObjectsXML+' Object values-'+hiddenObjValues);
    var pdfChatterEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationChatter');
    var pdfRecordEnabled=isPdfAttachmentEnabledFor('.chkbxPDFConfirmationRecord');
    var pdfEmailEnabled=isPdfAttachmentEnabledFor('.chkbxPDFEmailEnabled');
    var pdfSendEmailTo= getHTMLElementValue('.txt-pdf-sendtomail');
    var pdfName=getHTMLElementValue('#txtareaPDFName');
                                                   
    saveChanges(relatedObjectsXML,hiddenObjValues,formnm ,tracksubmissions,emailnotifications,notifyemail,pdfChatterEnabled, pdfRecordEnabled,pdfEmailEnabled,pdfSendEmailTo,pdfName);
    var jseditor=ace.edit("javascriptEditor");
    if(jseditor!=null && jseditor!==undefined )
    {
        getOrSetJavascriptCodeJS(true, jseditor.getValue());
    }
    remoteSetOrGetSubmitInfoXMLJS(formOptionsConfigXML(),true,false);
    $('#hiddenLiId').val('ftrSortableForLabelli');
    //  saveButton();
                                
                        
    changeRelObjIndx='';
    $('.change').removeClass('del');
    $('.del').removeClass('del'); 
    $('#tabList .button').removeClass('btnSaved');
    $("#FrmImg").attr("src", "{!URLFOR($Resource.VisualAntidote__iconImages,'Formexpand.png')}");
                        
    reEnableHeaderSection();
         
    $('.ObjectName').find('h4').removeClass('disableColor');
    $('.editText').val($('.FrmName').val());
    $('.frmSet').removeClass('disableColor');
    $("#FrmImg").addClass('curChange');
    $("#FrmImg").removeClass('togHoverActive'); 
                                
    $('.objectDiv').removeClass('disableColor');
                               
    $('.tooltips').removeClass('disableColor');
    //$('.tooltips').find('img').attr('src','{!URLFOR($Resource.VisualAntidote__iconImages,'Copy-icon-Back.png')}');         
    hideSection(); 
                        
                       
    scrollAvailableDiv();
}
                 
function reEnableHeaderSection()
{
    $("#frmSetting").slideUp(300);            
    $('.editText').removeClass('disableColor');
    $('.form-editor-title-box').removeClass('va-disabled-items');
}
/*saved() function ends*/
function IsTrackingEnabled(){
    var tracksubmissions=false;
    if( $('.chkbxtrackingEnabled').prop('checked'))
    {
        tracksubmissions=true;
    }
    else
    {
        tracksubmissions=false;
                
    }
    return tracksubmissions;
}
function setFFCheckBoxElem(chkbxElem,newValue)
{
         
    if(newValue)
    {
        $(chkbxElem).prop('checked',true);
    }
    else{
        $(chkbxElem).prop('checked',false);
    }
           
}
function getFFCheckBoxElemValue(chkbxElem,defaultValue)
{
    var returnflag=defaultValue;
    if( $(chkbxElem).prop('checked'))
    {
        returnflag=true;
    }
    else
    {
        returnflag=false;
                
    }
    return returnflag;
}
function isPdfAttachmentEnabledFor(chkbxElem)
{
    var returnflag=false;
    if( $(chkbxElem).prop('checked'))
    {
        returnflag=true;
    }
    else
    {
        returnflag=false;
                
    }
    return returnflag;
}
function getHTMLElementValue(elemSource)
{
    var returnVal=$(elemSource).val();
    if(isNullOrEmpty(returnVal))
    {
        returnVal='';
    }
    return returnVal;
}
function onPDFEnabledChange(elemSource,isAutoSave)
{

    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                upgradeNowMessage('PDF confirmation feature is only available in Professional, Enterprise and NativeCloud editions of Fast Forms.','','');                         
    elemSource.checked = false;
    </apex:outputText>
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
if($(elemSource).is(":checked"))
    {
        $(elemSource).parents('.pdf-confirmations-block').find('.pdf-chatter-upload').slideDown(300);
    }
else
{
        $(elemSource).parents('.pdf-confirmations-block').find('.pdf-chatter-upload').slideUp(300);
}
onFormSettingsChange(elemSource,isAutoSave);
</apex:outputText>
}
function onPDFEmailEnabledChange(elemSource,isAutoSave)
{
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                upgradeNowMessage('PDF confirmations emails are only available in Professional, Enterprise and NativeCloud editions of Fast Forms.','','');                         
    elemSource.checked = false;
    </apex:outputText>
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
if($(elemSource).is(":checked"))
    {
        $(elemSource).parent().find('input[type="text"]').slideDown(300);
    }
else
{
       $(elemSource).parent().find('input[type="text"]').slideUp(300);
}
onFormSettingsChange(elemSource,isAutoSave);
</apex:outputText>
}
function onEmailNotificationsEnabled(elemSource,isAutoSave)
{
    if($(elemSource).is(":checked"))
    {
        $(elemSource).parent().find('input[type="text"]').slideDown(300);
    }
    else
    {
        $(elemSource).parent().find('input[type="text"]').slideUp(300);
    }
    onFormSettingsChange(elemSource,isAutoSave);
}
function IsEmailNotificationsEnabled(){
    var notifyinemails=false;
    if( $('.chkbxemailNotifications').prop('checked'))
    {
        notifyinemails=true;
    }
    else
    {
        notifyinemails=false;
                
    }
    return notifyinemails;
}
function getNotificationEmail(){
    return $('#inputTxtemailNotifications').val(); 
}
         
                
function listHideRenderDiv(){
    setTitleSortable();            
                        
                         
    $('#multiPageUlForm   li.fieldLi').each(function(){
                                        
        if($(this).hasClass('lbl') == false && $(this).hasClass('sortableForRelFields1')){
            var formLiElem=$(this);
            $('.form-information .secName-wrap').each(function(indx,parentDiv){
                var objvalue=$(parentDiv).find('.secName').attr('id') ;
                var elemFieldTitle=$(formLiElem).attr('title');
                console.log(' OBJ Value-'+objvalue);
                if(!isNullOrEmpty(objvalue) && !isNullOrEmpty(elemFieldTitle) && elemFieldTitle.indexOf('(Lookup)')>1){
                    var objLabel=objvalue.substring(objvalue.indexOf('(')+1,objvalue.indexOf(')'));

                    if( objvalue==elemFieldTitle.replace('(Lookup)','('+objLabel+')')){
                                                                    
                        $(formLiElem).remove();
                    }
                }

            });
                                                        
        }
    });
                                   
                     
                        
                      
    $('#multiPageUlForm   li.fieldLi').each(function(indx,formLiElem){
        if( $(formLiElem).hasClass('sortableForRelFields1')){
            var apiname=$(formLiElem).find('div.labelDiv label.ff-label').attr('data-apiname');
            if(isNullOrEmpty(apiname))
            {
                apiname=getSFieldName($(formLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('id'));
            }
            $("#sortableForRelFields1 li").each(function(inx,availLiElem){   
                var sourceapiname=$(availLiElem).find('div.labelDiv label.ff-label').attr('data-apiname');
                if(isNullOrEmpty(sourceapiname))
                {
                    sourceapiname=getSFieldName($(availLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('id'));
                }                         
                if(apiname == sourceapiname){
                    $(availLiElem).remove();
                }
            });
        }
    });
                              
    $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
        var sortableClassname=$(sortableUL).attr('id');
        if(!isNullOrEmpty(sortableClassname))
        {
            $('#multiPageUlForm   li.fieldLi').each(function(indx,formLiElem){
                if( $(formLiElem).hasClass(sortableClassname)){
                    var apiname=$(formLiElem).find('div.labelDiv label.ff-label').attr('data-apiname');
                    if(isNullOrEmpty(apiname))
                    {
                        apiname=getSFieldName($(formLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('id'));
                    }
                    $(sortableUL).find("li").each(function(inx,availLiElem){
                        var sourceapiname=$(availLiElem).find('div.labelDiv label.ff-label').attr('data-apiname');
                        if(isNullOrEmpty(sourceapiname))
                        {
                            sourceapiname=getSFieldName($(availLiElem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr('id'));
                        }                         
                        if(apiname == sourceapiname){
                            $(availLiElem).remove();
                        }
                    });
                }
            });
                                 
        }
    }); 

                        
    removeReference();
    addRequiredParentOnSaved();
     
    $('#ListMainRel1 .objName').text($('#priName').text());
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
     resetFreemiumHTML();
    </apex:outputText>
                        
                        
}
function resetFreemiumHTML()
{
    $('#divForFields .list-toggle-div').unbind('click');
    if($.inArray($('#ListMainRel1 .objName').text(), validObjects())<0)
    {
        $('#ListMainRel1 .freemium-html').html(getFreemiumHTML('Fields from this object type are','',''));
        $('#ListMainRel1 .freemium-html').show();
        $('#ListMainRel1 .list-toggle-div').bind( "click", function() {
            upgradeNowMessage("Only Case, Account, Contact and Lead fields are available in Fast Forms free edition.","","http://visualantidote.com/fastforms#Subscribe");
        });
    }
    $('.available-fields-block-wrapper .list-toggle-div-wrap').each(function (indx,ListRelElem){
        $(ListRelElem).find('.freemium-html').html(getFreemiumHTML('Multi-object forms are','',''));
        $(ListRelElem).find('.freemium-html').show();
        $(ListRelElem).find('.list-toggle-div').bind( "click", function() {
            upgradeNowMessage("Multi-object forms are only available for paid subscriptions","","http://visualantidote.com/fastforms#Subscribe");
        });
    });
                    
}
function SetTitleColor()
{
    console.log(' in SetTitleColor');
                       
    var indxImg=1;
    $('.list-toggle-div-wrap').removeAttr('data-ischild');
    $('.list-toggle-div-wrap').removeAttr('data-childclass');
    $('.list-toggle-div-wrap').removeClass('child-');
                      
    RemoveAllClassColorCodes($('.list-toggle-div-wrap'));
                       
    $('.form-information .secName-wrap').each(function(indx,parentDiv){
        var imgSrc=$(parentDiv).hasClass('object-detail');
                        
        if($(parentDiv).hasClass('object-detail') && !isNullOrEmpty($(parentDiv).attr('data-relobj')) && !isNullOrEmpty($($('.list-toggle-div-wrap')[indx+1]).attr('id')))
        {
            var childindx=$(parentDiv).attr('data-relobj');
            var listIdElem=$($('.list-toggle-div-wrap')[indx+1]);
            var backimgcss=$('.secName-wrap.object-detail.relobj-'+childindx+' .secName').css('background-image');
            $(listIdElem).find('.objName').css('background-image',"none");
            $(listIdElem).find('.objName').css('background-image',backimgcss);//"url("+imgSrc+")");
            $(listIdElem).find('.objName').css('background-position',"right center");
            $(listIdElem).find('.objName').css('background-repeat',"no-repeat");
            $(listIdElem).attr('data-ischild','true');
            var childClass='';
            if(!isNullOrEmpty(colorTagArray[childindx]))
            {
                childClass= colorTagArray[childindx];
            }
            $(listIdElem).attr('data-childclass',childClass);
                                 
        }
    });
    $('.list-toggle-div-wrap').each(function(indx,elem){
        var isChild=$(elem).attr('data-ischild');
        var childClass=$(elem).attr('data-childclass');
        if(!isNullOrEmpty(isChild) && !isNullOrEmpty(childClass) && (isChild=='true' || isChild==true))
        {
            $(elem).addClass('child-'+childClass);
        }
    });
}
var isSame=false;
function addRequiredParentOnSaved(){
                         
    SetTitleColor();
    //Remove required reference field from Editor Area            
    $('#multiPageUlForm   li.fieldLi').each(function(){                 
        if($(this).hasClass('lbl') == false ){                                                                        
            if($(this).hasClass('sortableForRelFields1') && isFieldReference(this))
            {
                deleteFieldByParentFieldLi($(this),true);
                //$(this).hide();                                
            }
        }
    });
                               
                        
    removeReference();
    removePrimaryLookupField();
    $("#sortableForRelFields1").find('li').each(function(){
        if($(this).find('textarea').length>0){
            $(this).find('textarea').text('');
        } 
        var  isrequired=getSafeBoolean($(this).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr("data-isdefaultreq"),false);

        if(($(this).css("display") != "none" && isrequired) || (isrequired && ! isFieldReference(this))){ 
                                         
                                            
            $(this).find('.labelDiv .ff-required-mark').remove();
            $(this).find('.labelDiv .ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));
            $(this).dblclick();
                                                
        } 
                                                   
    });                
                        
    $('.available-fields-block-wrapper .list-toggle-div-wrap ul.dropfields').each(function(indx,sortableUL){
        $(sortableUL).find('li').each(function(){
            if($(this).find('textarea').length>0){
                $(this).find('textarea').text('');
            }
                                 
            var listId=''; 
            var  isrequired=getSafeBoolean($(this).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea').attr("data-isdefaultreq"),false);

            if($(this).css("display") != "none" && isrequired  ){ 
                $(this).find('.labelDiv .ff-required-mark').remove();
                $(this).find('.labelDiv .ff-label').after($('<span/>',{'class':'ff-required-mark','html':'*'}));                      
                $(this).dblclick();
                                                 
            }
                                            
                                             
                                  
        });
    });              
                         
}

function resetAfterPrimaryObjectChange(){
    $('.select-secondary-element-wrapper').find('.secondary-object-block').each(function(i, secSelectBlock) {

        $(secSelectBlock).find('.select2-container').remove();
    });
    reEnableHeaderSection();

}
function resetSelect(){
    $('.select-secondary-element-wrapper').find('.secondary-object-block').remove();
    $('#mainMultiPageWrapper .formFieldUl li.fieldLi').each(function(indx,fieldLiElem){
        var fieldLiId=$(fieldLiElem).attr('id');//deleteSignatureField
        if(!isNullOrEmpty(fieldLiId) && fieldLiId.indexOf('lblliFASTFORMSPAYMENT')>=0){
            deletePaymentFieldByParentFieldLi(fieldLiElem,false);
        }
        else{
            $(fieldLiElem).remove();
        }
                                               
    });
    DummyTrigger('');
    $('.change').removeClass('del');
    $('.del').removeClass('del'); 
    $('#tabList .button').removeClass('btnSaved');
    $("#FrmImg").attr("src", "{!URLFOR($Resource.iconImages,'Formexpand.png')}");
                        
    $("#frmSetting").slideUp(300);
                                                
    $('.editText').removeClass('disableColor');
    $('.form-editor-title-box').removeClass('va-disabled-items');
    $('.ObjectName').find('h4').removeClass('disableColor');
    $('.editText').val($('.FrmName').val());
    $('.frmSet').removeClass('disableColor');
    $("#FrmImg").addClass('curChange'); 
                         
    $('.objectDiv').removeClass('disableColor');
                       
    $('.tooltips').removeClass('disableColor');
    $('.tooltips').find('img').attr('src','{!URLFOR($Resource.iconImages,'Copy-icon-Back.png')}');         
    hideSection();
    $('#ListMainRel1 .objName').text($('#priName').text()+' Fields');            
}
                
               

function getObjectChangeInfo(selectBlockElement,thisElement)
{
    var objUsedInRule=false;
    var relIndex=0;
    var selectElement=$(selectBlockElement).find('select');
    var repeatChkbxElement=$(selectBlockElement).find('.repeat-object-box input.chkbx-repeating');
    relIndex= $(selectElement).attr('data-rel-index');      
    var zeroBasedIndex=relIndex;
    var sortableIndx=relIndex;
    sortableIndx++;
    var sortForRelFieldsClass="sortableForRelFields"+sortableIndx;
    var   fieldsExist=false;
    var lstOfFields='<ul style="text-align:left">';
    var lifieldsCount=0;
    $('#mainMultiPageWrapper .formFieldUl li.fieldLi').each(function(){
        if($(this).hasClass(sortForRelFieldsClass)){
                        
            fieldsExist=true;
            var liElement= $(this);
            var fieldId =getFormattedElemId(liElement);
            if (itemUsedInRule(fieldId))
                objUsedInRule = true;

            if( lifieldsCount<5)
            {
                lstOfFields +='<li>'+$(this).find('div.labelDiv label.ff-label').text()+'</li>';
            }
            lifieldsCount++; 
                                                             
        }
                 
    });
    if(lifieldsCount>5)
    {
        var extraFieldsCount= lifieldsCount-5;
        lstOfFields +='<li> and '+extraFieldsCount+' more </li>';
    }
    lstOfFields = lstOfFields+'</ul>';
     
    var  childClassSpan='';
    if(fieldsExist){                    
            
        if($('.form-information .secName-wrap').length>=zeroBasedIndex)
        {
            var relObjIndx= $('.form-information .secName-wrap').eq( zeroBasedIndex-1 ).attr('data-relobj');
            if(!isNullOrEmpty(relObjIndx) && !isNullOrEmpty(colorTagArray[relObjIndx]))
            { 
                childClassSpan='<span class="child-class color-'+colorTagArray[relObjIndx]+'"></span>';
            }
        }
    }
    var messageText='';
    if(objUsedInRule){
        messageText="<div class='primary'>Sorry, can’t make this object repeatable.</div> <br/> <br /><div class='secondary'>Some of the fields of <b>"+ selectRelObjTextByIndex(zeroBasedIndex)+ childClassSpan + "</b> are currently being used in one or more conditional rules. If you want to make this object repeatable, please remove or edit any rules that use these fields.</div>";
    }else if(fieldsExist){
        if($(thisElement).hasClass('chkbx-repeating')){
            messageText="<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to make this object repeatable?<br /><br /></div><div class='secondary'>Making this object repeatable will place these fields into a repeatable section: <br/>" + lstOfFields + "Your current layout will be lost, but you can uncheck this option at any time.</div></div>";
        }else{
            messageText="<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to remove this object?<br /><br /></div><div class='secondary'>Removing <b>"+ selectRelObjTextByIndex(zeroBasedIndex)+ childClassSpan + "</b> will remove the following fields from your form:<br/>" + lstOfFields + "</div></div>";
        }
    }else{
        if($(thisElement).hasClass('chkbx-repeating')){
            messageText="<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to make this object repeatable?<br /><br /></div><div class='secondary'>You can uncheck this option any time.</div></div>";
        }else{
            messageText='';
        }
    }
    var data={'UsedInRule':objUsedInRule,'FieldExistOnForm':fieldsExist,'Message':messageText};
    return data;
}
function repeatRelObject(thisElement,isAutoSave)
{
    var objUsedInRule=false;
    
    var newRepeat=false;
    if($(thisElement).is(':checked')){
        newRepeat=true;
    }
    var secSelectBlock=$(thisElement).parents('.secondary-object-block');
    var relIndex=$(secSelectBlock).find('select').attr('data-rel-index');
    var zeroBasedIndex=relIndex;
    console.log('REPEAT Check: '+$(thisElement).is(':checked'));
    var sortableIndx=relIndex;
    sortableIndx++;
    var sortForRelFieldsClass="sortableForRelFields"+sortableIndx; 
    var packageNative=false;
    <apex:outputText rendered="{!if(packageTier=='NativeCloud',true,false)}">
    packageNative=true;
    </apex:outputText>
    <apex:outputText rendered="{!if(packageTier=='Enterprise' || packageTier=='NativeCloud',false,true)}">
    var upgradeMessage="Repeatable objects are only available for Enterprise and NativeCloud subscriptions.";
    /*if(packageNative){
      upgradeMessage="Repeatable objects are not available in NativeCloud. It is only available for Enterprise subscriptions.";
    }*/
    upgradeNowMessage(upgradeMessage,"","http://visualantidote.com/fastforms#Subscribe");
    if(newRepeat){$(thisElement).prop('checked',false);}else{
        $(thisElement).prop('checked',true);
    }
    return false;
                       
    </apex:outputText>
    <apex:outputText rendered="{!if(packageTier=='Enterprise' || packageTier=='NativeCloud',true,false)}">
    
var objectChangedInfo= getObjectChangeInfo(secSelectBlock,thisElement);
    var   fieldsExist=objectChangedInfo.FieldExistOnForm;
    objUsedInRule=objectChangedInfo.UsedInRule;
        
        
    var childClass='';
        
    if(!newRepeat){
        objectChangedInfo.Message="<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to do this?<br /><br /></div><div class='secondary'>Your users will no longer be able to add multiple records of this same object.</div></div>";;
    }
    if (objUsedInRule) {
        showError(objectChangedInfo.Message);
        callback(false);
    } else {
        var dialogBody =objectChangedInfo.Message;  
        $("#dialog-confirm").html(dialogBody);
                                     
         
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Save",
            height: "auto",
            width: 413,
            buttons:  {
                "Yes":{
                    click: function () {
                        $(this).dialog('close');
                        callback(true); 
                    },
                    text: 'Yes',
                    'class': 'vabutton1'
                },
                "No":{
                    click: function () {
                        $(this).dialog('close');
                                                                                                                             
                        callback(false);
                    },
                    text: 'No',
                    'class': 'vabutton2'
                }                         
            },
                                                                                    
            open: function( event, ui ) {
                $('.ui-dialog :button').blur();
            }
        });
    }
         
    $('.ui-dialog :button').blur();
    $('#dialog-confirm').dialog('option', 'position', 'center');
    function callback(value) {
        if (value) { 
            resetObjectFieldLists(true);                                                                        
        }else {
            $(thisElement).prop('checked',!newRepeat);                                                    
            return false;
        }
    }
    
    </apex:outputText>
    
}
function OnChangeRelatedObject(thisElement,callBackConfirmed)
{
    var objUsedInRule=false;
    var relIndex=$(thisElement).attr('data-rel-index');
    var zeroBasedIndex=relIndex;
    var secSelectBlock=$(thisElement).parents('.secondary-object-block');
    var sortableIndx=relIndex;
    sortableIndx++;
    var sortForRelFieldsClass="sortableForRelFields"+sortableIndx;
    var currentSelectedValue=$(thisElement).val();
    var originalRelObjectValue =  selectRelObjIdByIndex(zeroBasedIndex);
    <apex:outputText rendered="{!if(isFreemium,true,false)}">
       upgradeNowMessage("Related objects are only available for paid subscriptions.","","http://visualantidote.com/fastforms#Subscribe");
 
    $(thisElement).select2("val", originalRelObjectValue);
    return false;
                       
    </apex:outputText>
    <apex:outputText rendered="{!if(isFreemium,false,true)}">
if(originalRelObjectValue != ""){
    /*Enters if selected select element had value before the change*/
    var objectChangedInfo= getObjectChangeInfo(secSelectBlock,thisElement);
    var   fieldsExist=objectChangedInfo.FieldExistOnForm;
    objUsedInRule=objectChangedInfo.UsedInRule;
        
        
    var childClass='';
        
    if(fieldsExist){                    
             
                                                
        if (objUsedInRule) {
            showError(objectChangedInfo.Message);
            callback(false);
        } else {
            var dialogBody = objectChangedInfo.Message;
                                                        
            $("#dialog-confirm").html(dialogBody);
                                     
         
            // Define the Dialog and its properties.
            $("#dialog-confirm").dialog({
                resizable: false,
                modal: true,
                title: "Save",
                height: "auto",
                width: 413,
                buttons:  {
                    "Yes":{
                        click: function () {
                            $(this).dialog('close');
                            callback(true);
                            changeRelObjIndx=relIndex;
                        },
                        text: 'Yes',
                        'class': 'vabutton1'
                    },
                    "No":{
                        click: function () {
                            $(this).dialog('close');
                                                                                                                             
                            callback(false);
                        },
                        text: 'No',
                        'class': 'vabutton2'
                    }                         
                },
                                                                                    
                open: function( event, ui ) {
                    $('.ui-dialog :button').blur();
                }
            });
        }
    }else{
        /* if current object does not have any field on the form*/ 
        if($(secSelectBlock).find('select.select-secondary-element option:selected').attr("name")=='detail'){
            $(secSelectBlock).find('.repeat-object-box').removeClass('display-none');
        }else{
            $(secSelectBlock).find('.repeat-object-box').removeClass('display-none');
        }
         
            
        resetObjectFieldLists(true);
    }
    $('.ui-dialog :button').blur();
    $('#dialog-confirm').dialog('option', 'position', 'center');
    function callback(value) {
        if (value) { 
            deleteRemovedObjFieldLi(thisElement);
            //Saved();
            resetObjectFieldLists(true);
                                                                        
        }else {
            $(thisElement).select2("val", originalRelObjectValue);
              
                                                                                
            return false;
        }
    }
}
else
{ /*Enters if select element had not any value before*/ 
      if($(secSelectBlock).find('select.select-secondary-element option:selected').attr("name")=='detail'){
          $(secSelectBlock).find('.repeat-object-box').removeClass('display-none');
      }else{
          $(secSelectBlock).find('.repeat-object-box').removeClass('display-none');
}   resetObjectFieldLists(true);
         
}
     </apex:outputText>
                         
} 
 
/*onchangerelatedobject ends */
function updateFormSettingsSelectElements()
{
    $('.secondary-object-block .select2-container.select-secondary-element').each(function(indx,select2Elem){
        /*remove all classes starts with color-tag*/
        $(select2Elem).removeClass (function (index, css) {
            return (css.match (/(^|\s)color-tag-\S+/g) || []).join(' ');
        });
    });
    
    //Set Color indicator 
    var childCount=1;   
     
    $('.secondary-object-block .select2-container.select-secondary-element a.select2-choice').find( ".color-span" ).remove();
    $('.secondary-object-block .secondary-object-block .scroll-parent').each(function (indx, selectElemParent) {
        var fistListVal = $(selectElemParent).find('select.select-secondary-element').val();
        var groupLabel = $(selectElemParent).find("select.select-secondary-element option[value='" + fistListVal + "']").parent().attr('label');
        var containerHtml = '';
        if (groupLabel == "Child Objects") {
             
            //containerHtml = '<img class="branchImage" src="'+ffcommonResuorceUrl+'/iconalpha/'+colorTagArray[childCount]+'.png" />';
            containerHtml = '<span class="color-span '+colorTagArray[childCount]+'"></span>';
            childCount += 1;
        }
        $(selectElemParent).find('.select2-container.select-secondary-element a.select2-choice').append(containerHtml);
    });
    disableSelectLookupOption();
}
function deleteRemovedObjFieldLi(relSelectElem)
{
    var relIndex= $(relSelectElem).attr('data-rel-index');

    if(!isNullOrEmpty(relIndex))
    {   
        var listIndx=relIndex;
        listIndx++; 
        if($('#ListMainRel'+listIndx)!=undefined)
        {
            var sortableClassName= $('#ListMainRel'+listIndx).find('ul.dropfields').attr('id');
            if(!isNullOrEmpty(sortableClassName))
            {
                $("#mainMultiPageWrapper .formFieldUl li.fieldLi").each(function () {
                    if ( $(this).hasClass(sortableClassName)) {
                        $(this).remove();
                    }
                             
                });
            }
        }
    }
    save(false,true);
}
function addRelatedObject(elemSource)
{
    <apex:outputText rendered="{!IF(isFreemium,true,false )}">

                      upgradeNowMessage("Related objects are only available for paid subscriptions.","","http://visualantidote.com/fastforms#Subscribe");
 
    </apex:outputText>
    <apex:outputText rendered="{!IF(isFreemium,false,true )}">

                         
var parentWrapperDiv=$(elemSource).parents('.select-secondary-element-wrapper');
    $(parentWrapperDiv).find('div.scroll-parent.add-related-obj').hide();
        
    var relWrapElem=$('<div/>').html($('#relatedSelObjWrapperTEMP').html());
            
    var selectHTML =getRelatedObjSelectOptionHTML();
             
    if($(parentWrapperDiv).find('.secondary-object-block').length>0)
    {

        var lastDiv = $(parentWrapperDiv).find('.secondary-object-block').last();
        $( lastDiv ).after( $( relWrapElem).html() );
    }
    else
    {
        $( parentWrapperDiv ).prepend( $( relWrapElem).html() );
               
    }
    if($(parentWrapperDiv).find('.secondary-object-block').length>0)
    {
        var count=$(parentWrapperDiv).find('.secondary-object-block').length;
        var lastDiv = $(parentWrapperDiv).find('.secondary-object-block').last();
        $( lastDiv).find('select.select-secondary-element').removeClass('select-related-');
        $( lastDiv).find('select.select-secondary-element').addClass('select-related-'+count);
        $( lastDiv).find('select.select-secondary-element').attr('data-rel-index',count);
        $( lastDiv).find('.repeat-object-box input.vff-checkbox').attr('id','chkbxrepeating'+count);
        $( lastDiv).find('.repeat-object-box label').attr('for','chkbxrepeating'+count);
        restructureRelatedObjSelectElement($( lastDiv).find('select.select-secondary-element'), selectHTML);
    }
    else
    {
        var elementDiv=$(parentWrapperDiv).find('.secondary-object-block');
        $( elementDiv).find('select.select-secondary-element').removeClass('select-related-');
        $( elementDiv).find('select.select-secondary-element').addClass('select-related-1');
        $( elementDiv).find('select.select-secondary-element').attr('data-rel-index',1);
        $( elementDiv).find('.repeat-object-box input.vff-checkbox').attr('id','chkbxrepeating'+1);
        $( elementDiv).find('.repeat-object-box label').attr('for','chkbxrepeating'+1);
    }
    if($(parentWrapperDiv).find('.secondary-object-block').length<maxRelatedObject)
    {
        $(parentWrapperDiv).find('div.scroll-parent.add-related-obj').show();
    }
    disableSelectLookupOption();
    </apex:outputText>
}
function resetAddRelatedObjectBlock(){
    if($('.select-secondary-element-wrapper .secondary-object-block').length<maxRelatedObject)
    {
        $('.select-secondary-element-wrapper').find('div.scroll-parent.add-related-obj').show();
    }
    else
    {
        $('.select-secondary-element-wrapper').find('div.scroll-parent.add-related-obj').hide();
    }
}

function deleteRelObject(elemSource)
{
    var selectElem=$(elemSource).parents('.secondary-object-block').find('select.select-secondary-element');
    var currentSelectedValue=$(selectElem).val();
    if(!isNullOrEmpty(currentSelectedValue))
    {
        var objUsedInRule=false;

        var relIndex=$(selectElem).attr('data-rel-index');
        var zeroBasedIndex=relIndex;
        var sortableIndx=relIndex;
        sortableIndx++;
        var sortForRelFieldsClass="sortableForRelFields"+sortableIndx;
      
        
        var originalRelObjectValue =  selectRelObjIdByIndex(zeroBasedIndex);
     
        var   fieldsExist=false;
        var lstOfFields='<ul style="text-align:left">';
        var lifieldsCount=0;
        $("#mainMultiPageWrapper .formFieldUl li.fieldLi").each(function(){
            if($(this).hasClass(sortForRelFieldsClass)){
                // var fieldId = $(this).find('.fieldDiv input,textarea,select').eq(0).attr('id');
                /*modified to fix the child object element id issue on mar 10 2015 */
                fieldsExist=true;
                var liElement= $(this);
                var fieldId =getFormattedElemId(liElement);
                if (itemUsedInRule(fieldId))
                    objUsedInRule = true;

                if( lifieldsCount<5)
                {
                    lstOfFields +='<li>'+$(this).find('div > label').eq(0).text()+'</li>';
                }
                lifieldsCount++; /*updated by balinder nov 21 2014- issue:#38 Popup text issue in modal confirm when editdialog is open and useer tries to save the changes*/
                                                             
            }
                   
        });
        if(lifieldsCount>5)
        {
            var extraFieldsCount= lifieldsCount-5;
            lstOfFields +='<li> and '+extraFieldsCount+' more </li>';
        }
        lstOfFields = lstOfFields+'</ul>';
        
        var childClass='';
        
        if(fieldsExist || objUsedInRule){                    
            var  childClassSpan='';
            if($('.form-information .secName-wrap').length>=zeroBasedIndex)
            {
                var relObjIndx= $('.form-information .secName-wrap').eq( zeroBasedIndex-1 ).attr('data-relobj');
                if(!isNullOrEmpty(relObjIndx) && !isNullOrEmpty(colorTagArray[relObjIndx]))
                {
                    childClass= colorTagArray[relObjIndx];
                    childClassSpan='<span class="child-class color-'+childClass+'"></span>';
                }
            }
                                                
            if (objUsedInRule) {
                showError("<div class='primary'>This object's fields are being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
                callback(false);
            } else {
                var dialogBody = "<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>Are you sure you want to remove this object?<br /><br /></div><div class='secondary'>Removing <b>"+ selectRelObjTextByIndex(zeroBasedIndex)+ childClassSpan + "</b> will remove the following fields from your form:<br/>" + lstOfFields + "</div></div>";
                                                        
                $("#dialog-confirm").html(dialogBody);
                                     
         
                // Define the Dialog and its properties.
                $("#dialog-confirm").dialog({
                    resizable: false,
                    modal: true,
                    title: "Save",
                    height: "auto",
                    width: 413,
                    buttons:  {                        
                        "Yes":{
                            click: function () {
                                $(this).dialog('close');
                                callback(true);
                                changeRelObjIndx=relIndex;
                            },
                            text: 'Yes',
                            'class': 'vabutton1'
                        },
                        "No":{
                            click: function () {
                                $(this).dialog('close');
                                                                                                                             
                                callback(false);
                            },
                            text: 'No',
                            'class': 'vabutton2'
                        }                         
                    },
                                                                                    
                    open: function( event, ui ) {
                        $('.ui-dialog :button').blur();
                    }
                });
            }
        }else{
                                                         
            doDeleteRelatedObject(elemSource);
            
        }
        $('.ui-dialog :button').blur();
        $('#dialog-confirm').dialog('option', 'position', 'center');
        function callback(value) {
            if (value) {
                if($(selectElem).val == ''){                     
                    
                }else{
                    doDeleteRelatedObject(elemSource);
                }
                
                                                                        
            }else {
                $(selectElem).select2("val", originalRelObjectValue);
              
                                                                                
                return false;
            }
        }
    }
    else{
        doDeleteRelatedObject(elemSource);
    }
     
}
function doDeleteRelatedObject(elemSource)
{
    var parentObjectElemDiv=$(elemSource).parents('.secondary-object-block');
    var relindx=$(parentObjectElemDiv).find('select.select-secondary-element').attr('data-rel-index');
    deleteRemovedObjFieldLi($(parentObjectElemDiv).find('select.select-secondary-element'));
    var relcount=1;
    $('.select-secondary-element-wrapper .secondary-object-block').each(function (indx,selectElemParentDiv) {
        var nextcount=relcount;
        nextcount++;
        var currentclass="select-related-"+relcount;
        var nextclass="select-related-"+nextcount;
        if($(selectElemParentDiv).find('select.select-secondary-element').hasClass(nextclass)){
            $(selectElemParentDiv).find('select.select-secondary-element').removeClass(nextclass);
            $(selectElemParentDiv).find('div.select2-container.select-secondary-element').removeClass(nextclass);
        }
        else if($(selectElemParentDiv).find('select.select-secondary-element').hasClass(currentclass)){
            $(selectElemParentDiv).find('select.select-secondary-element').removeClass(currentclass);   
            $(selectElemParentDiv).find('div.select2-container.select-secondary-element').removeClass(currentclass);  
        }
        
        $(selectElemParentDiv).find('select.select-secondary-element').attr('data-rel-index','0');
        relcount++;
    });
    $(parentObjectElemDiv).remove();
    var relcount=1;
    $('.select-secondary-element-wrapper .secondary-object-block').each(function (indx,selectElemParentDiv) {
        var currentclass="select-related-"+relcount;
        $(selectElemParentDiv).find('select.select-secondary-element').addClass(currentclass);
        $(selectElemParentDiv).find('div.select2-container.select-secondary-element').addClass(currentclass);
        $(selectElemParentDiv).find('select.select-secondary-element').attr('data-rel-index',relcount);
        relcount++;
    });
       
        
                     
    for (indx =relindx; indx< $('.select-secondary-element-wrapper .secondary-object-block').length+2; indx++) { 
                    
        var nextindx=indx;
        nextindx++;
        var sortableClassname='sortableForRelFields'+nextindx;
        var updatedSortableClassname='sortableForRelFields'+indx;
        $("#mainMultiPageWrapper .formFieldUl li.fieldLi").each(function () {
                           
            if ($(this).hasClass(sortableClassname)) {
                $(this).removeClass(sortableClassname);
                $(this).addClass(updatedSortableClassname);
                if($(this).find('.labelDiv .obj-info').length>0){
                    $(this).find('.labelDiv .obj-info').attr('data-listname',updatedSortableClassname);
                }
            }
                                
        });
    }
             
    // Saved();
    resetObjectFieldLists();
}
function restructureRelatedObjSelectElement(selectElement,selecthtml)
{
    var selectedValue=$(selectElement).val();
    var elemClass=$(selectElement).attr("class");
    if(isNullOrEmpty(selectedValue))
    {
        selectedValue="";
    }

    $(selectElement).empty();
    $(selectElement).append(selecthtml);
    $(selectElement).select2();
    $(selectElement).select2("val", selectedValue);
}
function getRelatedObjSelectOptionHTML(){
    var htmlForSelect='';
    console.log(' Fill select ');
    var countObj=0;
    var tempSelectElementDiv=$('.tempSelectRelatedListCSS') ;
    $(tempSelectElementDiv).find('select.select-secondary-element > option').each(function() {  
        countObj++;
        if($(this).text() == '----Select Child Object----'){
            return false;
        }  
    });
    var idx=0,newHtml='',newHtmlgrp='';
    var sec=0;
    $(tempSelectElementDiv).find('select.select-secondary-element > option').each(function() { 
        idx++;
        if(countObj > idx){
            // console.log(' here in if  lookup select val -' + $(this).val());
            if(idx != 1){
                var optionText=extraSpaceSafe($(this).text());
                optionText=optionText.replace(' ID','');
                newHtml += '<option name="lookup" value="' + extraSpaceSafe($(this).val()) + '">' + optionText + ' </option>';
            }
                                         
        }
        else{ 
            //  console.log(' here in if  detail select val -' + $(this).val());
            sec++;
            if(sec != 1){
                var optionText=$(this).text();
                optionText=optionText.replace(' ID','');
                newHtmlgrp += '<option class="childoption2" name="detail" value="' + extraSpaceSafe($(this).val()) + '">' + optionText + ' </option>';
            }
                                     
        }
    });
                             
    htmlForSelect+='<option value="">----Select Object----</option>';
    htmlForSelect+='<optgroup class="LookupOption" label="Lookup Objects" >' + newHtml + '</optgroup>' ;
    htmlForSelect+='<optgroup class="ChildOption" label="Child Objects" >' + newHtmlgrp + '</optgroup>' ;
                        
                                
    return htmlForSelect;    
                                
}
                   
function extraSpaceSafe(elemValue)
{
    if(elemValue!==undefined && elemValue!=null && elemValue!='')
    {
        elemValue=elemValue.replace('  (',' (');
    }
    return elemValue;
}
function verifyPackage(chk){        
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}">
                                        
                    upgradeNowMessage('Record updates are only available in Professional, Enterprise and NativeCloud editions of Fast Forms.','','');                         
    chk.checked = false;
    </apex:outputText>
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">
                    var lblelem = $(chk).parents('div[class="ExpandDiv"]').parent().find('div:first-child > label').eq(0);
    var lblId = lblelem.attr('id');
                                        
    mixpanel.track('Field upsert option checked',{ "Field ID": lblId});
    var metadata = {
        field_name: lblId
    };
    sendInfoToIntercom('trackEvent', 'enabled-upsert', metadata);                                        
    addLabel($(chk));
    resetSavedButton();
                                        
    </apex:outputText>
}
function clearFieldInfoPopupContent(liElement){
    if(!$(liElement).find('.sfff-field-info').hasClass('display-none'))
    {
        $(liElement).find('.sfff-field-info').addClass('display-none');
    }
                 
    $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-f').html('');
    $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-r').html('');
    $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-h').html('');
}
function generateFieldInfoPopupContent(liElement){       
    var elementid= getFormattedElemId(liElement);
    var liId=$(liElement).attr('id');
    var isFieldHidden=false;
    if($('#'+liId).find('label.ff-label').hasClass("grayLabel"))
    {
                    
        $('#'+liId).find('.field-info-tooltip').find('.fi-tooltip-text-h').append('<span class="fi-letter-icon">H</span>Field set as hidden ');
    }
                    
    $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-f').append('<span class="fi-letter-icon">F</span>Field: '+elementid+'');
    if(elementid!='undefined' && elementid!='' && ruleObjectsData.length>0)
    {
                     
        var rulestr=isRuleExistForId(elementid);
        if(rulestr!='undefined' && rulestr!='')
        {
                    
            $(liElement).find('.field-info-tooltip').find('.fi-tooltip-text-r').append('<span class="fi-letter-icon">R</span>Rule: '+rulestr+'');
        }
    }
                     
}
function isRuleExistsForIdNotInuse(elementid)
{
    var ruleexists=[];
    if(ruleObjectsData.length==0)
    {
                 
    }
                    
    var returnstr='';
    if(ruleObjectsData!='undefined' && ruleObjectsData.length>0)
    {
        $.each(ruleObjectsData, function(index, jsonitem) {
            if(jsonitem[index]!='undefined')
            {
                var ruleorder=jsonitem[index].ruleorder;
                console.log(' ruleOrder index '+jsonitem[index].ruleorder );
                console.log('  Rule fields data length -' +jsonitem[index].rulefields);
                $.each(jsonitem[index].rulefields, function(index2, jsonrulefields) {
                    if(jsonrulefields[index2]!='undefined' && jsonrulefields[index2]==elementid)
                    {
                        if($.inArray(ruleorder, ruleexists)==-1)
                        {
                            ruleexists.push(ruleorder);
                        }
                        console.log(' ruleOrder '+ruleorder +' for id '+elementid);
                    }
                });
            }
        });
    }
                                
    var str='';
    if(ruleexists!='undefined' && ruleexists.length>0)
    {
        str= ruleexists.join(",");
    }
    return   str;
}
function isRuleExistForId(elementid)
{
    var ruleexists=[];
                 
                 
    var ruleindex;
    if(ruleObjectsData.length>0)
    {
        for (ruleindex = 0; ruleindex < ruleObjectsData.length; ruleindex++) {
            var ruleobject= ruleObjectsData[ruleindex][0]; 
            var ruleorder=ruleobject.ruleorder;
                                        
            var ruleFields=ruleobject.rulefields; 
            var ruleitemindex;
            for (ruleitemindex = 0; ruleitemindex < ruleFields.length; ruleitemindex++) {
                                        
                if(ruleFields[ruleitemindex].rulefield!='undefined' && ruleFields[ruleitemindex].rulefield==elementid)
                { 
                    ruleexists.push(ruleorder);
                    if($.inArray(ruleorder, ruleexists)==-1)
                    {
                        ruleexists.push(ruleorder);
                    }
                }
            }
                                    
        }
    }
                                
    var str='';
    if(ruleexists!='undefined' && ruleexists.length>0)
    {
        str= ruleexists.join(",");
    }
    return   str;
}
 
function goToNextTourStop()
{
    if ($(".joyride-tip-guide").length > 0) {
                      
        $("#takeTour").foundation('joyride','go_next');
    }
}
function showNotification(elemid, textmsg)
{
    $('#' + elemid).fadeIn(250);
    $('#' + elemid).find('.msg-text-div').html(textmsg);
}
function hideNotification(elemid)
{
    $('#' + elemid).find('.msg-text-div').html('');
    $('#' + elemid).fadeOut(250);
}
function getOrSetJavascriptCodeJS(isUpdate,jscode)
{
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.getOrSetJavascriptCode)}',ffrecordid,isUpdate,escapeHtmlString(jscode),
       function(result, event) { 
                    
           if (event.status) {
                       
               if(result.IsValid)
               {
                   if(!isUpdate)
                   {
                       var jscode=unescapeHTMLString(result.ResultText);
                       initializeJSEditor(jscode);
                   }
                   else
                   {
                       console.log(' JSCode is saved successfully');
                   }
               }
               else
               {
                   console.log(' JSCode is null');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: false, timeout: 30000 }
   );
}
function remoteIsFormPublishedJS(){
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.remoteIsFormPublished)}',ffrecordid,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(!isNullOrEmpty(result) &&  (result || result.toLowerCase()=='true'))
               {
                   showSuccessMessage();
               }
               else
               {
                   var errormessage="<span >An error occurred when attempting to publish your form. Please refresh your page and try publishing again. If this issue persists, please contact the Fast Forms Support Team at support@fastforms.io.<span>  ";
                   showErrorMessage(errormessage);
                   messageLogToIntercom('Error occured in function-remoteIsFormPublishedJS');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
function resetEditorFreemiumNotificationJS(readonly)
{
    Visualforce.remoting.Manager.invokeAction('{!URLENCODE($RemoteAction.FormEditorController.resetFreemiumWarning)}',readonly,
       function(result, event) { 
                    
           if (event.status) {
                        
               if(result=='disabled')
               {
                   $('.freemium-msg-box-outer').fadeOut('fast');
               }
               else
               {
                   $('.freemium-msg-box-outer').fadeIn('slow');
               }
           } else {
               console.log(' Fail-'+result);
           }
                   
       },
       { buffer: true, escape: true, timeout: 30000 }
   );
}
/*Changes draft button on autosave*/
function draftchanges(val) {
    $('.publish-draft').removeClass('va-disabled');
    if (val) {
         
        $('.button-draft').fadeIn('fast');
        $('.button-draft').find('.draft-text').text('Draft Saving');
        $('.button-draft').removeClass('draft-saved');
        $('.button-draft').addClass('draft-saving'); 
    }
    else { 
        $('.button-draft').fadeIn('fast');
        $('.button-draft').find('.draft-text').text('Draft Saved');
        $('.button-draft').removeClass('draft-saving');
        $('.button-draft').addClass('draft-saved');
        
    }
}
    

var lstRuleFields;

function getRemoteRuleFieldsJs() {
    /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.getRemoteRuleFields)}',
            ffrecordid,
            function(result, event) {
                if(event.status) {
                                        
                    var decoded = $('<div/>').html(result[0]).text();
                                        
                    lstRuleFields = parseRuleXMLForJSON(decoded);
                        
                    console.log(' Rule order ' + result[1]);
                 
                } else if(event.type === 'exception') {
                    console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    console.log(" Exception 2- " + event.message);
                }
            },
            {
                escape: true
            }
    );
}
function getRemoteRuleFieldsInfoJs() {
    ruleObjectsData=[];
    overRideCheckRuleObject=true;
    /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.getRemoteRuleFieldsInfo)}',
            ffrecordid,
            function(result, event) {
                if(event.status) {
                                        
                    var decoded = $('<div/>').html(result[0]).text();
                                        
                    for(i=0;i<result.length;i+=2) {
        
                        var rulexml= $('<div/>').html(result[i]).text();
                                                 
                        var ruleorder= ''+result[i+1];
                        console.log(' RULEORDER -'+ruleorder);
                        var ruledt=parseRuleInfoInJSON(ruleorder,rulexml);
                        if(ruledt.length>0)
                        {
                            ruleObjectsData.push(ruledt);
                        }

                    }
                } else if(event.type === 'exception') {
                    console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    console.log(" Exception 2- " + event.message);
                }
            },
            {
                escape: true
            }
    );
             
}
function checkRuleBeforeDeleteElement(liElement,isAutoSave) {
    ruleObjectsData=[];
    overRideCheckRuleObject=true;
    /*JAVASCRIPT Remoting Method to populate Email draft configuration xml */
    var ffrecordid = '{!$CurrentPage.parameters.id}';
    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.getRemoteRuleFieldsInfo)}',
            ffrecordid,
            function(result, event) {
                if(event.status) {
                                        
                    var decoded = $('<div/>').html(result[0]).text();
                                        
                    for(i=0;i<result.length;i+=2) {
        
                        var rulexml= $('<div/>').html(result[i]).text();
                                                 
                        var ruleorder= ''+result[i+1];
                        console.log(' RULEORDER -'+ruleorder);
                        var ruledt=parseRuleInfoInJSON(ruleorder,rulexml);
                        if(ruledt.length>0)
                        {
                            ruleObjectsData.push(ruledt);
                        }
                        deleteElementCallBack(liElement,isAutoSave);
                    }
                } else if(event.type === 'exception') {
                    console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    console.log(" Exception 2- " + event.message);
                }
            },
            {
                escape: true
            }
    );
             
}
function remoteSaveFormPagesJs(formPagesJsonarr,formPublishStatus) {
          
    /*JAVASCRIPT Remoting Method to save Form Pages info then call to Main Previous_From_c object to change the form status to unpublish */
                 
    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteSaveFormPages)}',
            formPagesJsonarr,
            function(result, event) {
                if(event.status) {
                                        
                                        
                    if(result!=null && result.length>0)
                    {
                        for(i=0;i<result.length;i++) {
                            console.log(' Form page saved -'+result[i].ResultText);
                                                  
                        }
                        // updateFormMainObject(formPublishStatus,fieldsObjectXML);
                        updatePreviousFormObjForPublishToggle(formPublishStatus);
                    }
                } else if(event.type === 'exception') {
                    console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    console.log(" Exception 2- " + event.message);
                }
            },
            {
                escape: true
            }
    );
             
}
function remoteUpdateFormPagesOrderJs(formPagesJsonarr) {
          
    /*JAVASCRIPT Remoting Method to save order of Form Pages then call to Main Previous_From_c object to change the form status to unpublish */
                 
    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteUpdateFormPagesOrder)}',
            formPagesJsonarr,
            function(result, event) {
                if(event.status) {      
                    if(result!=null && result.length>0)
                    {
                        for(i=0;i<result.length;i++) {
                         console.log(' Page order updated -'+result[i].ResultText);                                                  
                        }
                        updatePreviousFormObjForPublishToggle('Unpublished');
                    }
                } else if(event.type === 'exception') {
                    console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                    draftchanges(false);
                } else {
                    console.log(" Exception 2- " + event.message);
                    draftchanges(false);
                }
            },
            {
                escape: true
            }
    );
             
}
        
function parseRuleXMLForJSON(xmlstr)
{
                
    var xmlDocElement=getXmlElementFromStr(xmlstr);
    return returnRuleJson(xmlDoc.getElementsByTagName("rule"));        
}  
function parseRuleInfoInJSON(ruleorder,xmlstr)
{
                
    var xmlDocElement=getXmlElementFromStr(xmlstr);
    return returnRuleJsonObjectInfo(ruleorder, xmlDoc.getElementsByTagName("rule"));

                     
}    

function returnRuleJson(elem)
{
    var data=[];
    var returnstr = '';

    $.each(elem, function(index, fieldElement){  
        if(fieldElement.childNodes.length>0)
        {

            $.each(fieldElement.getElementsByTagName("operand1"), function(index, item){
                data.push($(item).text());
            });
            $.each(fieldElement.getElementsByTagName("operand2"), function(index, item){
                if ($(item).attr('isdynamic') == 'true')
                    data.push($(item).text());                
            });
            $.each(fieldElement.getElementsByTagName("target"), function(index, item){
                if ($(item).attr('isdynamic') == 'true')
                    data.push($(item).text());                
            });
        }
    });          
    return data;
}

function returnRuleJsonObjectInfo(ruleorder,rulexmlelem)
{
    var ruledata=[];
    var returnstr = '';
    var fieldData=[];
    $.each(rulexmlelem, function(index, fieldElement){  
        if(fieldElement.childNodes.length>0)
        {

            $.each(fieldElement.getElementsByTagName("operand1"), function(index, item){
                fieldData.push(createJSONRuleObjField($(item).text()));     
            });
            $.each(fieldElement.getElementsByTagName("operand2"), function(index, item){
                if ($(item).attr('isdynamic') == 'true')
                    fieldData.push(createJSONRuleObjField($(item).text()));                  
            });
            $.each(fieldElement.getElementsByTagName("target"), function(index, item){
                if ($(item).attr('isdynamic') == 'true')
                    fieldData.push(createJSONRuleObjField($(item).text()));                
            });
                            
                            
        }
    }); 
    if(fieldData.length>0)
    {
        console.log('fieldData.length>0 ');
        ruledata.push(createJSONRuleObj(ruleorder,fieldData));    
    }         
    return ruledata;
}
function createJSONRuleObj(ruleorder, rulexml) {
        
    var dataobj = { "ruleorder":ruleorder , "rulefields": rulexml };


    return dataobj;
}
function createJSONRuleObjField( rulefield) {
    var dataobj = { "rulefield":rulefield };


    return dataobj;
}
function  toggleToFormEditor()
{
    $('.sfff-editor-tabs .sfff-editor-tab').each(function(i, tabli) {
        $(tabli).removeClass('fade');
        $(tabli).removeClass('active');
    });
    $('.sfff-form-editor-content').removeClass('fade');
    $('.sfff-form-editor-content').removeClass('active');
    $('.sfff-rule-editor-content').removeClass('fade');
    $('.sfff-rule-editor-content').removeClass('active');
  
    getRemoteRuleFieldsInfoJs();
                        
    setHover();
    $('#formEditorA').parents('.sfff-form-editor-li').addClass('active');
    $('#sfff-rule-editor').hide();             
    $('#sfff-form-editor').addClass('active');
    $('#sfff-form-editor').show();
                          
    CallUnloadStyleEditor();
}
function toggleTab(elem){
    if ($(elem).attr('id') == 'formEditorA'){
        CallUnloadRuleEditor();
                    
        getRemoteRuleFieldsInfoJs();
                        
        setHover();
        $('#sfff-rule-editor').hide();
        $('#sfff-form-editor').show();
        $('#sfff-style-editor').hide();
        $('#sfff-alert-editor').hide(); 
        CallUnloadStyleEditor();   

    } else if($(elem).attr('id') == 'ruleEditorA') {  
        mixpanel.track('Rules Tab clicked');
        sendInfoToIntercom('trackEvent', 'clicked-edit-rule-tab');
        CallUnloadStyleEditor();   
        $('#sfff-rule-editor').show();
        $('#sfff-form-editor').hide();                    
        $('#sfff-style-editor').hide();
        $('#sfff-alert-editor').hide();                    
        isChangesMadeInForm = true;
        autosaveTriggered();
                     
        <apex:outputText rendered="{!packageTier != 'Base'}">
        callLoadRuleEditor();
        </apex:outputText>
        // resetSelect2();        
    }
    else if($(elem).attr('id') == 'alertEditor') {  
        mixpanel.track('Alert Tab clicked');
        sendInfoToIntercom('trackEvent', 'clicked-edit-alert-tab');
        CallUnloadStyleEditor();   
        $('#sfff-rule-editor').hide();
        $('#sfff-form-editor').hide(); 
        $('#sfff-alert-editor').show();                   
        $('#sfff-style-editor').hide();                   
        isChangesMadeInForm = true;  
        var pageURL = "{!$Resource.ffcommon}/pages/messagecenter.html";
        $('.sfff-alert-editor-body').load(pageURL, function( response, status, xhr ) {
            if ( status == "error" ) { 
              console.log('Error loading the Edit Alert Page:' + xhr.status + ' ' + xhr.statusText );
            }else{
              //console.log('Loading alert completed');
              
              if($('#sfff-system-alert').length>0){
                toggleAlertsTab($('#systemAlert'));
              }
            }
          });                     
    }
    else
    {
        mixpanel.track('Style Tab clicked');
        sendInfoToIntercom('trackEvent', 'clicked-edit-style-tab');
        $('#sfff-rule-editor').hide();
        $('#sfff-form-editor').hide();
        $('#sfff-style-editor').show();
        $('#sfff-alert-editor').hide(); 
        isChangesMadeInForm = true;
        autosaveTriggered();
        callLoadStyleEditor();
    }
}
function callLoadRuleEditor()
{
    console.log('loadRuleEditorCall ');
    showMainRuleRepeater(false);
    loadRuleEditorCall(true);
}
function rerenderRuleEditorCall()
{
    rerenderRuleEditor();
}
function CallUnloadRuleEditor()
{
    console.log(' CallUnloadRuleEditor ');
    unloadRuleEditorCall(false);
}
function showMainRuleRepeater(showRulediv)
{
    if(showRulediv)
    {
        console.log(' Show '+showRulediv);
        $('.ruleEditorWrapperCSS #pnlRuleEditorContent').show();

    }
    else
    {
        console.log(' HIDE '+showRulediv);
        $('.ruleEditorWrapperCSS #pnlRuleEditorContent').hide();
    }

}

function callLoadStyleEditor()
{
    console.log('loadRuleEditorCall ');
    showMainStyleRepeater(false);
    loadStyleEditorCall(true);
}
function rerenderStyleEditorCall()
{
    rerenderStyleEditor();
}
function CallUnloadStyleEditor()
{
    console.log(' CallUnloadStyleEditor ');
    unloadStyleEditorCall(false);
}
function showMainStyleRepeater(showStylediv)
{
    if(showStylediv)
    {
        console.log(' Show  Stylediv-'+showStylediv);
        $('.styleEditorWrapperCSS').show();

    }
    else
    {
        console.log(' HIDE  Stylediv-'+showStylediv);
        $('.styleEditorWrapperCSS').hide();
    }

}


function getExtension(filename) {
    var parts = filename.split('.');
    return parts[parts.length - 1];
}

function isImage(filename) {
    var ext = getExtension(filename);
    switch (ext.toLowerCase()) {
        case 'jpg':
        case 'jpeg':
        case 'gif':
        case 'png':
            //etc
            return true;
    }
    return false;
}


/* main function to upload image and all the animation in image control */
function uploadImageDoc(attachmentBody,attachmentName,  elementSourceParent, uploadType) {
     
    Visualforce.remoting.Manager.invokeAction(
             '{!URLENCODE($RemoteAction.FormEditorController.remoteUploadImageFile)}',
    attachmentBody, attachmentName ,
     function(data, event) {
          
         if(event.type === 'exception') {
             console.log("exception");
             console.log(event);
         } else if(event.status) {
             var response = [];
             try {
                 response =  data;
             }
             catch (err) {
                 console.log(' Catch json error ' + err.meesage);
                 try {
                     response = GetResponseData(data);
                 }
                 catch (err) {
                     console.log(' Catch xml parsing error ' + err.meesage);
                 }
             }
             if (response[0] == 'valid') {

                 var objid = response[1];

                 var fileUploadElement = $(elementSourceParent).find('.ffse-fileUpload-control');
                 var cssSelector = $(fileUploadElement).attr('data-ffstyle-selector');
                 var cssRuleDirective = $(fileUploadElement).attr('data-ffstyle-prop');
                 var imgsrc = 'https://' + sfdcHostName + '.salesforce.com/servlet/servlet.ImageServer?id=' + objid + '&oid=' + organisationId;
                 console.log(' Uploaded image src-' + imgsrc);
                 if (uploadType == 'StyleEditor') {
                     var $removeImage = $('<span/>', { 'class': 'ffse-remove-uploadedimg', html: 'Remove', 'data-imgdoc-id': objid });
                     var $img = $('<img/>', { 'src': imgsrc, 'class': 'ffse-uploaded-img', 'data-ffstyle-selector': cssSelector, 'data-ffstyle-prop': cssRuleDirective });
                     $(elementSourceParent).find('.ffse-img-upload-placeholder').show();
                     $(elementSourceParent).find('.ffse-img-upload-placeholder').html($img);
                     $(elementSourceParent).find('.ffse-img-upload-placeholder').append($removeImage);
                     var imgWidth = '80';
                     var imgHeight = '50';
                     $("<img/>").attr("src", $img.attr("src")).load(function () {
                         setImageDimensions(elementSourceParent, this.width, this.height, true);
                     });

                     uploadSuccess(elementSourceParent, true, uploadType);
                     $(elementSourceParent).find('.ffse-img-upload-placeholder .ffse-remove-uploadedimg').on("click", (function () {

                         removeImageCallBack(this, cssSelector, cssRuleDirective, uploadType);
                     }));
                 } else {
                     //var $removeImage=$('<span/>', { 'class':'ffse-remove-uploadedimg' ,html:'Remove', onClick:'removeEditorImage(this);', 'data-imgdoc-id':objid});
                     var imgId = $(elementSourceParent).parent().parent().parent().attr('id').replace('lblli', 'img');
                     var $img = $('<img/>', { 'id': imgId, 'src': imgsrc, 'data-ffstyle-selector': cssSelector });
                     $(elementSourceParent).find('.ffse-img-upload-placeholder-editor').show();
                     $(elementSourceParent).find('.ffse-img-upload-placeholder-editor').html($img);
                     //$(elementSourceParent).find('.ffse-img-upload-placeholder-editor').append($removeImage);
                     uploadSuccess(elementSourceParent, true, uploadType);
                 }



             }
             else {
                 console.log('Exception on server - ' + response[1]);
                 uploadError(elementSourceParent, "Error while uploading file" + response[1], uploadType);
             }
         } else {
             console.log(event.message);
         }
     },
     {buffer: true, escape: true, timeout: 120000}
   );
}
function uploadImageFile(files, elementSourceParent, uploadType) {

    var formData = !!window.FormData ? new FormData() : null;

    //Not sure why multiple files dropping, so for time being disable multi file functionality
    if (files.length > 1) {
        showError("<div class='primary'>Uploading multiple files is not supported, please upload a single file.</div>");
        return;
    } else if (!isImage(files[0].name)) {
        showError("<div class='primary'>Only jpg, gif, or png files are allowed.</div>");
        return;
    } else if (files[0].size / 1024 > 600) {
        showError("<div class='primary'>The image you have selected is greater than 600KB in size. Please select a smaller file.</div>");
        return;
    } 
    else{
        if(files[0] != undefined) {
            var file =  files[0];
       
            attachmentName = file.name;
            var fileReader = new FileReader();
            fileReader.onloadend = function(e) {
                var binary = "";
                var bytes = new Uint8Array(e.target.result);
                var length = bytes.byteLength; 
                for (var i = 0; i < length; i++) 
                {
                    binary += String.fromCharCode(bytes[i]);
                } 
                attachment = (new sforce.Base64Binary(binary)).toString();
                fileSize = attachment.length;
                console.log("Total Attachment Length: " + fileSize);
                doneUploading = false;
                if(fileSize/ 1024 < 600) {
                    uploadImageDoc(attachment,attachmentName,elementSourceParent, uploadType);
                } else {
                    uploadError(elementSourceParent,"Your file is too large.  Maximum size is 600KB, and the file you uploaded is " + (fileSize/ 1024) + ".",'');
                }
             
            }
            fileReader.onerror = function(e) {
                uploadError(elementSourceParent,"There was an error reading the file.  Please try again.",'');
            }
            fileReader.onabort = function(e) {
                uploadError(elementSourceParent,"There was an error reading the file.  Please try again.",'');
            }
         
            fileReader.readAsArrayBuffer(file);  //Read the body of the file
         
         
        }
    }

}
 
    
function GetResponseData(xmlstr)
{

 
    var xmlDocElement=getXmlElementFromStr(xmlstr);
    var jsondata=[];
    $.each(xmlDocElement.getElementsByTagName("item"), function (index, subitem) {
        jsondata.push($(subitem).text());
    });
    return jsondata;
}
function getXHR() { 
    var xhr= new XMLHttpRequest();
    if (xhr==null || xhr===undefined) {
         
   
        try { 
       
     
            xhr=  ActiveXObject('MSXML2.XMLHTTP.6.0');
        } catch (e) { 
            try { 
                // The fallback.
                xhr=  ActiveXObject(' MSXML2.XMLHTTP.3.0');
            } catch (e) { 
                alert('This browser is not AJAX enabled.'); 
                xhr=  null;
            } 
        }
    }
    return xhr; 
}
/* called on file upload success */
function uploadSuccess(elementParent,autoSave,uploadType)
{
    $(elementParent).find('.ffse-img-upload-error').html('');
    $(elementParent).find('.ffse-img-upload-error').hide();

    if(uploadType == 'StyleEditor')
    {
        $(elementParent).find('.ffse-img-uploading').hide();
        $(elementParent).find('.ffse-img-uploaded').hide(); 
        $(elementParent).find('.ffse-img-input-container').hide(); 
        uploadSuccessStyleEditorCallBack(elementParent,autoSave); 
            
    } else {
        $(elementParent).parent().parent().parent().removeClass('fieldLiImage');
        $(elementParent).parent().parent().parent().addClass('fieldLiImageActive');
        $(elementParent).find('.ffse-img-input-container-editor').hide();       
        isChangesMadeInForm = true;
        autosaveTriggered();      
    }
}

/* called on file upload failure */
function uploadError(elementParent,errorMessage,uploadType)
{
    $(elementParent).find('.ffse-img-uploading').hide();
    $(elementParent).find('.ffse-img-uploaded').hide();
    $(elementParent).find('.ffse-img-upload-error').html(errorMessage);
    $(elementParent).find('.ffse-img-upload-error').show();
    if(uploadType == 'StyleEditor')
    {  
        $(elementParent).find('.ffse-img-upload-placeholder').html('');
        $(elementParent).find('.ffse-img-upload-placeholder').hide();    
    } else {
        $(elementParent).find('.ffse-img-upload-placeholder-editor').html('');
        $(elementParent).find('.ffse-img-upload-placeholder-editor').hide();        
    }
}

/**trigger file upload function */
function uploadFiles(elem,uploadType)
{
    if(uploadType == 'StyleEditor')
    {
        var parentElement=$(elem).parents('.ffse-file-upload-container');
    } else {
        var parentElement=$(elem).parents('.ffse-file-upload-container-editor');
    }
 
    if(window.FileReader===undefined ){
        var browserInfo=getBrowserInfo();
        if(browserInfo!=null && !isNullOrEmpty(browserInfo.name) && !isNullOrEmpty(browserInfo.version)){
            var browserMessage='';
            var browsername=browserInfo.name;
            browsernameLowercase=browsername.toLowerCase();
            if(browsernameLowercase=='safari')
            {
                browserMessage="Use Safari 6 or above.";
                browsername='Safari';
            }
            else if(browsernameLowercase=='msie')
            {
                browserMessage="Use IE 10 or above.";
                browsername='Internet Explorer';
            }
            uploadError(parentElement, 'File upload is not supported for '+browsername+' '+browserInfo.version+'. '+browserMessage, uploadType);
        }
        else{
            uploadError(parentElement, "File upload is not supported for your browser", uploadType);
        }
    }
    else{
        uploadImageFile(elem.files,parentElement,uploadType);
    }
}

/**Remove image file  */
function removeImageCallBack(elem,cssSelector,cssruledirective,uploadType)
{
    var elementParent=$(elem).parents('.ffse-file-upload-container');
    $(elementParent).find('.ffse-img-upload-placeholder').hide();
    $(elementParent).find('.ffse-img-upload-placeholder').html('<div class="ffse-img-removed" style="display:none;" data-ffstyle-selector="'+cssSelector+'" data-ffstyle-prop="'+cssruledirective+'-removed" />');
    $(elementParent).find('.ffse-img-input-container').show();
    var fileElement=$(elementParent).find('input.ffse-fileUpload-control');
                
    if($(fileElement).attr('data-ffstyle-selector')=='.ff-logo')
    { 
        $(elementParent).find('input.ffse-img-width').val('');
                 
        $(elementParent).find('input.ffse-img-height').val('');
    }
    removeImageStyleEditorCallBack(elementParent,cssSelector,cssruledirective,uploadType);
        
}

function removeEditorImage(elem)
{
    var elementParent=$(elem).parents('.ffse-file-upload-container-editor');
    $(elementParent).find('.ffse-img-upload-placeholder-editor').hide();
    $(elementParent).find('.ffse-img-upload-placeholder-editor').html('<div class="ffse-img-removed" style="display:none;" />');
    $(elementParent).find('.ffse-img-input-container-editor').show();          
    $(elementParent).parent().parent().parent().removeClass('fieldLiImageActive');
    $(elementParent).parent().parent().parent().addClass('fieldLiImage');
    isChangesMadeInForm = true;
    autosaveTriggered();       
}

/*payment field main functions */
function setupPaymentField(elemSource)
{
    var elemSourceParent=  $(elemSource).parents('.fieldLi');
    var paymentAccType= $(elemSource).attr('data-paymenttype'); 
    $(elemSourceParent).find('.field-div-payment').attr('title',$(elemSource).attr('title'));
    $(elemSourceParent).attr('data-otype',paymentAccType);
    togglePaymentSetupOverlay(elemSourceParent,paymentAccType,true);
    expandPaymentOptions(elemSourceParent,true);
   
}
function resetPaymentField(elemSourceParent,fieldAttrType,hideOverlay,enableFields)
{
    $(elemSourceParent).find('.payment-item-header').hide();
    togglePaymentSetupOverlay(elemSourceParent,fieldAttrType,hideOverlay);
    if(enableFields)
    {

        $(elemSourceParent).find('.payment-item-row .PPGeneralLabelDiv').show();
        $(elemSourceParent).find('.payment-item-row .PPGeneralFieldDiv').show();
    }
    else
    {
        $(elemSourceParent).find('.payment-item-row .PPGeneralLabelDiv').hide();
        $(elemSourceParent).find('.payment-item-row .PPGeneralFieldDiv').hide();
    }
}
function expandPaymentOptions(elemSourceParent,createPaymentfield)
{
    var expandCurrentDiv=false;
    if($(elemSourceParent).find('.ExpandDivPayment').length==0)
    {
        expandCurrentDiv=true;
    }
    collapseESignatureEditDialogs();
    resetEditDivOpacity();
    collapsePaymentOptionsDiv();
    $(".ExpandDiv").remove();
    if(expandCurrentDiv)
    {
        
        toggleSortableOption(true);
        var paymentElementId=$(elemSourceParent).attr('id');
        paymentElementId= paymentElementId.replace('lblliFASTFORMS','');
        var divPaymentFieldRecordAttr= $(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id');

        var paymentFieldRecordId='';
        if(divPaymentFieldRecordAttr!==undefined && divPaymentFieldRecordAttr!=='' )
        {
            paymentFieldRecordId=divPaymentFieldRecordAttr;
        }
        $(elemSourceParent).find('.editDelDiv').find('.editImg').addClass('togHoverActive');
        var paymentComponentItem = $('#paymentComponentTemp').clone().html();
        $ExpandDivPayment = $('<div />', {
            'class': 'ExpandDivPayment','title':'','style':'display:none'
        });
        $ExpandDivPayment.append(paymentComponentItem);
        $(elemSourceParent).append($ExpandDivPayment); 
        var dataOType=$(elemSourceParent).attr('data-otype');
        var paymentType=getOPaymentTypeVal(dataOType,'PayPal Pro','PayPal Pro','IATS','Stripe','AuthorizeNet');
        var paymentPrefix=getOPaymentTypeVal(dataOType,'PAYPAL','PayPal','iATS','Stripe','Authorize.Net');
 
        initializePaymentAccountsList(elemSourceParent,paymentType);
        var paymentPrefixU=paymentPrefix.toUpperCase();

        paymentPrefixU=paymentPrefixU.replace('.','');
        var paymentPrefixL=paymentPrefixU.toLowerCase();
        remoteGetPaymentFieldRecordJS(paymentFieldRecordId,elemSourceParent,paymentPrefixU+paymentElementId,paymentType,createPaymentfield);
        var  paymentclassname='payment-type-'+paymentPrefixL;
        $(elemSourceParent).find('.payment-options-container').addClass(paymentclassname);
        var recurringSelectList=$(elemSourceParent).find('.payment-options-container select[data-pp-prop="Recurring_Payment_Interval__c"]');
        $(recurringSelectList).html(getRecurringIntervalSelectOptionsHTML(dataOType));
        $(recurringSelectList).find('option:first').attr('selected','selected');
        $(elemSourceParent).find('.iats-region').select2();
        resetPaymentLabels(elemSourceParent,dataOType);
    }
    else
    {
       
        toggleSortableOption(false);
        $(elemSourceParent).find('.ExpandDivPayment').slideUp(300);
        $(elemSourceParent).find('.ExpandDivPayment').remove();
        $(elemSourceParent).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        isChangesMadeInForm = true;
        autosaveTriggered();
    }
}

function collapsePaymentOptionsDiv()
{
    $('.fc-multi-page-item').find('.fieldLi').each(function(indx,fieldLiElement)
    {
        if($(fieldLiElement).find('.field-div-payment').length>0)
        {
            $(fieldLiElement).find('.ExpandDivPayment').slideUp(300);
            $(fieldLiElement).find('.ExpandDivPayment').remove();
            $(fieldLiElement).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        }
    });

 
}
function collapseESignatureEditDialogs()
{
    $('.fc-multi-page-item').find('.fieldLi').each(function(indx,fieldLiElement)
    {
        if($(fieldLiElement).find('.eSignatureFieldDiv').length>0)
        {
            $(fieldLiElement).find('.ExpandDivESignature').slideUp(300);
            $(fieldLiElement).find('.ExpandDivESignature').remove();
            $(fieldLiElement).find('.editDelDiv').find('.editImg').removeClass('togHoverActive');
        }
    });

 
}
function deletePaymentField(elemSource,isAutoSave)
{
 
    var elemSourceParent= $(elemSource).parents('.fieldLi');
    deletePaymentFieldByParentFieldLi(elemSourceParent,isAutoSave,false);
}
function deletePaymentFieldByParentFieldLi(elemSourceParent,isAutoSave)
{
    /* //if(!overRideCheckRuleObject && (ruleObjectsData==null || ruleObjectsData.length==0 )){
     //checkRuleBeforeDeleteElement(elemSourceParent,isAutoSave);
   //}else{*/
    var dataOType=$(elemSourceParent).attr('data-otype');
    var paymentTypePrefix = getOPaymentTypeVal(dataOType, 'PAYPAL', 'PAYPAL', 'IATS', 'STRIPE','AUTHORIZENET');
    var lblLi=$(elemSourceParent).attr('id');
    lblLi=lblLi.replace('lblliFASTFORMS',paymentTypePrefix);
    if(!isNullOrEmpty(lblLi) && itemUsedInRule(lblLi))
    {
        showError("<div class='primary'>This payment field is being used in one or more of your form's conditional rules.</div> <br/> <br /><div class='secondary'>Please adjust your rules in the Edit Rules tab and try again.</div>");
    }else{
        var paymentFieldid=$(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id');
        if(paymentFieldid!==undefined && paymentFieldid!='')
        {
            remoteDeletePaymentFieldJS(paymentFieldid,elemSourceParent);
        }
        else
        {
            deletePaymentFieldCallBack(elemSourceParent);
        }
    }
    //}
}
function deleteElementCallBack(liElement,isAutoSave)
{ 
    var dataOType=$(liElement).attr('data-otype');
    if(!isNullOrEmpty(dataOType)){
        if(dataOType.indexOf('Payment')>0){
            deletePaymentFieldByParentFieldLi(liElement,isAutoSave);
        }else if(dataOType=='OESignature'){
            deleteSignatureFieldByParentLi(liElement,isAutoSave);

        }else{
            deleteFieldByParentFieldLi(liElement,isAutoSave);
        }
    }else{
        deleteFieldByParentFieldLi(liElement,isAutoSave);
    } 
}
function deletePaymentFieldCallBack(elemSource)
{

    
    $(elemSource).remove();
        
    toggleSortableOption(false);
    isChangesMadeInForm=true;
}


function remotevalidatePaymentAndCallSaveJS(relatedObjectsXml, hiddenObjectValues) {

    var ffrecordid = "";
    ffrecordid = '{!JSENCODE($CurrentPage.parameters.id)}';

    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteValidatePaymentInfo)}',
             ffrecordid,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null  && result.length>0 ) 
                    {
                        var elementIds=[];
                                         
                        var responseErrorDetail='';
                        var isResultItemsValid=true;
                        for (i = 0; i < result.length; i++) {
                            if(!result[i].IsValid)
                            {
                                isResultItemsValid=false;
                                var indx=i+1;
                                //responseErrorDetail+="<b>"+result[i].OtherText.replace(/\|/g,'')+"</b>";
                                responseErrorDetail+="<b>Payment ("+indx+")</b>";
                                responseErrorDetail+=$('<div />').html(result[i].ResultText).text();
                                responseErrorDetail+='<br/>';
                                                 

                                //elementIds.push(result[i].OtherText.replace(/|/g,''));
                            }
                        }
                        if(isResultItemsValid)
                        {
                            console.log('publishing data ');
                            callSave(lookupWarningFlagDisable,saveForLaterWarningFlagDisable,resetFastFormsToken); 
                            //disablePublishDraftButton();
                        }
                        else
                        {
                            $simpleDiv = $('<div />', { html: 'One or more of your form\'s payment fields are missing some required information.<br /><br />'  , 'class':'ff-detail-block-wrap'});
                            $simpleDivWrapper = $('<div />', {  });
                            $span = $('<span />', { html: ' Details' ,'onclick':'toggleDetailBlock(this)', 'class':'ff-detail-block-link'}); 
                            $errorDiv = $('<div />', { html: responseErrorDetail , 'class':'ff-detail-block'}); 
                            disablePublishDraftButton();
                            $errorDiv.hide();
                            $simpleDiv.append($span);
                            $simpleDiv.append($errorDiv);
                            $simpleDivWrapper.append($simpleDiv);
                            commonAlertMessage('One or more of your payment fields has not been correctly set up.',$simpleDivWrapper.html());
                        }
                    } 
                    else {
                        console.log('No paymentfield found ');
                                         
                        callSave(lookupWarningFlagDisable,saveForLaterWarningFlagDisable,resetFastFormsToken); 
                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
    );
        

}
function publishCompleteCallJS(){
    publishCompleteCall();
}
function disablePublishDraftButton()
{
    $(".btnPublishedSaved").text('Publish Draft');
    $(".btnPublishedSaved").addClass('va-disabled');
}
function remoteDeletePaymentFieldJS(paymentFieldid,elemSourceParent) {

    var ffrecordid = "";
    ffrecordid = '{!JSENCODE($CurrentPage.parameters.id)}';

    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteDeletePaymentField)}',
             paymentFieldid,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null && typeof result=='object' ) 
                    {
                        console.log('deleting payment field');
                        if(result.IsValid)
                        {
                            deletePaymentFieldCallBack(elemSourceParent);
                        }
                        else
                        {
                            console.log('Payment field deletion result- '+result.ResultText);
                            deletePaymentFieldCallBack(elemSourceParent);
                        }
                    } 
                    else {
                        console.log('No paymentfield found ');
                                        
                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
    );
        

}
function remoteGetPaymentFieldRecordJS(paymentFieldid,elemSourceParent,paymentElementId,accType,createPaymentfield) {
 
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';

    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteGetGeneralPaymentFieldRecord)}',
            ffrecordid,paymentFieldid,createPaymentfield,paymentElementId,accType,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null && typeof result=='object' ) {

                        console.log('paymentfield found ');

                        var paymentFieldObjJSON=result;
                                     
                        populatePaymentSettings(elemSourceParent,paymentFieldObjJSON,createPaymentfield);

                    } 
                    else {
                        console.log('No paymentfield found ');
                        $(elemSourceParent).find('.ExpandDivPayment').slideDown(300);
                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
    );
        

}
function resetPaymentSettingsJS(paymentFieldid,elemSourceParent,paymentAccType) {
    var createPaymentfieldIfNotExists=false;
    var paymentElementId='';
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';

    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteGetGeneralPaymentFieldRecord)}',
            ffrecordid,paymentFieldid,createPaymentfieldIfNotExists,paymentElementId,paymentAccType,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null && typeof result=='object' ) {
                        resetPaymentSettingsCallBack(result,elemSourceParent);

                    } 
                    else {
                        console.log('No paymentfield found ');
                                        
                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
    );
        

}
function remoteInitializePaymentFieldsInfoJS(paymentFieldid,elemSourcePaymentDivId,paymentAccType) {
    var createPaymentfieldIfNotExists=false;
    var paymentElementId='';
    var ffrecordid = "";
    ffrecordid = '{!$CurrentPage.parameters.id}';

    Visualforce.remoting.Manager.invokeAction(
            '{!URLENCODE($RemoteAction.FormEditorController.remoteGetGeneralPaymentFieldRecord)}',
            ffrecordid,paymentFieldid,createPaymentfieldIfNotExists,paymentElementId,paymentAccType,
            function(result, event) {
                if (event.status) {

                    //   //console.log(' result HTML-'+result);
                    if (result != null && typeof result=='object' ) {
                        initializePaymentFieldsInfoCallBack(result,elemSourcePaymentDivId);

                    } 
                    else {
                        console.log('No paymentfield found ');
                                        
                    }


                } else if (event.type === 'exception') {
                    //console.log(" Exception- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                } else {
                    //console.log(" Exception 2- " + event.message);
                }
            }, {
                escape: true
            }
    );
        

}
function remoteSetCurrencyLabelJS(currencyId,fieldLiElem)
{ 
    Visualforce.remoting.Manager.invokeAction(
     '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteGetCurrencyInfo)}',
     currencyId,
     function(result, event) {
         if (event.status) {
                
                
             if (result != null && typeof result=='object'  ) {
                
                 console.log('Currency Record ');
                 var currency_Symbol__C=getPrefixedOrgFieldName(SFOrgPrefix,'Currency_Symbol__c');
                 if(result[currency_Symbol__C]!=null)
                 {
                     console.log(' Currency is  defined');
                     setPaymentCurrencyLabel(result[currency_Symbol__C],fieldLiElem);
                 }
                 else
                 {
                     console.log(' Currency is not defined');
                     setPaymentCurrencyLabel("$",fieldLiElem);
                 }
                  
                   
                     
             } else {
                 console.log('Currency list null');
             }

         } else if (event.type === 'exception') {
             //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
         } else {
             //console.log(" unknown Exception while getting available themes- " + event.message);
         }
     }, {
         escape: false
     }
 );
}

function initializePaymentFieldsInfo(paymentFieldid,elemSourcePaymentDivId,paymentAccType)
{
    remoteInitializePaymentFieldsInfoJS(paymentFieldid,elemSourcePaymentDivId,paymentAccType);
}

function initializePaymentFieldsInfoCallBack(paymentFieldRecord,elemSourcePaymentDivId)
{
    var elementParentFieldLi=$('#'+elemSourcePaymentDivId).parents('.fieldLi');
    var payment_type__c=getPrefixedOrgFieldName(SFOrgPrefix,'Payment_Type__c');
    var test_Mode__c=getPrefixedOrgFieldName(SFOrgPrefix,'Test_Mode__c');
    var subtotal_Field_Type__c=getPrefixedOrgFieldName(SFOrgPrefix,'Subtotal_Amount_Field_Type__c');
    var is_Payment_Required__c=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Payment_Required__c');
    var display_Amount_Charged__c=getPrefixedOrgFieldName(SFOrgPrefix,'Display_Amount_Charged__c');
    var currency__c=getPrefixedOrgFieldName(SFOrgPrefix,'Currency__c');
    var account__c=getPrefixedOrgFieldName(SFOrgPrefix,'Account__c');

     
    

    if(paymentFieldRecord[is_Payment_Required__c]!=null)
    {
        setPaymentAmountRequired(paymentFieldRecord[is_Payment_Required__c],elementParentFieldLi);
    }
    var displayamount=false;
    if(paymentFieldRecord[display_Amount_Charged__c]!=null)
    {
        console.log(' setPaymentAmountDisplayFlag');
        displayamount=paymentFieldRecord[display_Amount_Charged__c];
        setPaymentAmountDisplayFlag(paymentFieldRecord[display_Amount_Charged__c],elementParentFieldLi);
    }
    if(!isNullOrEmpty(paymentFieldRecord[currency__c]))
    {
        //currency is not null
        remoteSetCurrencyLabelJS(paymentFieldRecord[currency__c],elementParentFieldLi)
    }
    if(paymentFieldRecord[test_Mode__c]!=null)
    {
        var testmode=paymentFieldRecord[test_Mode__c];
        setPaymentTestModeDisplay(testmode,$('#'+elemSourcePaymentDivId).find('.test-mode-togglelink'));
        setPaymentTestModeHTML(elementParentFieldLi,testmode);
    }
    populatePaymentAmountInfo(paymentFieldRecord,elementParentFieldLi);
    
    if(!isNullOrEmpty(paymentFieldRecord[payment_type__c]) )
    { 
        restructurePaymentLabels(elementParentFieldLi,paymentFieldRecord[payment_type__c]+'',displayamount);
    }
    
    $(elementParentFieldLi).find('.payment-item-row .PPGeneralLabelDiv').each(function(i, ppitemLabeldiv) {
        var labelprop=$(ppitemLabeldiv).find('label.ff-label').attr('data-label-prop');
        var labelpropPrefixed=getPrefixedOrgFieldName(SFOrgPrefix,labelprop);
        if(!isNullOrEmpty(labelprop) && !isNullOrEmpty(paymentFieldRecord[labelpropPrefixed]))
        { 

            var labelHTML=unescapeHTMLString(paymentFieldRecord[labelpropPrefixed]);
            $(ppitemLabeldiv).find('label.ff-label').html(''+labelHTML);
        }
                                            
                                             
    });
}
function remoteSetPaypalAccountModeJS(paymentFieldRecordid,updateTestMode,elementSourceFieldLi)
{ 
    Visualforce.remoting.Manager.invokeAction(
     '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteToggleTestMode)}',
     paymentFieldRecordid,updateTestMode,
     function(result, event) {
         if (event.status) {
                
                
             if (result != null && typeof result=='object' ) {

                 if(result.IsValid && result.ResultSObject!=null)
                 {
                     var  issandbox__c=getPrefixedOrgFieldName(SFOrgPrefix,'Is_Sandbox__c');
                     var accid = result.ResultSObject.Id;
                     var issandbox = result.ResultSObject[issandbox__c];
                     var acctWrapdivid='pp-acc-'+accid;
                     setPaymentTestModeHTML(elementSourceFieldLi,issandbox);
                 }
                 else
                 {
                     
                     console.log('Account rec not found');
                 }
                   
                     
             } else {
                 console.log('Account rec not found');
             }

         } else if (event.type === 'exception') {
             //console.log(" Exception while getting available theme list- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
         } else {
             //console.log(" unknown Exception while getting available themes- " + event.message);
         }
     }, {
         escape: false
     }
 );
}
function remoteUpdatePaymenfieldLabelInfoJS(paymentFieldRecord)
{ 
    
     
    Visualforce.remoting.Manager.invokeAction(
       '{!URLENCODE($RemoteAction.FormPaymentComponentController.remoteUpdatePaymenfieldInfo)}',
       paymentFieldRecord,
       function(result, event) {
           if (event.status) {
                                
                                
               if (result != null && result.indexOf('record updated')==0 ) {

                   console.log('Update- '+result);
                                         
               } else {
                   console.log('update paymentfield fail');
               }

           } else if (event.type === 'exception') {
                                
           } else {
                                 
           }
       }, {
           escape: false
       }
);
}
function updatePaymentFieldLabels(elemSource)
{
    var paymentFieldId='';
        
    var elemSourceParent=$(elemSource).parents('.field-div-payment');
    if($(elemSourceParent).length>0 && !isNullOrEmpty($(elemSourceParent).attr('data-paymentfield-record-id')))
    {
        paymentFieldId=$(elemSourceParent).attr('data-paymentfield-record-id');
    }
    if(!isNullOrEmpty(paymentFieldId))
    {
        var paymentFieldRecord={};
        paymentFieldRecord.Id=paymentFieldId;
        $(elemSourceParent).find('.payment-item-row .PPGeneralLabelDiv').each(function(indx,targetElementDiv) {
            var labelprop=$(targetElementDiv).find('label.ff-label').attr('data-label-prop');
            var labelhtml=$(targetElementDiv).find('label.ff-label').html();
            if(!isNullOrEmpty(labelprop) && !isNullOrEmpty(labelhtml) )
            {
                var labelpropPrefixed=getPrefixedOrgFieldName(SFOrgPrefix,labelprop);
                paymentFieldRecord[labelpropPrefixed]  =labelhtml;
            }
        });
        if(paymentFieldRecord!=null && Object.keys(paymentFieldRecord).length !== 0)
        {
            console.log(' Update payment field is triggered');
            remoteUpdatePaymenfieldLabelInfoJS(paymentFieldRecord);
            draftchanges(false);
        }
        else
        {
            console.log(' Update payment field is not triggered');
        }
    }
}
function populatePaymentSettings(elemSourceParent,jsonPaymentFieldObj,initialCall)
{
    var paymentFieldObjId='';
    if(jsonPaymentFieldObj.Id !==undefined && jsonPaymentFieldObj.Id!='')
    {
        paymentFieldObjId=jsonPaymentFieldObj.Id;
    }

    $(elemSourceParent).find('.field-div-payment').attr('data-paymentfield-record-id',paymentFieldObjId);
    $(elemSourceParent).find('.ExpandDivPayment').attr('data-paymentfield-record-id',paymentFieldObjId);
    $(elemSourceParent).find('.ExpandDivPayment .payment-accounts-list').find('input.ff-radio-input').removeClass('acc-selected');
    var account__C=getPrefixedOrgFieldName(SFOrgPrefix,'Account__c');
    if(jsonPaymentFieldObj[account__C]!==undefined && jsonPaymentFieldObj[account__C]!='')
    {
        var paypalaccid=jsonPaymentFieldObj[account__C];
        $(elemSourceParent).find('#pp-account-'+paypalaccid+' input[type=radio]').prop('checked',true);
        $(elemSourceParent).find('#pp-account-'+paypalaccid+' input[type=radio]').addClass('acc-selected');
    }
    $(elemSourceParent).find('.ExpandDivPayment').slideDown(300);
    changePaymentActiveTab($(elemSourceParent).find('.ExpandDivPayment .payment-option-tabs>li:first>a'));
    if(initialCall){
        isChangesMadeInForm = true;
        autosaveTriggered();
    }
}
function resetPaymentOptions()
{
    $('.fc-multi-page-item li').find('.ExpandDivPayment').slideUp(300);
    $('.fc-multi-page-item li').find('.ExpandDivPayment').remove();
}
function togglePaymentSetupOverlay(elemSourceParent,fieldAttrType,hideit)
{
    if(hideit)
    {
        $(elemSourceParent).find('.payment-overlay-box').hide();
        $(elemSourceParent).find('.payment-overlay-box .alert-payment-setup').hide();
        $(elemSourceParent).find('.payment-overlay-wrapper').hide();
        $(elemSourceParent).find('.field-div-payment').addClass('hoverEnabled');
 
    }
    else
    {
        $(elemSourceParent).find('.payment-overlay-box').show();
        $(elemSourceParent).find('.payment-overlay-box .alert-payment-setup').show();
        $(elemSourceParent).find('.payment-overlay-wrapper').show();
    }
}
/* Lookup field functions*/
function remoteGetSObjectListViewJS(lookupObjectName,parentLiElement)
{ 
    //if(refObjectname=='Group'){
    //    refObjectname='User';
    // }
     
    Visualforce.remoting.Manager.invokeAction(
       '{!URLENCODE($RemoteAction.FormEditorController.remoteGetSObjectListView)}',
       lookupObjectName,
       function(result, event) {
           if (event.status) {
                                
                                
               if (result != null && result.length>0  ) {

                   console.log('remoteGetSObjectListViewJS- '+result);
                                     
                   populateLookupSelect(parentLiElement,result);
                                    
                                    
                                         
               } else {
                   $(parentLiElement).find('#trForLookupView').hide();
                   $(parentLiElement).find('#trForMsgField').hide();
                   console.log('No List view found for -'+lookupObjectName);
               }

           } else if (event.type === 'exception') {
               console.log(" Exception while getting  list view- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
               //$(parentLiElement).find('#trForLookupView').addClass('display-none');
               $(parentLiElement).find('#trForLookupView').hide();
               $(parentLiElement).find('#trForMsgField').hide();
           } else {
               console.log(" unknown Exception while getting list view- " + event.message);
               $(parentLiElement).find('#trForLookupView').hide();
               $(parentLiElement).find('#trForMsgField').hide();
                        
           }
       }, {
           escape: false
       }
);
}
function allFieldsHealthCheck(){
    var formFieldList=[];
    $('#mainMultiPageWrapper .fc-multi-page-item').each(function(indx,pageItemWrapper){
        $(pageItemWrapper).find('.fieldLi:not(.generalSortableForFields)').each(function(findx,fieldLiItem){
            var mainFieldElem=$(fieldLiItem).find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');
            var fieldName=safeStringValue($(mainFieldElem).attr('id'),'');
            var fieldLabel=safeStringValue($(fieldLiItem).find('.labelDiv label.ff-label').text(),'');
            var datatype=safeStringValue($(fieldLiItem).attr('data-otype'),'');
            var isReq=getSafeBoolean($(mainFieldElem).attr('data-isrequired'),'');
            if(!isNullOrEmpty(fieldName) && fieldName.indexOf('.')>0){
                formFieldList.push({'fAPIName':fieldName,'fLabel':fieldLabel,'fIsRequired':isReq,'fType':datatype});
            }
        });

    });
    if(formFieldList!=null && formFieldList.length>0){
        var primaryObjnm=$('#priName').attr('data-object');
        remoteValidatedFieldListJS(primaryObjnm,formFieldList);
    }
}
function findItemFromArray(jsonArr,propName,propValue){
    for (var i=0; i < jsonArr.length; i++)
        if (jsonArr[i][propName] == propValue)
            return jsonArr[i];
    // will return undefined if not found;  
}
/**/
function remoteValidatedFieldListJS(primaryObjectName,fieldList)
{  
    Visualforce.remoting.Manager.invokeAction(
               '{!URLENCODE($RemoteAction.FormEditorController.remoteValidatedFieldList)}',primaryObjectName,fieldList,
               function(result, event) {
                   if (event.status) {
                                
                       console.log('remoteValidatedFieldListJS-- '+result);
                       if (result != null   ) {
                           var deletedFieldsArr=[];
                           var changedFieldsArr=[];
                           var validFieldsIdList=[];
                           $.each(result,function(indx,item){
                               validFieldsIdList.push(item.fLabel);
                           });
                           $.each(fieldList,function(indx,item){
                               if($.inArray(item.fAPIName,validFieldsIdList)<0)
                               {
                                   deletedFieldsArr.push(item);
                               }
                           });

                           $.each(fieldList,function(indx,item){

                               var returnItem=findItemFromArray(result,'fLabel',item.fAPIName);
                               //console.log(' Changed field----'+returnItem.fType+'|---'+item.fAPIName+'---'+item.fType);
                               if(returnItem!=undefined){
                                   if(returnItem.fType+''!=''+item.fType){
                                       changedFieldsArr.push(item);
                                       console.log(' Changed field----'+returnItem.fType);
                                   }
                               }
                           });
                           $('.notification-bar').hide();
                           $('.notification-bar').html('');
                                       
                                        
                           if(deletedFieldsArr.length>0){
                               var divError=$('<div/>').html($('#ErrorHTMLTemp').html());
                               divError.find('.msg-text').html('<span>The following fields no longer exist in your Salesforce configuration or have been renamed:</span>');
                               $.each(deletedFieldsArr,function(indx,item){
                                   var spanError=$('<span/>',{'class':'f-item','data-target':item.fAPIName});
                                   spanError.html(item.fLabel);
                                   divError.find('.msg-text').append(spanError);
                                   console.log(' Deleted field----'+spanError.html());
                               });

                               $('.notification-bar').append(divError.html() );
                           }
                           if(changedFieldsArr.length>0){
                               var divWarning=$('<div/>').html($('#WarningHTMLTemp').html());
                               divWarning.find('.msg-text').html('<span>The following fields have had their data type changed in Salesforce since you last modified this form:</span>');
                               $.each(changedFieldsArr,function(indx,item){
                                   var spanWarn=$('<span/>',{'class':'f-item','data-target':item.fAPIName});
                                   spanWarn.html(item.fLabel);
                                   divWarning.find('.msg-text').append(spanWarn);
                               });
                               $('.notification-bar').append(divWarning.html() );
                           }
                           if((deletedFieldsArr!=null && deletedFieldsArr.length>0) || (changedFieldsArr!=null && changedFieldsArr.length>0)){
                               $('.notification-bar').fadeIn(function(){
                                   $(this).find('.alert').show();
                               });
                           }
                           console.log('remoteValidatedFieldListJS not null-- '+result);                                   
                       }
                       else{
                           showErrorMessage('This field no longer exists in your Salesforce configuration or has been renamed.');
                                   
                       }

                   } else if (event.type === 'exception') {
                       console.log(" Exception while getting field information- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
                            
                   } else {
                       console.log(" unknown Exception while getting field information- " + event.message);
                                            
                   }
               }, {
                   escape: false
               }
       );
}
/* Refresh field functions*/
function remoteFFFieldModelJS(fieldLiElem,primaryObjectName,relObjName,fieldName,objectType,optinalChildColor)
{ 
  
     
    Visualforce.remoting.Manager.invokeAction(
       '{!URLENCODE($RemoteAction.FormEditorController.remoteFFFieldModel)}',primaryObjectName,relObjName,fieldName,objectType,optinalChildColor,
       function(result, event) {
           if (event.status) {
                                
                                
               if (result != null   ) {

                   console.log('remoteFFFieldModelJS-- '+result.htmlField);
                   var tempDiv=$('<div/>');
                   var fieldtype=safeStringValue(result.fieldType,'STRING') ;
                   if(!isNullOrEmpty(fieldtype) && fieldtype.toUpperCase()=='PERCENT'){
                       tempDiv.append('<div class="ff-currency">$</div>');                                     
                   }
                                     
                   if(!isNullOrEmpty(result.htmlField)){
                       tempDiv.append(result.htmlField);
                   }
                   if(!isNullOrEmpty(fieldtype)  && fieldtype.toUpperCase()=='CURRENCY'){
                       tempDiv.append('<div class="ff-percent">%</div>');
                   }
                   //   var oType=tooltipMessage
                   var isRequired=  getSafeBoolean(result.isRequired,false);//
                   var otype=  safeStringValue(result.oType,'');//
                   var vatt=  safeStringValue(result.vatt,'');//

                   var tooltip=  safeStringValue(result.tooltipMessage,'');//
                   $(fieldLiElem).find('.labelDiv label.ff-label').attr('vatt',vatt);
                   $(fieldLiElem).attr('data-otype',otype);
                   $(fieldLiElem).attr('title',tooltip);
                   $(fieldLiElem).find('.labelDiv').find('.ff-required-mark').remove();
                   if(isRequired){
                       $('<span class="ff-required-mark">*</span>').insertAfter($(fieldLiElem).find('.labelDiv .ff-label')); 
                   }
                   $(fieldLiElem).find('.ExpandDiv').slideUp(function(){
                       $(this).remove();
                   });
                   $(fieldLiElem).find('.editDelDiv .editImg').removeClass('togHoverActive');
                   $(fieldLiElem).find('.fieldDiv').html(tempDiv.html());
                   isChangesMadeInForm=true;
               }
               else{
                   // showErrorMessage('This field doesn\t exist anymore do you want to');
                   deleteFieldConfirmDialog(fieldLiElem,'This field no longer exists in your Salesforce configuration or has been renamed. Do you want to remove this field from form?');
               }

           } else if (event.type === 'exception') {
               console.log(" Exception while getting field information- " + event.message + "<br/>\n<pre>" + event.where + "</pre>");
               showErrorMessage('An unexpected error has occured. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');
           } else {
               console.log(" unknown Exception while getting field information- " + event.message);
               showErrorMessage('An unexpected error has occured. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.');                        
           }
       }, {
           escape: false
       }
);
}
function deleteFieldConfirmDialog(fieldLiElem,msg){
    $("#dialog-error").html("<div class='dialogHeader'><div class='dialogIcon dialogIconAlert'>&nbsp;</div></div><div class='dialogFont'><div class='primary'>"+msg+"</div></div>");
    // Define the Dialog and its properties.
    $("#dialog-error").dialog({
        resizable: false,
        modal: true,
        title: "Delete field",
        height: "auto",
        width: 413,
        buttons: {
            "OK":{
                click: function() {
                    $(this).dialog('close');
                    $(fieldLiElem).find('.ExpandDiv').slideUp(function(){
                        $(this).remove();
                        $(fieldLiElem).remove();
                        isChangesMadeInForm=true;
                    });

                },
                text: 'Yes',
                'class': 'vabutton1'
            },
            "Cancel":{
                click: function () {
                    $(this).dialog('close');
                },
                text: 'No',
                'class': 'vabutton2'
            }
        },
                                 
        open: function( event, ui ) {
            $('.ui-dialog :button').blur();
        }
    });
    $('.ui-dialog :button').blur();
}
function refreshFieldConfig(elemSource){
    var mainInputElement=$(elemSource).parents('.fieldLi').find('.fieldDiv').find('>select,>input,input.ff-input-type,>textarea');
    var elemId=$(mainInputElement).attr('id');
    if(!isNullOrEmpty(elemId) && elemId.split('.').length>0){
        var elemIdInArr=elemId.split('.');
        var primaryObjectName='';
        var objectType='';
        var relObjName='';
        var optinalChildColor='';
        var fieldName=elemIdInArr[elemIdInArr.length-1];
        if(elemIdInArr.length==2){
            primaryObjectName= elemIdInArr[0];  
            objectType='primary';
        }
        else if(elemIdInArr.length==3){
            primaryObjectName= elemIdInArr[0];
            relObjName= elemIdInArr[1];
            objectType='lookup';
        }
        else if(elemIdInArr.length==4){
            primaryObjectName= elemIdInArr[0];
            relObjName= elemIdInArr[1];
            objectType='detail';
            optinalChildColor= elemIdInArr[2];
        }
        remoteFFFieldModelJS($(elemSource).parents('.fieldLi'),primaryObjectName,relObjName,fieldName,objectType,optinalChildColor);
    }
}
function addNewPage(elemSource) {
    <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',true,false)}"> 
    upgradeNowMessage('Only single page forms are available in Free or Base edition of Fast Forms.', '', '');  
    </apex:outputText>
     <apex:outputText rendered="{!if(isFreemium || packageTier == 'Base',false,true)}">


     $(elemSource).attr('data-active',true);
    
    var  pageOrder=0;
    var refreshPageOrder=true;
    if($(elemSource).parents('.form-canvas-multi-page-inner').length>0)
    {
        $('#mainMultiPageWrapper .add-newpage-box .vabuttonA1').each(function(indx,addNewPageBtn){
            var btnactive=$(addNewPageBtn).attr('data-active');
            if(!isNullOrEmpty(btnactive))
            {
                pageOrder=indx;
         
            }

        });
        pageOrder+=2;
     
    }
    else
    {
        pageOrder=$('.form-canvas-multi-page-inner .fc-multi-page-item').length;
        pageOrder++;
    }

    $('#mainMultiPageWrapper .add-newpage-box .vabuttonA1').removeAttr('data-active');
    remoteCreateNewFormJS(elemSource,'New Page Title',pageOrder,'','',refreshPageOrder);
    </apex:outputText>
    
}
(function($){    
    //pass in just the context as a $(obj) or a settings JS object
    $.fn.autogrow = function(opts) {
        var that = $(this).css({overflow: 'hidden', resize: 'none'}) //prevent scrollies
            , selector = that.selector
            , defaults = {
                context: $(document) //what to wire events to
                , animate: true //if you want the size change to animate
                , speed: 200 //speed of animation
                , fixMinHeight: true //if you don't want the box to shrink below its initial size
                , cloneClass: 'autogrowclone' //helper CSS class for clone if you need to add special rules
                , onInitialize: false //resizes the textareas when the plugin is initialized
            }
        ;
        opts = $.isPlainObject(opts) ? opts : {context: opts ? opts : $(document)};
        opts = $.extend({}, defaults, opts);
        that.each(function(i, elem){
            var min, clone;
            elem = $(elem);
            //if the element is "invisible", we get an incorrect height value
            //to get correct value, clone and append to the body. 
            if (elem.is(':visible') || parseInt(elem.css('height'), 10) > 0) {
                min = parseInt(elem.css('height'), 10) || elem.innerHeight();
            } else {
                clone = elem.clone()
                    .addClass(opts.cloneClass)
                    .val(elem.val())
                    .css({
                        position: 'absolute'
                        , visibility: 'hidden'
                        , display: 'block'
                    })
                ;
                $('body').append(clone);
                min = clone.innerHeight();
                clone.remove();
            }
            if (opts.fixMinHeight) {
                elem.data('autogrow-start-height', min); //set min height                                
            }
            elem.css('height', min);
            
            if (opts.onInitialize && elem.length) {
                resize.call(elem[0]);
            }
        });
        opts.context
            .on('keyup paste', selector, resize)
        ;
    
        function resize (e){
            var box = $(this)
                , oldHeight = box.innerHeight()
                , newHeight = this.scrollHeight
                , minHeight = box.data('autogrow-start-height') || 0
                , clone
            ;
            if (oldHeight < newHeight) { //user is typing
                this.scrollTop = 0; //try to reduce the top of the content hiding for a second
                opts.animate ? box.stop().animate({height: newHeight}, opts.speed) : box.innerHeight(newHeight);
            } else if (!e || e.which == 8 || e.which == 46 || (e.ctrlKey && e.which == 88)) { //user is deleting, backspacing, or cutting
                if (oldHeight > minHeight) { //shrink!
                    //this cloning part is not particularly necessary. however, it helps with animation
                    //since the only way to cleanly calculate where to shrink the box to is to incrementally
                    //reduce the height of the box until the $.innerHeight() and the scrollHeight differ.
                    //doing this on an exact clone to figure out the height first and then applying it to the
                    //actual box makes it look cleaner to the user
                    clone = box.clone()
                        //add clone class for extra css rules
                        .addClass(opts.cloneClass)
                        //make "invisible", remove height restriction potentially imposed by existing CSS
                        .css({position: 'absolute', zIndex:-10, height: ''}) 
                        //populate with content for consistent measuring
                        .val(box.val()) 
                    ;
                    box.after(clone); //append as close to the box as possible for best CSS matching for clone
                    do { //reduce height until they don't match
                        newHeight = clone[0].scrollHeight - 1;
                        clone.innerHeight(newHeight);
                    } while (newHeight === clone[0].scrollHeight);
                    newHeight++; //adding one back eliminates a wiggle on deletion 
                    clone.remove();
                    box.focus(); // Fix issue with Chrome losing focus from the textarea.
                    
                    //if user selects all and deletes or holds down delete til beginning
                    //user could get here and shrink whole box
                    newHeight < minHeight && (newHeight = minHeight);
                    oldHeight > newHeight && opts.animate ? box.stop().animate({height: newHeight}, opts.speed) : box.innerHeight(newHeight);
                } else { //just set to the minHeight
                    box.innerHeight(minHeight);
                }
            } 
        }
        return that;
    }
})(jQuery);
function hideHelpIcon()
{
    $('.intercomHelpIcon').fadeOut(500);
}
function toggleFieldsAdvanceOptions(elemSource){
    $(elemSource).parents('.advance-options-toggle').parent().find('.advance-options-wrapper').slideToggle('slow');
}
function toggleFieldsPicklistOptions(elemSource){
    var expandOptions=true;
    if($(elemSource).parents('.picklist-options-toggle').parent().find('.picklist-options-wrapper').is(':visible'))
    {
        expandOptions=false;
    }
    $(elemSource).parents('.picklist-options-toggle').parent().find('.picklist-options-wrapper').slideToggle('slow');
    if(expandOptions){
        var selectOptions=[];
        // selectOptions.push({'pval':'','ptxt':'--select an item--'});
        var defaultSelectElement=$('#tblForRequirdBlock').find('#defaultValue').clone().wrap('<p>').parent().html();
        var customDataSet=   getSafeBoolean($(elemSource).parents('.fieldLi').find('.fieldDiv>select.ff-select-type').attr('data-customset'),false);
        if(customDataSet && $(elemSource).parents('.fieldLi').find('.fieldDiv .selectDataSet select').length>0){
            defaultSelectElement=$(elemSource).parents('.fieldLi').find('.fieldDiv .selectDataSet select').clone().wrap('<p>').parent().html();
        }
        $(defaultSelectElement).find('option').each(function(indx,optionElem){
            if(!isNullOrEmpty($(optionElem).attr('value'))){
       
                var optionItem={'pval':$(optionElem).attr('value'),'ptxt':$(optionElem).text()};
                optionItem['pcustom']= getSafeBoolean($(optionElem).attr('data-iscustom'),false);
                optionItem['pdisabled']=getSafeBoolean($(optionElem).attr('data-disabled'),false);;
                optionItem['psel']=getSafeBoolean($(optionElem).is(':selected'),false);
                selectOptions.push(optionItem);
            }
    
        });
        setupPicklistManagementElement(elemSource,selectOptions);
    }
}


function popupErrorOnPublishFailure(primarymsg,message,messagetype) {
    var divMainWrapper = $('<div/>').html('');
    var divHeader = $('<div/>').addClass('dialogHeader');
    var divHeaderIcon = $('<div/>').addClass('dialogIcon '+messagetype);
    var divBody = $('<div/>').addClass('dialogFont');
    var divPrimaryMessage = $('<div/>').addClass('primary');
    var divSecondaryMessage = $('<div/>').addClass('secondary');
    var divDetailMessage = $('<div/>').addClass('detail-message');
    $(divHeader).append($(divHeaderIcon));

    $(divPrimaryMessage).html(primarymsg);
    $(divDetailMessage).html(message);
    $(divSecondaryMessage).html($(divDetailMessage).text());
    $(divBody).append($(divPrimaryMessage));
    $(divBody).append($(divSecondaryMessage));
     
    $(divMainWrapper).html($(divHeader));
    $(divMainWrapper).append($(divBody));
     
    if(message!='undefined' && message!='')
    {

        $("#dialog-confirm").html($(divMainWrapper).html());
        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Publish",
            height: "auto",
            width: 413,
            buttons: {
                "OK": {
                    click: function () {
                        $(this).dialog("close");
                         
                    },
                    text: 'Close',
                    class: 'vabutton1'
                } 
                     
            },
            open: function( event, ui ) {
                $('.ui-dialog :button').blur();
            }
        });
               
            
    }
}
/**/
    </script>
     <apex:outputPanel id="publishResultPanel" styleClass="sf-message-css ohidden" layout="block" >
<apex:outputPanel rendered="{!IF(JSINHTMLENCODE(publishingErrorMsg)!='' && isPublishing,true,false)}">
 <script>
 var message='{!JSINHTMLENCODE(publishingErrorMsg)}';
  
  


 var messagetype='dialogIconAlert';
  var primarymessage='Publishing error';
    
$('.btnPublishedSaved').text('Publish Draft'); 
   if(isNullOrEmpty(message)){
    message='Publishing error occured in Outputpanel - publishResultPanel';
   }
messageLogToIntercom(message);
 popupErrorOnPublishFailure(primarymessage,'An unexpected error has occured. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.',messagetype);
 </script>
</apex:outputPanel>
<apex:outputPanel rendered="{!IF(JSINHTMLENCODE(publishingErrorMsg)=='' && isPublishing,true,false)}">
 <script>
publishCompleteCallJS();
 </script>
</apex:outputPanel>
</apex:outputPanel>
        <ol data-joyride="data-joyride" id="takeTour" style="display:none">
            <li data-id="formCanvasBlock" data-options="tip_location:top">Welcome to the Fast Forms Form Editor. Here is where you select and organize the fields you want to make available in your form. <br /><br />To add fields to your form, simply click and drag any field from the menus to the right and drag it into your form below.<br /><br />You can pick from any of your form's primary or related object fields to add to your form.<br /><br /></li>        
            <li data-id="labelSectionformUl0" data-options="tip_location:right">Each of your form's fields and sections comes with a number of options available to you. To see these options, simply hover over the field or section, then click on the arrow to the right.<br /><br /></li>        
            <li data-id="tblForRequirdBlock" data-options="tip_location:right;">Here we can select from a number of options for customizing our fields or sections. For sections, we can modify the label and set it to hidden by default. For fields, we can customize the field's label, set options such as read-only or required, add a default value, and customize the error message if a value is not provided by the user. <br /><br />Once we're done customizing our field and section options, we can close the drawer by clicking on the arrow icon above again.<br /><br /></li>   
            <li data-id="generalFieldBox" data-options="tip_location:top">Fast Forms also allows you to add other types of fields that are not associated to your form's objects, called <i>General Fields</i>.<br /><br />Click the arrow next to 'General Fields' to see the fields available to you.<br /><br /></li>         
            <li data-id="generalFieldBox" data-options="tip_location:top">Some of the fields available to you here include a Captcha field, which prevents spam from being submitted to your form, a Text field which allows you to add custom text anywhere in your form, and a File Upload field, which allows you to accept file uploads for your form submissions. <br /><br />There are also fields for more advanced use cases, such as capturing payment or e-signatures.<br /><br /></li>
            <li data-id="btnSaved" data-options="tip_location:top;next_button:false;">Ready to share your form with the world? Simply click the 'Publish Draft' button to see some of the Publishing Options available to you.<br /></li>                
        </ol> 

 <!--  Processing And Success dialog Start   -->
 <div id="dialogSucess" title="Processing" style="display:none;margin-top:18px">
        <div id="Processing" class="dialogFont">
                <br/>
                <br/><br/>
                <span>Please wait...</span>
                <span><img style="vertical-align: middle;" src="{!engineUrl}/styles/images/ajax-loader.gif"/></span>      
        </div>
        <div id="success" style="display:none;">
                <br/><br/><br/><img id="sucessImg" src="{!URLFOR($Resource.jquery_dialog,'jquery_dialog/images/success.png')}" style="vertical-align:middle;"/>
                <b>Your request successfully sent to server.</b>
                 
        </div>
        <div id="failure" style="display:none;" class="dialogFont">
                <center>
                <span>An unexpected error has occured. Please try again, or contact the Fast Forms Support Team at support@fastforms.io if this issue persists.</span> <br />
                <input type="button" value="OK" class=".ui-dialog .ui-dialog-buttonpane button" style="margin-top:20px;font-size: 15px;font-weight: normal !important;" onClick="errorSave();return false;"/></center>       
        </div>    
 </div>
 <!-- Processing And Success dialog End-->
 <!-- Preivew dialog Start-->
 <div id="previewDialog" title="Preview" style="display:none;" class="contentPreview"> 
 </div>
     <div id="preview" class="preview">
    </div>
 <!-- Preivew  dialog End-->
 <!-- SaveFormInfo dialog Start-->
 <div id="SaveFormInfoDialog" title="Preview" style="display:none;" class="content"> 
 </div>
 
 <apex:form id="frm">
 

 

            <apex:outputPanel id="msgPanel">
                    <apex:pageMessages ></apex:pageMessages>
            </apex:outputPanel>
            
         
            
                     
            <apex:actionFunction immediate="true" name="addRelatedObjectThird" action="{!addRelatedObjectThird}" status="status"  reRender="pnlForFieldsRepeat,msgPanel,valRender"   oncomplete="resetMultiPageSortableCall(); createHtml();hideSection();listHideRenderDiv();callToUpdateRelatedObject();">
                         <apex:param assignTo="{!relatedObjectsXml}"   name="relatedObjectsXml" value=""/> 
            </apex:actionFunction>
            <apex:actionFunction immediate="true" name="DummyTrigger" action="{!DummyTrigger}" reRender="valRender" status="status" oncomplete="createHtml();resetMultiPageSortableCall(); hideSection();listHideRenderDiv();callToUpdateRelatedObject();">
                         <apex:param assignTo="{!relatedObjectsXml}"   name="relatedObjectsXml" value=""/>
                             
            </apex:actionFunction>

            <apex:actionFunction immediate="true" name="updateRelatedObjectIfNeeded" action="{!updateRelatedObjectInfoIfNeeded}" reRender="valRender" status="status" oncomplete="resetRelatedObjectUpdateVar();">
                         <apex:param name="relatedObjsXml" value="relatedObjsXml"  />
            </apex:actionFunction>
            
            <apex:actionFunction immediate="true" name="saveChanges" action="{!saveFormSettingChanges}" reRender="formObjectConfigPanel,pnlForFieldsRepeat,msgPanel,formTitleO,formnameeditPanel,formbreadcrumbTitleO,pdfConfirmationBlock" status="updatingdatastatus" oncomplete="toggleToFormEditor();resetMultiPageSortableCall(); createHtml();hideSection();listHideRenderDiv();refreshChildRecordsFieldLi();">
                         <apex:param name="relatedObjsXml" value="relatedObjsXml"  />
                            <apex:param assignTo="{!hiddenSelectedObjects}" name="hiddenSelectedObjects" value=""/>
                             <apex:param assignTo="{!formName}" name="fname" value="fname"/> 
                             <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value=""/>
<apex:param assignTo="{!EmailNotificationEnabled}" name="emailnotificationenabledparam" value=""/> 
                                <apex:param assignTo="{!EmailToNotify}" name="emailnotificationparam" value=""/>  
                                <apex:param name="pdfChatter" value="pdfChatter"/> 
                                 <apex:param name="pdfRecord" value="pdfRecord"/> 
                                 <apex:param name="pdfEmailEnabled" value="pdfEmailEnabled"/> 
                                 <apex:param name="pdfEmailTo" value="pdfEmailTo"/>              
                                 <apex:param name="pdfName" value="pdfName"/>  
            </apex:actionFunction>
            <apex:actionFunction immediate="true" name="saveObjectChanges" action="{!saveObjectSettingChanges}" reRender="formObjectConfigPanel,pnlForFieldsRepeat,msgPanel" status="updatingdatastatus" oncomplete="resetMultiPageSortableCall(); createHtml();hideSection();listHideRenderDiv();refreshChildRecordsFieldLi();">
                         <apex:param name="relatedObjsXml" value="relatedObjsXml"  />
                             
            </apex:actionFunction>
                        
            
            <apex:actionFunction immediate="true"   name="loadRuleEditorCall" action="{!loadRuleEditorComponent}" reRender="msgPanel,ruleEditorWrapper"  oncomplete="rerenderRuleEditorCall();">
                         <apex:param name="toggleRule" value="true"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"  name="unloadRuleEditorCall" action="{!loadRuleEditorComponent}" reRender="msgPanel,ruleEditorWrapper" status="status" oncomplete="">
                         <apex:param name="toggleRule" value="false"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"   name="loadStyleEditorCall" action="{!loadStyleEditorComponent}" reRender="msgPanel,styleEditorWrapper" status="stylestatusLoad" oncomplete="rerenderStyleEditorCall();">
                         <apex:param name="toggleStyle" value="true"/>
                            
            </apex:actionFunction>
            <apex:actionFunction immediate="true"  name="unloadStyleEditorCall" action="{!loadStyleEditorComponent}" reRender="msgPanel,styleEditorWrapper" status="status" oncomplete="">
                         <apex:param name="toggleStyle" value="false"/>
                            
            </apex:actionFunction>
            
            <apex:actionFunction immediate="true" name="changePrimaryObject" action="{!changePrimaryObject}" reRender="formObjectConfigPanel,tempSelectRelatedList,pnlForFieldsRepeat,msgPanel,relatedObjectConfigPanel,formTitleO,formnameeditPanel,formbreadcrumbTitleO,pdfConfirmationBlock,relatedFFObjsListWrapper" status="changeconfigstatus" oncomplete="createHtml();toggleToFormEditor();resetSelect();">
                         <apex:param assignTo="{!sobjectName}" name="sNamesobjectName" value="sNamesobjectName"/>
                            <apex:param assignTo="{!formName}" name="fname" value="fname"/> 
                             <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value=""/> 
                             <apex:param assignTo="{!EmailNotificationEnabled}" name="emailnotificationenabledparam" value=""/>
                                 <apex:param assignTo="{!EmailToNotify}" name="emailnotificationparam" value=""/> 
                                 <apex:param name="pdfChatter" value="pdfChatter"/> 
                                 <apex:param name="pdfRecord" value="pdfRecord"/> 
                                 <apex:param name="pdfEmailEnabled" value="pdfEmailEnabled"/> 
                                 <apex:param name="pdfEmailTo" value="pdfEmailTo"/> 
                                  <apex:param name="pdfName" value="pdfName"/> 
            </apex:actionFunction>
         
             
            
            
            
            <apex:actionFunction name="saveMessage" action="{!saveMessage}" reRender="hidePopupPanel"/>
             
            <!--  to save form name from form setting when hit save changes -balinder nov 26 2014 -->
         <apex:actionFunction immediate="true" name="saveEditFormName" action="{!saveEditText}" reRender="validationMsgs,formTitleO,formnameeditPanel"   >
                    <apex:param assignTo="{!formName}" name="fname" value="fname"/>  
                     </apex:actionFunction>  
 <apex:actionFunction immediate="true" name="updateTrackSubmissionsOption" action="{!updateTrackSubmissionsOption}" reRender="validationMsgs,trackingEnabledPanel"   >
                    <apex:param assignTo="{!TrackingEnabled}" name="trackingenabledparam" value="trackingenabledparam"/>  
                     </apex:actionFunction> 
                      <apex:actionFunction immediate="true" name="resetPDFRequired" action="{!resetPDFRequired}" reRender="validationMsgs,pdfConfirmationBlock"  oncomplete="draftchanges(false);" >
            <apex:param name="pdfrequired" value="pdfrequired"/>  
                     </apex:actionFunction> 
           
            
            <apex:actionFunction immediate="true" name="callSave" action="{!save}"  reRender="publishResultPanel"   >
                         
                                <apex:param assignTo="{!isLookupWarningDisabled}" name="isLookupWarningDisabled" value="isLookupWarningDisabled"/>
                                <apex:param assignTo="{!isSaveForLaterWarningDisabled}" name="isSaveForLaterWarningDisabled" value="isSaveForLaterWarningDisabled"/>
                               <apex:param name="resetFastFormsToken" value=""/> 
            </apex:actionFunction>
            <apex:actionFunction immediate="true" name="publishCompleteCall" action="{!publishComplete}" reRender="publishResultPanel"    oncomplete="updatePaymentOptionsCall();"> 
            </apex:actionFunction>

            <apex:actionFunction immediate="true" name="updatePaymentOptionsCall" action="{!updatePaymentOptions}"    oncomplete="showPublishResponse();sendComplete();"> 
            </apex:actionFunction>
             

                    <apex:actionStatus id="draftChangesStatus" onstart="draftchanges(true);" onstop="draftchanges(false);" />
         <!--- Label  Dialog  -->
                 <div id="dialog" title="New Label" style="display:none;">            
                        <div class="edit-dialog-alert vff-alert mb50 m0-150"   style="display:none">
                        <div class="ohidden"  ><div class="vff-alert-msg msg-text-div"   >Warning: This field will allow external users to view your Salesforce records.</div><a class="help-icon-w" target="_blank" href="http://visualantidote.com/fastforms/help#lookup-fields"></a></div></div>
                        <table width="100%" border="0" cellspacing="0" id="tblForRequirdBlock" style="margin-top: 10px;overflow: hidden;float:left;">
                                <tr id="trForLabelEdit" class="fieldTd">
                                        <td id="defaultLabelDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Label:</label><span class="hideText"></span>
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" onkeyup="changeFieldLabel(this);" id="defaultLabel"/>
                                        </td>
                                </tr>
                                <tr id="trForSectionLabelEdit" class="sectionTd">
                                        <td id="defaultSectionLabelDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Label:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" onkeyup="changeSectionLabel(this);" id="defaultSectionLabel"/>
                                        </td>
                                </tr>
                                <tr id="trForSectionInformation"  class="sectionTd">
                                        <td   class="formatEdit">
                                         <label class="sectionLbl">Hide Section:</label>
                                             </td>
                                        <td class="formatEditCol2">
                                         <input class="css-checkbox" id="chkhideSectionField" type="checkbox" onchange="chkhideSection(this);" /><label class="css-label"     for="chkhideSectionField"></label> 
                                        </td>
                                 </tr>
                                 <tr id="trForSectionAddLinkEdit" class="sectionTd secRepeat">
                                        <td width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Add link text:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="txtsecrepAddLink" onkeyup="changeSectionConfig(this);" />
                                        </td>
                                </tr>
                                <tr id="trForSectionRemoveLinkEdit" class="sectionTd secRepeat">
                                        <td width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Remove link text:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="txtsecrepRemoveLink" onkeyup="changeSectionConfig(this);"/>
                                        </td>
                                </tr>
                                <tr id="trForSectionMinRepEdit" class="sectionTd secRepeat">
                                        <td  width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Minimum number of entries:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="txtsecrepMin" onkeyup="changeSectionConfig(this);" />
                                        </td>
                                </tr>
                                <tr id="trForSectionMaxRepEdit" class="sectionTd secRepeat">
                                        <td  width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Maximum number of entries:</label> 
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="txtsecrepMax" onkeyup="changeSectionConfig(this);" />
                                        </td>
                                </tr>

                                 <tr id="trForDisplayType" class="fieldTd">
                                        <td id="displayTypeDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Display as:</label>
                                        
                                        </td>
                                        <td class="formatEditCol2">
                                                <div class="flex-ctrl-display-as picklist-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl picklist-type-select"> 
                                                        <option value="picklist-default">Picklist (default)</option>
                                                        <option value="picklist-combobox">Searchable Picklist</option>
                                                        <option value="picklist-radiobutton-vertical">Radio Button List (Vertical)</option>
                                                        <option value="picklist-radiobutton-horizontal">Radio Button List (Horizontal)</option>
                                                </select>
                                                </div>
                                                <div class="flex-ctrl-display-as multi-picklist-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl multi-picklist-type-select"> 
                                                        <option value="multipicklist-default">Multi-Select Picklist (default)</option>
                                                        <option value="multipicklist-multi-tags">Multi-Select Tag List</option>
                                                        <option value="multipicklist-multi-tags-check">Multi-Select Checkbox Tag List</option>
                                                        <option value="multipicklist-checkbox-vertical">Checkbox List (Vertical)</option>
                                                        <option value="multipicklist-checkbox-horizontal">Checkbox List (Horizontal)</option>                          
                                                        
                                                </select>
                                                </div>
                                                <div class="flex-ctrl-display-as integer-display-type display-none">
                                                <select onchange="changeDisplayType(this)" class="flex-ctrl integer-type-select"> 
                                                        <option value="integer-default">Textbox (default)</option>
                                                        <option value="integer-npsrating">Net Promoter Score</option>
                                                        <option value="integer-starrating">Star Rating</option>
                                                </select>
                                                <div class="rating-range-block display-none" >
                                                        <div class="star-rating-range display-none" >
                                                                <div class="rating-range rating-no-of-stars star" >
                                                                <span>No. of stars:</span><input id="noOfStars"  onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input  no-of-stars"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-min star" >
                                                                <span>Label for min value:</span><input id="starMinLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-min"   type="text" />
                                                                </div>
                                                                
                                                                <div class="rating-range rating-range-max star" >
                                                                <span>Label for max value:</span><input id="starMaxLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-max"   type="text" />
                                                                </div>
                                                        </div>
                                                        <div class="nps-rating-range display-none" >
                                                                                                                                 
                                                                <div class="rating-range rating-range-min nps" >
                                                                <span>Label for min value:</span><input id="npsMinLabel"   onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-min"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-middle nps" >
                                                                <span>Label for middle value:</span><input id="npsMiddleLabel"  onblur="changeInputRatingAttrs(this);" class="flex-ctrl-input input80 range-middle"   type="text" />
                                                                </div>
                                                                <div class="rating-range rating-range-max nps" >
                                                                <span>Label for max value:</span><input  id="npsMaxLabel"  onblur="changeInputRatingAttrs(this);"  class="flex-ctrl-input input80 range-max"   type="text" />
                                                                </div>
                                                        </div>
                                                </div>

                                                </div>
                                        </td>
                                </tr>
                                
                                <tr id="trForDefaultValue" class="fieldTd">
                                        <td id="defaultDiv" width="36.5%" class="formatEdit">                    
                                        <label  style="padding-left:0px">Default value:</label>
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="defaultValue"/>
                                        </td>
                                </tr>
                                <tr id="trForPlaceholderText" class="fieldTd">
                                        <td  width="36.5%" class="formatEdit">                    
                                        <label  >Placeholder text:</label>
                                        
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="placeholderText" onchange="updateFieldConfigByElem(this,true);"/>
                                        </td>
                                </tr>

                                <tr id="trForCurrencyLabelField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblreadOnlyField">Currency Label:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="currencyLabelValue" class="sfff-input50" onchange="setFieldCurrencyLabel(this);"/>
                                        </td>
                                </tr>
                                <tr id="trForHideField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblHideField">Hide field:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" class="css-checkbox" id="hideField" onchange="checkHide(this);" /><label for="hideField" class="css-label"></label>
                                        </td>
                                </tr> 
                                <tr id="trForReadOnlyField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblreadOnlyField">Read-only:</label>
                                        </td>
                                        <td class="formatEditCol2"> <input type="checkbox" class="css-checkbox" id="readOnlyField" onchange="checkReadOnly(this);"/><label for="readOnlyField" class="css-label"></label>
                                        </td>
                                </tr> 
                                <tr id="trForUpsertField" class="fieldTd">
                                        <td class="formatEdit" ><label  style="padding-left:0px;width: 190px;" id="lblHideField">Update existing Salesforce record matching this field value:</label>
                                         
                                        </td>
                                        <td class="formatEditCol2" style="vertical-align:top !important">
                                        <input type="checkbox" class="css-checkbox" id="upsertField" onchange="verifyPackage(this);"/><label for="upsertField"  class="css-label"></label>
                                        <a class="help-icon blue-tooltip"    >
                                                <span class="blue-tooltip-text -mt90 -ml40">Check this box if you want to update an existing record that matches the value provided in this field. If a matching record is found, the record will get updated with the submitted information.</span>
                                                <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                                        </a>                      
                                        </td>
                                </tr>                          
                                <tr id="trForLimitField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblLimitField">File upload limit:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="limitValue" onkeypress="return checkFileUploadInput(event);" maxlength="2" onblur="checkFileUploadRegInput(this);"  />
                                        </td>
                                </tr>
                                <tr id="trForFileField" class="fieldTd">
                                        <td  class="formatEdit"><label  style="padding-left:0px" id="lblAllowField">Allowed file types:</label>
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="hidden" id="selectedfiletypes"/>
                                                        <div onclick="fancydropdowntoggle(this);"  class="fancyheader" >
                                                        <span style="display:inline-block;width:88%">All</span>
                                                        <img class="ExCol" src="{!URLFOR($Resource.iconImages,'SelectArrowDown.png')}" style="float:right;"/>
                                                        </div>
                                                        <div class="fancydropdown" style="clear:both;display:none;">
                                                                <input type="checkbox" id="imgType" value=".jpg,.png,.gif" class="css-checkbox flChk"/><label for="imgType" class="css-label" style="font-size:11px;max-width:100%;">Image File (.jpg, .png, .gif)</label>
                                                                <input type="checkbox" id="docType" value=".doc,.docx" class="css-checkbox flChk"/><label for="docType" class="css-label" style="font-size:11px;max-width:100%;">Word document (.doc, .docx)</label>
                                                                <input type="checkbox" id="xlsType" value=".xls,.xlsx,.csv" class="css-checkbox flChk"/><label for="xlsType" class="css-label" style="font-size:11px;max-width:100%;">Excel spreadsheet (.xls, .xlsx, .csv)</label>
                                                                <input type="checkbox" id="pdfType" value=".pdf" class="css-checkbox flChk"/><label for="pdfType" class="css-label" style="font-size:11px;max-width:100%;">Adobe Acrobat file (.pdf)</label>
                                                                <input type="checkbox" id="zipType" value=".zip" class="css-checkbox flChk"/><label for="zipType" class="css-label" style="font-size:11px;max-width:100%;">Archive file (.zip)</label>
                                                                <input type="checkbox" id="multiType" value=".wmv,.mp3,.mp4,.avi" class="css-checkbox flChk"/><label for="multiType" class="css-label" style="font-size:11px;max-width:100%;"> Media file (.wmv, .mp3, .mp4, .avi)</label><br/>
                                                        </div>                            
                                                        <div class="fancydropdownbottom" style="background-color:#f7f7f7;display:none;text-align:left;padding-left: 14px;">
                                                        Add Custom 
                                                        <br/>
                                                        <input type="text" id="customfltype" onchange="updateFieldConfigByElem(this,true);" style="width:180px"/>
                                                        <br /><div class="txtInstruct">e.g. .psd, .asp</div>
                                                        </div>
                                        </td>
                                </tr>
                                <tr id="trForFileUploadFileName"  class="fieldTd"> 
<td  class="formatEdit"><label style="padding-left:0px">Custom file name:</label>   </td>  <td class="formatEditCol2">   <input type="text" id="ffFileName" onchange="updateFieldConfigByElem(this,true);"  />  <span class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt85 -ml65">Enter a custom file name to use for your PDF files here. You can also use a custom formula to include form field values or custom Javascript. See our <a href="http://visualantidote.com/fastforms/help#Custom-Formulas" style="color: #ffffff;">documentation</a> for more details.</span>
                        <span class="draft-text"> <span class="helpIconCode" height="20px" style="margin-left:0px; float:inherit; margin-top:3px;"></span></span>
                        </span> </td>
</tr> 
                                    <tr id="trForUploadToChatterField"  class="fieldTd">
                                        <td  class="formatEdit"><label style="padding-left:0px">Upload To Chatter:</label>            
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" id="chkUploadToChatter" class="css-checkbox" onchange="checkUploadToChatter(this);"/><label for="chkUploadToChatter" class="css-label"></label>    
                        <a class="help-icon blue-tooltip"    >
                                <span class="blue-tooltip-text -mt68 -ml40">Check this box to have files uploaded to your form stored as Chatter files instead of standard Notes and Attachments files.</span>
                                <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>            </td>
                                </tr> 
                                <tr class="fieldTd" id="trForRequired">
                                        <td  class="formatEdit"><label style="padding-left:0px">Required:</label>            
                                        </td>
                                        <td class="formatEditCol2"><input type="checkbox" id="requiredChk" class="css-checkbox" onchange="checkReq(this);"/><label for="requiredChk" class="css-label"></label>
                                        </td>
                                </tr>
                                <tr class="fieldTd" id="trForLookupView">
                                        <td  class="formatEdit"><label style="padding-left:0px">List View:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                        <select  id="lookupListView" class="select-elem lookup-select" onchange="lookupListViewChange(this);"/> <a class="lookup-edit-link" onclick="openLookupEditPage(this);return false;" style="display:none">Edit</a>
                                        </td>
                                </tr>
                                <tr id="trForMsgField" class="fieldTd" style="display:none;">
                                        <td  class="formatEdit"><label style="padding-left:0px" id="lblErrMsgForRequiredField">Error message to be shown<br />if a value is not provided:</label>
                                        </td>
                                        <td class="formatEditCol2"><input type="text" id="errMsgForRequiredField" onchange="updateFieldConfigByElem(this,true); "/>
                                        </td>
                                </tr>
                                <tr class="fieldTd" id="trForImageALT">
                                        <td  class="formatEdit"><label style="padding-left:0px">Alternate text:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="text"   id="imgAltTag"   onchange="updateFieldConfigByElem(this,true);"/> 
                                        </td>
                                </tr> 
                                <tr class="fieldTd" id="trForImageAlignment" style="padding-top">
                                        <td  class="formatEdit" style="padding-top:10px;"><label style="padding-left:0px;">Alignment:</label>            
                                        </td>
                                        <td class="formatEditCol2" style="padding-top:10px;">
                                                <select id="ddlImageAlignment" style="width:100px" onchange="updateFieldConfigByElem(this,true);"> 
                                                        <option value="">--select--</option>
                                                        <option value="left">Left</option>
                                                        <option value="right">Right</option>
                                                        <option value="center">Center</option>
                                                </select>
                                        </td>
                                </tr>               
                                <tr class="fieldTd" id="trForImageWidth">
                                        <td  class="formatEdit"><label style="padding-left:0px">Width:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="text" style="width:100px" id="imgWidthValue" maxlength="4" onchange="updateFieldConfigByElem(this,true);"/>&nbsp;px
                                        </td>
                                </tr>    
                                <tr class="fieldTd" id="trForImageHeight">
                                        <td  class="formatEdit"><label style="padding-left:0px">Height:</label>            
                                        </td>
                                        <td class="formatEditCol2">
                                                <input type="text" style="width:100px" id="imgHeightValue" maxlength="4" onchange="updateFieldConfigByElem(this,true);"/>&nbsp;px
                                        </td>
                                </tr> 
                                
                                <tr id="trForFieldsPicklistdOptionsToggle" class="ftable-wrap picklist-options-toggle tr-picklist-management" style="display:none;">
                                        <td colspan="2" class="">
                                        <div class="display-table">
                                     <div class="display-table-row">
                                     <div class="dt-cell cell-1">Picklist values</div><div class="dt-cell cell-2">
                                        <input class="css-checkbox" id="chkbxToggleFieldsPicklistdOptions" onchange="toggleFieldsPicklistOptions(this)"  type="checkbox" /><label class="css-label" for="chkbxToggleFieldsPicklistdOptions" ></label>
                                        <label   >Customize</label></div></div></div>
                                        </td>
                                        
                                </tr>  
                                <tr id="trForformFieldsPicklistdOptions" class="ftable-wrap picklist-options-wrapper tr-picklist-management" style="display:none;">
                                   <td colspan="2" class="picklist-options-box">
                                   <div class="display-table">
                                     <div class="display-table-row">
                                     <div class="dt-cell cell-1"><label style="margin-top:40px">Set values to be displayed:</label></div>
                   <div class="dt-cell cell-2">
                   <div class="picklist-box-wrapper">
                   <div class="picklist-actions-box">
 <div class="f-left"><span onclick="togglePickItemSelection(this);">Select all</span></div>
 <div class="f-right"><span style="padding-right:20px;" onclick="sortPicklistItems(this);">Sort A-Z</span><span onclick="resetPicklistItems(this);">Reset</span></div>
                   </div>
                   <div class="picklist-box-header">

                   <input class="search-value-box" onkeyup="filterPicklistItems(this);" type="textbox" placeholder="Search for values..." />
                   </div>
                   <div class="picklist-box">
                   </div>
                    <textarea class="multi-line-pick" onblur="toggleMultiPickTextArea(this,true);" style="display:none"></textarea>
                    <div class="picklist-box-footer ">
                   
                    <div class="picklist-footer-1">
                    <span class="add-icon"></span>
                    <input class="search-box" onblur="toggleSingleOptionState(this,true);" onfocus="toggleSingleOptionState(this,false);" type="textbox" placeholder="Add custom values..." />
                      
                      <span class="add-pick-icon vabutton1" style="display:none" onclick="addPickItems(this);">Add</span> </div>
                    <div class="picklist-footer-2" onmouseenter="toggleMultiPickBox(this,false);" onmouseleave="toggleMultiPickBox(this,true);"> 
                    <span class="hide-text-area"   onclick="toggleToSingleOptionState(this,true);">Hide <span class="hide-icon"></span></span> 
                     <span class="add-multi-icon"  ><span class="add-many-txt" onclick="toggleMultiPickTextArea(this);">Add many</span><span class="add-micon"></span></span>
                    <span class="add-mpick-icon vabutton1"  onclick="addMultiPickItems(this);">Add</span>
                   </div></div>
                   <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt130 -ml63">Use this area to customize the values to be shown in your form's picklist. You can add one or many custom values for your form only - doing so will not have any impact on the way your picklist is configured in Salesforce.</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>
                   </div>
                                     </div>
                                     </div></div>

                                   </td>
                                </tr> 
                                <tr id="trForFieldsAdvancedOptionsToggle" class="ftable-wrap advance-options-toggle" style="display:none;">
                                        <td colspan="2" class="">
                                        <div class="display-table">
                                     <div class="display-table-row">
                                     <div class="dt-cell cell-1">Advanced options</div><div class="dt-cell cell-2">
                                        <input class="css-checkbox" id="chkbxToggleFieldsAdvancedOptions" onchange="toggleFieldsAdvanceOptions(this)"  type="checkbox" /><label class="css-label" for="chkbxToggleFieldsAdvancedOptions" ></label>
                                        <label    >Show options</label></div></div></div>
                                        </td>
                                        
                                </tr>  
                                <tr id="trForformFieldsAdvancedOptions" class="ftable-wrap advance-options-wrapper" style="display:none;">
                                   <td colspan="2" class="advance-options-box">
                                   <div class="display-table">
                                     <div class="display-table-row">
                                     <div class="dt-cell cell-1">Field configuration</div><div class="dt-cell cell-2"><a class="vabutton2 refresh-field-link" onclick="refreshFieldConfig(this);return false;">Refresh</a>
<a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt130 -ml63">Use this button to refresh this field with the latest configuration from Salesforce. If you've made changes to your field in Salesforce, such as adding new picklist values or changing field type, use this button to have those changes take effect in your form.</span>
                        <span class="draft-text"> <img style="margin-left:0px; float:inherit; margin-top:3px;" class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}"/></span>
                        </a>

                                     </div>
                                     </div></div>

                                   </td>
                                </tr>                  
                         </table>
                         <div style="float:right;margin-right: 24px;cursor: pointer;margin-top: -30px;"><img class="arrowUp" src="{!URLFOR($Resource.select2,'left_arrow.png')}" /></div>
                        <br/>
                     <input type="hidden" id="hiddenLiId"/>
                     <input type="hidden" id="hiddenLiLabelId"/>
                </div>
        <!--- Label Dialog End -->
        
                    <apex:pageMessages id="validationMsgs" /> 
     <apex:pageMessages ></apex:pageMessages>
                    <apex:actionStatus id="status">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Loading, please wait...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="changeconfigstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Getting records information...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="updatingdatastatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Saving changes...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                
                <apex:actionStatus id="datacollectionstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Loading form...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                </apex:actionStatus>
                <apex:actionStatus id="addrelatedObjstatus">
                                <apex:facet name="start">
                                 <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Finalizing setup...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                             </apex:facet>
                            
                </apex:actionStatus>
     <div Class="pbFields" style="display:none;">
     <input type="hidden" id="formOptionsHidden"/>
     <apex:outputpanel id="pnelSobjectField">
     <apex:inputtext value="{!formName}" styleClass="formName" id="formName"/>
     <apex:inputtext value="{!selectedPreFormID}" styleClass="selValue" id="selectedPreFormID"/>
      <apex:inputhidden value="{!hiddenCkEditorValue}" id="hiddenCkEditorValue" />
                                                 <apex:inputhidden value="{!finalResultHtml}" id="finalResultHtml" />
                                                 <apex:inputhidden value="{!fieldsXml}" id="fieldsXml" />
                                                 <apex:inputhidden value="{!fieldsObjectXml}" id="fieldsObjectXml" />
                                                 <apex:inputhidden value="{!is500InternalError}" id="is500InternalError" />
        </apex:outputpanel>
         </div>
         <!---New Form & Embed Code,Privew,Save & publish-->

            
            <c:TrialExpiryComponent id="trialExpCp"  ffFreemium="{!isFreemium}" />
             <div class="mainHeader">
                    <div class="mainHeaderInner">
                <div style=" ">
     
                     <div class="bread-crumb"  >
                         <div class="bread-crumb navbar">
                                <div class="navbar-inner">
                                        <div class="navcontainer">
                                                <ul class="nav-wizard">
                                                        <li  >
                                                                <a class="vfns-link" id="breadcrumb-dashboard" href="{!$Site.BaseUrl}/apex/FormMenu">Dashboard</a>
                                                        </li>
                                                     
                                                                        <li class="li-arrow-seperator"></li>
                                                         <li class="active">
                                                                <span  id="breadcrumb-formeditor" style="padding: 0px 0px 0px 20px;"  >
                                                                <apex:outputPanel id="formbreadcrumbTitleO"  >
                                                            {!TruncatedFormName} 
                                                            </apex:outputPanel></span>
                                                        </li>
                                                </ul>
                                        </div>
                                </div>
                        </div>
                         </div>
                
                </div>
                        
                        <apex:outputPanel layout="block" style="float: right;line-height:0px;" rendered="{!IF((packageTier=='NativeCloud'),true,false)}">
            <div class="ff-logo-box">
                <div class="ff-logo"><img alt="Fast Forms Native Cloud" title="Fast Forms Native Cloud" src="{!URLFOR($Resource.logos,'native-cloud.png')}" /></div>
                <div class="ff-logo-title">
                    <span class="ffsup">Fast Forms</span>
                    <h1 style="margin-bottom: 5px;" class="sub-h1">NATIVE</h1><h1 style="clear:left;" class="E-bold">CLOUD</h1>
                </div>
            </div>
            </apex:outputPanel>
            <apex:outputPanel layout="block" style="float: right;line-height:0px;" rendered="{!IF((packageTier=='NativeCloud'),false,true)}">
            <div class="ff-logo-box">
                        <div class="ff-logo"><img src="{!URLFOR($Resource.logos,'color_logo_only.png')}" /></div>
                        <div class="ff-logo-title"> <h1 class="E-bold">FAST</h1><h1 class="sub-h1">FORMS</h1><span class="ffsub">{!packageTier} Edition</span></div>     
                        </div>
            </apex:outputPanel> 
               
                        
                        <div class="help-text-r"><a target="_blank" href="http://www.visualantidote.com/fastforms/help?utm_source=fastformsapp&utm_medium=FormEditorPage&utm_campaign=help" ><img src="{!URLFOR($Resource.helptext_image)}" /></a>
                        </div>                        
                </div>
                                                                 
                
         </div>
         
            
                <apex:outputPanel id="editTextDiv" style="background-color:white;">
                 
                                <div  id="headerPanel"  class="form-information-wrapper-outer ">
                                            <div class="form-information-wrapper grey-left-border10"> 
                                                <apex:outputPanel id="formInformationPanel" layout="block"   styleClass="form-information">   
                                                            <apex:outputPanel id="formTitleO"  >
                                                            <h1  id="formTitle"  >{!form.Name}</h1>
                                                            </apex:outputPanel>
                                                         <apex:outputPanel id="formObjectConfigPanel" layout="block"   styleClass="ObjectName" style="margin-top:-1%;">
                                                                 
                                                                    <h4 >

                                                                    <span style="display:block">
                                                                    <i>Primary Object:</i>&nbsp;&nbsp;<span data-object="{!form.Object_Name__c}" class="{!form.Object_Name__c}" id="priName" style="margin-bottom: 4px;display: inline-block;">{! primaryObjectLabel }</span> 
                                                                    </span> 
                                                                    <apex:variable var="childCount" value="{!0}" /> 
                                                                     <apex:repeat value="{!currentRelatedObjList}"  var="f">
                                                                     <apex:variable var="childCount" value="{!IF(f.relObjectType=='detail',childCount+1,childCount)}"/>


                                                                             <apex:outputPanel layout="none"  rendered="{!IF(f.relObjectType=='detail',false,true)}"  >
                                                                              <span data-relobj="" class="secName-wrap object-{!f.relObjectType} relobj-">  <img src="{!URLFOR($Resource.ffcommon,'iconimages/TreeEditorSingle.png')}"  />
                                                                             <span  class="secName " data-objname="{!f.objName}" data-objlabel="{!f.objLabel}" data-relationshipname="{!f.relationshipName}" data-reftorec="{!f.refToRec}" data-reftorectrim="{!f.refToRecTrim}"    id="{!f.objName+' '+f.refToRec}">{!f.objLabel+' '+f.refToRec}</span> 
                                                                             </span>
                                                                             </apex:outputPanel> 

                                                                             <apex:outputPanel layout="none" rendered="{!IF(f.relObjectType=='detail',true,false)}"    >
                                                                              <span   data-relobj="{!childCount}" class="secName-wrap object-{!f.relObjectType} relobj-{!childCount} {!IF(f.isRepeat,'is-repeat','')}">  <img src="{!URLFOR($Resource.ffcommon,'iconimages/TreeEditorSingle.png')}"  />
                                                                             <span class="secName " data-objname="{!f.objName}" data-objlabel="{!f.objLabel}" data-relationshipname="{!f.relationshipName}" data-reftorec="{!f.refToRec}" data-reftorectrim="{!f.refToRecTrim}"  data-refidname="{!f.refIdName}"  data-refidlabel="{!f.refIdLabel}"  id="{!f.relationshipName+' ('+f.objName+')'}">{!f.objLabel+' ('+SUBSTITUTE(f.refIdLabel,' ID','' )+')'}<span class="color-span"></span>
                                                                             </span> 
                                                                             </span>
                                                                             </apex:outputPanel> 
                                                                            
                                                                           



                                                                        </apex:repeat>
                                                                    </h4>
                                                        </apex:outputPanel>
                                                 </apex:outputPanel>
                                                
                                                
                                                <div class="form-editor-title-box">
                        <div class="form-actions publish-actions">
                        <div class="action-icons-left">
                         
                         <div class="button-draft draft-event draft-saving italic-text blue-tooltip" id="draftSaveState" style="display:none"    >
                             
                             <span class="draft-text">Draft Saving</span>
                            </div>
                        <a id="btnSaved" href="javascript:void(0);" onClick="publishDraft(this);hideSection();" class="btnPublishedSaved vabutton1 publish-draft {!IF(draftStatus!='' && draftStatus=='Unpublished' ,'','va-disabled')}"      > Publish Draft </a>
                        </div>
                        <div class="action-icons-right">
                         
                     <a class="action-icon preview-icon blue-tooltip vfns-link" href="{!$Site.BaseUrl}/apex/FormdraftPreview?id={!form.Id}" target="_blank"      ><span class="blue-tooltip-text">Preview</span></a>
                     <a class="action-icon close-icon blue-tooltip vfns-link" href="{!$Site.BaseUrl}/apex/FormMenu"    ><span class="blue-tooltip-text">Close</span></a>
                        </div>
                        </div>
                        </div>
                        <div class="form-settings-wrapper">
                         <div class="form-settings-wrapper-inner">
                        <div class="vabutton2" onClick="toggleFormSettingSection(true);return false;"   >
                        <span class="btnText">Form Settings</span><span class="btnIcon"></span>
                        </div>
                        </div>             
                        </div>
                        
                        
                        
             
                                                
                         <div style="clear:both">  
                             </div>
                             </div>
                        <!-- Form Settings section starts-->
                        <div id="frmSetting" style="width: 100%;display:none;background-color:#c4d5e0;">
                                <div class="expendSetting"   style="padding: 50px 45px;width: 100%;height: auto;overflow: hidden; ">
                             
                                <div  class="form-setting-wrapper"  >
                                     <div class="form-row-group pt50" data-savegroup="1">
                                            <div class="form-row">
                                            <div class="col-label">
                                                 <label class="label-for">Form Name</label>
                                                 </div> 
                                                    <div class="col-inputs">
                                                    <apex:outputPanel id="formnameeditPanel"  >
                                                <input id="formnameedit" data-ff-prop="Name"  type="text" value="{!form.Name}" onblur="onFormSettingsChange(this,true);"  maxlength="80"   />
                                                </apex:outputPanel>  
                                            </div>
                                            </div>
                                            
                                        
                                            <div class="form-row">
                                            <div class="col-label">
                                                 <label class="label-for">Primary Object</label>
                                                 </div> 
                                                    <div class="col-inputs  object-select-elements-block">
                                                 <div class="scroll-parent">
                                                                                                 
                                                                                                 <select  class="select-primary-element"  id="dropSelectPrimary"  onchange="changePrimaryObjectCall(this);return false;"     >
                                                                                                 <option value=""  >--Select an object--</option>
                                                                                                        <apex:repeat value="{!AvailableSobjectMap}" rendered="{!if(AvailableSobjectMap!=null,true,false)}"  var="mapKey">
                                                                                                        <apex:repeat value="{!AvailableSobjectMap[mapKey]}" var="option">
                                                                                                        
                                                                                                        <apex:outputPanel rendered="{!IF(sobjectName==option.Value,true,false)}">
                                                                                                          <option value="{!option.Value}" selected="true" >{!option.Label}</option>
                                                                                                        </apex:outputPanel>
                                                                                                        <apex:outputPanel rendered="{!IF(sobjectName==option.Value,false,true)}">
                                                                                                          <option value="{!option.Value}"  >{!option.Label}</option>
                                                                                                        </apex:outputPanel>
                                                                                                          </apex:repeat>
                                                                                                          </apex:repeat>
                                                                                                 </select>
                                                                                                 <!-- Select Redefine -->
                                                                                        </div>
                                                                                        <br/>
                                                                                        <apex:variable var="relObjCount" value="{!0}" />
                                                                                        <apex:variable var="childobjCount" value="{!0}" /> 
                                                         <apex:outputPanel id="relatedObjectConfigPanel"  layout="block"    styleClass="select-secondary-element-wrapper  {!IF(isFreemium,'fm-enabled','')}" >
                                                                     <apex:repeat value="{!relatedObjectInfoList}"  var="f">
                                                                     <div        class="secondary-object-block" >
                                                                     <apex:variable var="relObjCount" value="{!relObjCount+1}"/>
                                                                     <apex:variable rendered="{!IF(f.objectType=='detail',true,false)}" var="childobjCount" value="{!childobjCount+1}"/>
                                                                            
                                                                             
                                                                         
                                                                
                                                                 
                                                                <div class="scroll-parent" >
                                                                          <select   data-rel-index="{!relObjCount}" data-detail-index="{!IF(f.objectType=='detail',childobjCount,'')}"  class="select-secondary-element select-related-{!relObjCount}" onchange="OnChangeRelatedObject(this,false);"  > 
                                                                          <option value="{!f.codeName}" selected="true">{!f.displayName}</option>
                                                                         </select>
                                                                </div>
                                                              
                                                                <div class="delete-object-box">
                                                                    <a class="fffe-actions rel-object-delete"  onclick="deleteRelObject(this);return false;"></a> 
                                                                    </div>
                                                                    <apex:outputPanel layout="block"    styleClass="repeat-object-box {!IF(f.objectType=='detail','','display-none')}"  >
                                                                    <input id="chkbxrepeating{!relObjCount}" type="checkbox" name="chkbxrepeating{!relObjCount}"   class="chkbx-repeating vff-checkbox" onchange="repeatRelObject(this,true);return false;" />
                                                                <label class="vff-check-label txt-label" for="chkbxrepeating{!relObjCount}">repeatable</label>
                                                                <span class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box if you want to allow your form submitters to add multiple entries of this object to their submission.</span>
                        <span class="draft-text helpIconCode" style="margin-left: 0px;"></span>
                        </span> 
                                                                    </apex:outputPanel> 
                                                                    </div> 
                                                                        </apex:repeat>
                                                                        <div class="scroll-parent add-related-obj" >
                                                                        <div class="add-related-item"   onclick="addRelatedObject(this);return false;"  >+ Add Related Object </div> 

                                                                        </div>
                                                                         </apex:outputPanel> 
                                                             
                                            </div>
                                             
                                            </div>
                                             </div>
                                             <span class="silver-line-separator"></span> 
                                            <div class="form-row-group" data-ff-prop="Form_Options__c" data-ff-sub="submitInfo" data-savegroup="1">
                                        <!--  start submit and form confirmation -->  
                                            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Submit Label</label>
                 </div> 
                    <div class="col-inputs">
                     <input type="text" id="txtbxSubmitButtonLabel" data-ff-nested="true" onblur="onFormSettingsChange(this,true);"  />
                    
                     </div> 
 </div> 
 <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Post-Submission Options</label>
                 </div> 
                    <div class="col-inputs">
                                <div class="vertical-tab-container">
                                                                                                <ul class="nav nav-tabs vertical-tabs">
                                                                                                        <li class="active">
                                                                                                        <a href="#formconfirmationRadio1" data-toggle="tab" onclick="onFormSettingsChange(this,true);">
                                                                                                        <span class="ff-radio-css"></span>Display a confirmation popup</a>
                                                                                                        </li>
                                                                                                        <li><a href="#formconfirmationRadio2" data-toggle="tab" onclick="onFormSettingsChange(this,true);">
                                                                                                        <span class="ff-radio-css"></span>Redirect users to a new page</a>
                                                                                                        </li>

                                                                                                </ul>
                                                                                                <div class="tab-content vertical-tab-content">
                                                                                                        <div class="tab-pane fade in active" id="formconfirmationRadio1">
                                                                                                             <textarea id="txtareaThankyoumsg" rows="4"  data-parentactive="tab-pane"  onblur="onFormSettingsChange(this,true);"   ></textarea>
                                                                                                        </div>
                                                                                                        <div class="tab-pane fade" id="formconfirmationRadio2">

                                                                                                             <input type="text" id="txtbxRedirectUrl" data-parentactive="tab-pane"  onblur="onFormSettingsChange(this,true);"  />

                                                                                                        </div>
                                                                                                </div>
                                                                                        </div>
                     </div> 
 </div> 
                         <!--  ends submit and form confirmation --> 
                 
                 </div>     
                    <span class="silver-line-separator"></span>         
                         <div class="form-row-group" data-savegroup="2">         
            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Track submissions</label>
                 </div> 
                    <div class="col-inputs">
                   <apex:outputPanel id="trackingEnabledPanel"  >
                                                                <apex:inputCheckbox html-data-ff-prop="TrackingEnabled__c" onchange="onFormSettingsChange(this,true);" styleClass="chkbxtrackingEnabled vff-checkbox" id="chkbxtrackingEnabled" value="{!form.VisualAntidote__TrackingEnabled__c}" selected="{!form.VisualAntidote__TrackingEnabled__c}"/>
                                                                <label class="vff-check-label" for="chkbxtrackingEnabled"></label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to track all your form's submissions in the Form Submissions tab.</span>
                        <span class="draft-text helpIconCode"></span>
                        </a>
                                                        </apex:outputPanel>
            </div>
            </div>
            
     </div>
       <apex:outputPanel layout="block" id="pdfConfirmationBlock" styleClass="form-row-group pdf-confirmations-block {!IF(isFreemium,'fm-enabled','')}" html-data-savegroup="2">         
            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">PDF confirmation</label>
                 <span class="freemium-icon blue-tooltip" style="display:none;margin-top: 0px;"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>PDF Confirmation is only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span></span>
                 </div> 
                    <div class="col-inputs"> 
                     <div >
                                                                
                         <apex:inputCheckbox html-data-ff-prop="PDF_Confirmation_Record__c" styleClass="chkbxPDFConfirmationRecord vff-checkbox {!IF(form.VisualAntidote__PDF_Required__c,'pointer-none','')}" id="chkbxPDFConfirmationRecord" onchange="onPDFEnabledChange(this,true);"  disabled="{!IF(isFreemium,true,false)}" value="{!form.VisualAntidote__PDF_Confirmation_Record__c}" selected="{!form.VisualAntidote__PDF_Confirmation_Record__c}"/>
                                                                <label style="margin-right:0px;" class="vff-check-label {!IF(form.PDF_Required__c,'st-blue-tooltip','')}" for="chkbxPDFConfirmationRecord"> <span class="st-blue-tooltip-text -mt55 -ml90">You have a signature field on your form which makes PDF confirmation required. <a style="color:#33AEFD" href="http://visualantidote.com/fastforms/help" target="_blank">Learn More</a></span></label><label style="float:none;margin-top:0px; padding-left:10px;" class="label-for">Save a PDF copy of form submissions to Salesforce</label>
                                                                
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt68 -ml40">Check this box to have a PDF copy of each form submission saved to your form's primary object record as an attachment</span>
                        <span class="draft-text helpIconCode"></span>
                        </a>
                     </div>
                     <div class="sec-col pdf-chatter-upload"  style="display:{!IF(form.PDF_Confirmation_Record__c,'block','none')}"  >
                                                             <label class="label-for">Custom file name</label><span class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt55 -ml40">Enter a custom file name to use for your uploaded files here, or leave this blank to preserve the original file name. You can also use a custom formula to include form field values or custom Javascript. See our <a href="http://visualantidote.com/fastforms/help#Custom-Formulas" style="color: #ffffff;">documentation</a> for more details.</span>
                        <span class="draft-text"> <span class="helpIconCode" height="20px"   style="margin-left:0px; float:inherit; margin-top:3px;"></span></span>
                        </span><br/>
                                                            <textarea id="txtareaPDFName"  data-ff-prop="PDF_Name__c" onblur="onFormSettingsChange(this,true);" class="content-editor-textarea maxwh_3_1"  >{!IF(form.PDF_Name__c==null,'',form.PDF_Name__c)}</textarea> 
                                                            </div> 
                                                                                                                                                             
                     <div class="sec-col pdf-chatter-upload"  style="display:{!IF(form.PDF_Confirmation_Record__c,'block','none')}"  >
                                                   <apex:inputCheckbox html-data-ff-prop="PDF_Confirmation_Chatter__c" onchange="onFormSettingsChange(this,true);" styleClass="chkbxPDFConfirmationChatter vff-checkbox" id="chkbxPDFConfirmationChatter"   disabled="{!IF(isFreemium,true,false)}"  value="{!form.VisualAntidote__PDF_Confirmation_Chatter__c}" selected="{!form.VisualAntidote__PDF_Confirmation_Chatter__c}" />
                                                                <label class="vff-check-label  txt-label" for="chkbxPDFConfirmationChatter">Upload to Chatter</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have the attached PDF uploaded as a Chatter file</span>
                        <span class="draft-text  helpIconCode"></span>
                        </a>            
                     </div> 
                      <div class="sec-col pdf-chatter-upload"  style="display:{!IF(form.PDF_Confirmation_Record__c,'block','none')}"  >
                                                   <apex:inputCheckbox styleClass="chkbxPDFEmailEnabled vff-checkbox" html-data-ff-prop="PDF_Send_To__c" onchange="onPDFEmailEnabledChange(this,true);" id="chkbxPDFEmailEnabled"   disabled="{!IF(isFreemium,true,false)}"  value="{!form.VisualAntidote__PDF_Send_To__c}" selected="{!form.VisualAntidote__PDF_Send_To__c}"/>
                                                                <label class="vff-check-label txt-label" for="chkbxPDFEmailEnabled">Send me a copy of the PDF</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have a PDF copy of each form submission sent to your email</span>
                        <span class="draft-text  helpIconCode"></span>
                        </a>
                                                            
                                                           <apex:outputPanel layout="block" styleClass="sec-col" rendered="{!IF(isFreemium,true,false)}"  >
                                                            <input type="text" style="display:{!IF(form.PDF_Send_To__c,'block','none')}" value="{!IF(ISBLANK(form.PDF_Send_To_Email__c), $User.Email,form.PDF_Send_To_Email__c)}" id="txtPDFSendToEmail" class="ff-type-text txt-pdf-sendtomail"  data-ff-prop="PDF_Send_To_Email__c" onblur="onFormSettingsChange(this,true);"  maxlength="100"  readonly="true"/> 
                                                            </apex:outputPanel>  
                                                            <apex:outputPanel layout="block" styleClass="sec-col" rendered="{!IF(isFreemium,false,true)}"  >
                                                            <input type="text" style="display:{!IF(form.PDF_Send_To__c,'block','none')}" value="{!IF(ISBLANK(form.PDF_Send_To_Email__c), $User.Email,form.PDF_Send_To_Email__c)}" id="txtPDFSendToEmail" class="ff-type-text txt-pdf-sendtomail"  data-ff-prop="PDF_Send_To_Email__c" onblur="onFormSettingsChange(this,true);"  maxlength="100"  /> 
                                                            </apex:outputPanel> 
                                                            
                                                           
                                                                   
                                   
                     </div>
                </div>
           
            </div>
            
     </apex:outputPanel>
     
         
             <div class="form-row-group email-notifications-block" data-savegroup="2"   >
                    <div class="form-row">
                     <div class="col-label">
                     <apex:outputLabel styleClass="label-for" value="Notifications"  />
                                </div>                
                     <div class="col-inputs">
                        
                        <apex:inputCheckbox styleClass="chkbxemailNotifications vff-checkbox" onchange="onEmailNotificationsEnabled(this,true);" id="chkbxemailNotificationsEnabled"      value="{!form.VisualAntidote__EnableEmailNotifications__c}" selected="{!form.VisualAntidote__EnableEmailNotifications__c}"/>
<label class="vff-check-label txt-label" for="chkbxemailNotificationsEnabled">Notify me on error</label>
                                                                <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to have an email sent to you whenever an error occurs with your form</span>
                        <span class="draft-text  helpIconCode"></span>
                        </a> 
                        <input    style="display:{!IF(EmailNotificationEnabled,'block','none')}" id="inputTxtemailNotifications" class="sec-col ff-type-text"  type="text" value="{!IF(ISBLANK(EmailToNotify), $User.Email,EmailToNotify)}"     onblur="onFormSettingsChange(this,true);"  maxlength="100"   />
                                                                   
                          </div>
                         </div>

             </div>
             <span class="silver-line-separator"></span>   
             <!--Multi page options starts -->      
                         <div class="form-row-group form-multi-page {!IF(isFreemium || packageTier=='Base','fm-enabled','')}" data-ff-prop="Form_Options__c" data-ff-sub="multiPageInfo" data-savegroup="1">    

            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Pages</label>
                 
                     <apex:outputPanel style="margin-top:0px" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Multiple pages are only available for Professional, Enterprise and NativeCloud editions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span> 
                     </apex:outputPanel>
                     
                 </div> 
                    <div class="col-inputs">
                    <label class="label-for" >When creating a multi-page form</label> <br/>
                    <div class="sec-col toggle-div-parent"   >
                       <div class="col-item"   >
                       <input class="vff-checkbox toggle-trigger" id="chkFormNavigationBar" onchange="toggleNextElement(this,true,true);" type="checkbox"/><label class="vff-check-label txt-label" for="chkFormNavigationBar">Show form navigation bar</label>  
                       </div>
                       <div class="sec-col toggle-div-child"   >
                       <div class="col-item"   >
                       
                       <input class="vff-checkbox" id="chkPagenumberInNavigation"   onchange="onFormSettingsChange(this,true);"  type="checkbox"/><label class="vff-check-label txt-label" for="chkPagenumberInNavigation">Include page numbers in navigation bar</label>  
                       </div>
                       <div class="col-item toggle-div-parent"   >
                       <input class="vff-checkbox toggle-trigger" id="chkPrefixNumber" onchange="toggleNextElement(this,true,true);" type="checkbox"/><label class="vff-check-label txt-label" for="chkPrefixNumber">Custom prefix for navigation bar items</label> 
                       <div class="sec-col toggle-div-child"   >
                       <input id="inputPrefixNumber"  class="ff-type-text"   onchange="onFormSettingsChange(this,true);"  type="text"/>
                       <a class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt45 -ml40">This option allows you to set a prefix for your page navigation bar items, such as 'Step' or 'Page'.</span>
                        <span class="draft-text"> <img class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}" style="margin-left:0px; float:inherit; margin-top:3px;"/></span>
                        </a>
                       </div>
                       </div>
                      </div>
                    </div>
                    <div class="sec-col toggle-div-parent"   >
                       <div class="col-item"   >
                       <input class="vff-checkbox toggle-trigger" id="chkCustomizeFooterNavigation" onchange="toggleNextElement(this,true,true);" type="checkbox"/><label class="vff-check-label txt-label" for="chkCustomizeFooterNavigation">Customize navigation buttons</label>  
                       </div>
                       <div class="sec-col toggle-div-child"   >
                       <div class="sec-col prev-btn"   >
                       <label class="label-for" >Previous</label>  <br/>
                       <input   id="inputBtnPrev"   onblur="onFormSettingsChange(this,true);"  class="ff-type-text" type="text"/>
                       </div>
                       <div class="sec-col nxt-btn"   >
                       <label class="label-for" >Next</label>  <br/>
                       <input   id="inputBtnNext"   onblur="onFormSettingsChange(this,true);"  class="ff-type-text" type="text"/>
                       </div>
                       </div>
                    </div>
                </div>
            </div>
            <div class="form-row form-validation-type">
                <div class="col-label">
                <label class="label-for">Form Validation</label>
                </div> 
                <div class="col-inputs">
                <select id="selFormValidationType" class="select-elem"   onchange="onFormSettingsChange(this,true);" >
                  <option selected="true" value="">-select an option-</option>
                  
                  <option value="page">One page at a time</option>
                  <option value="form">On submission</option>
                </select>

                <a class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt80 -ml63">Select how you want your multi-page form to be validated for errors. You can have your form validated one page at a time, or when the user submits the form.</span>
                        <span class="draft-text"> <img class="helpIconCode" height="20px" src="{!URLFOR($Resource.alpha,'blank.png')}" style="margin-left:0px; float:inherit; margin-top:3px;"/></span>
                        </a>
                </div> 
            </div> 
            </div>
             <!--Multi page options ends -->  
              
             <apex:outputPanel styleClass="silver-line-separator"   ></apex:outputPanel>
             <!--Save for later options starts -->
             <apex:outputPanel layout="block" styleClass="form-row-group save-for-later-box {!IF(isFreemium || (packageTier!='Enterprise' && packageTier != 'NativeCloud'),'fm-enabled','')}"  html-data-ff-prop="Form_Options__c" html-data-ff-sub="saveForLaterInfo" html-data-savegroup="1" >

            <div class="form-row">
            <div class="col-label">
                 <label class="label-for">Save for Later enabled</label>
                 <apex:outputPanel style="margin-top:0px" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                     <span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Save for later is only available in the Professional, Enterprise and NativeCloud editions of Fast Forms.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>
                     </apex:outputPanel>
                     
                 </div> 
                 <div class="col-inputs">                    
                    <div class="toggle-div-parent">
                       <div class="col-item">
                       <input class="vff-checkbox toggle-trigger" data-featuredisabled="{!IF(isFreemium || (packageTier=='Basic'),true,false)}" data-upgradetitle="Premium Feature" data-upgrademsg="Save for later is only available in the Professional, Enterprise and NativeCloud editions of Fast Forms." id="chkCustomizeSaveForLater" onchange="toggleNextElement(this,true,true);" type="checkbox"/><label class="vff-check-label" for="chkCustomizeSaveForLater"></label><span class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to allow user to save form data for submission at a later date.</span>
                        <span class="draft-text  helpIconCode"></span>
                        </span>  
                       </div>
                       <div class="toggle-div-child" style="display: none;">
                       <div class="sec-col save-btn-div">
                       <label class="label-for">Save button label</label>  <br/>
                       <input class="ff-type-text"  id="inputBtnSFLSave"   onblur="onFormSettingsChange(this,true);"  type="text"/>
                       </div>                       
                       <div class="sec-col discard-btn-div">
                       <label class="label-for">Discard button label</label>  <br/>
                       <input class="ff-type-text" id="inputBtnSFLDiscard"   onblur="onFormSettingsChange(this,true);"  type="text"/>
                       </div>
                       </div>
                    </div>
                </div>
            </div>            
            
            </apex:outputPanel>
<!--Save for later options ends -->     
      
             <span class="silver-line-separator"></span> 
             <div class="form-row-group javascript-code-block pb20" data-savegroup="1" >
                    <div class="form-row">
                     <div class="col-label">
                     <label class="label-for"   >Javascript Code</label>
                      <apex:outputPanel style="margin-top:0px" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                      <span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Custom javascript is only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span> 
                     </apex:outputPanel>
                     
                                </div>                
                     <div class="col-inputs">
                        
                         <pre id="javascriptEditor" data-ff-prop="JSCode__c" onblur="onFormSettingsChange(this,true);"></pre>    

                          </div>
                         <a class="help-icon blue-tooltip"    >
                        <span class="blue-tooltip-text -mt55 -ml40">Use this area to add your own custom Javascript code to your form using the Fast Forms Javascript API.
                         </span>
                        <span class="draft-text  helpIconCode"></span>
                        </a>                             
                         </div>


             </div>
    
                                     </div>
                                </div>
                                <div  >
                                 </div>
                                <div style="clear:both;text-align:center;overflow: hidden;width: 100%;display: block;padding-bottom: 20px;" >
                                
                                <div style="float:right;margin-right: 25px;">
                                <label class="label-for" style="font-style:italic;padding-right:10px">all changes saved</label>
                                <a href="javascript:void(0);" onClick="UnSaved(true);" class="vabutton2 display-inline-block">Close</a></div>                
                                </div>
                                 
                             
                        </div>
                        <!-- Form Settings section ends-->
                    <div style="clear:both">    </div>
                 <div class="grey-left-border10">
                                         </div>
                                         </div>
                 
         </apex:outputPanel>
        
        
         <div class="marginLRauto ohidden text-align-center">
         <div class="vff-success " id="successActionBox" style="display: none;">
                                
                                <div class="vff-success-msg msg-text-div" onclick="closeNotification(this);" style="display:block"> </div>
                                </div>
          <div class="vff-alert" id="errorActionBox" style="display: none;">
                                
                                <div class="vff-alert-msg msg-text-div" onclick="closeNotification(this);" style="display:block"> </div>
          </div>
        </div>
        <div class="notification-bar marginLRauto ohidden"></div>
        <apex:outputPanel layout="block" style="display:none" styleClass="freemium-msg-box-outer" rendered="{!IF(isFreemium,true,false)}">
         <div class="freemium-msg-box"   >
                                
                                <div class="msg-text-div"  >Some features have been disabled in Fast Forms free edition.</div>
                               <span onclick="closeFreemiumNotification(this,'formeditor');" class="close-icon"></span>
                                </div>
        </apex:outputPanel>
            
            
         
        <apex:outputPanel layout="block" id="pb2" >
                
             <apex:outputPanel id="dragDropPnl"  layout="block" >       
                 <div id="mainDiv" >
                        
                                 <div class="marginLRauto"   > 
                                         <div class="nav-pills">
                                                <ul class="nav nav-tabs sfff-editor-tabs"  >
                                                        <li   class="sfff-editor-tab sfff-form-editor-li active"><a id="formEditorA" href="#sfff-form-editor" aria-controls="sfff-form-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span class="tab-title">Edit Form</span></a></li>
                                                        <li  class="sfff-editor-tab  sfff-rule-editor-li" ><a id="ruleEditorA" href="#sfff-rule-editor" aria-controls="sfff-rule-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span class="tab-title">Edit Rules</span>
                                                        <apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Conditional rules are only available for paid subscriptions.<span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>
                                                        
                                                        </li>                                 
                                                        <li  class="sfff-editor-tab  sfff-style-editor-li" ><a id="styleEditor" href="#sfff-style-editor" aria-controls="sfff-style-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span class="tab-title">Edit Style</span><apex:outputPanel style="float:right" styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}"><span class="blue-tooltip-text -marginLT lines-3"><div class="freemium-tooltip-header">Premium Feature</div>Style editing is only available for paid subscriptions. <span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>                                                         
                                                        </li> 
                                                        <li  class="sfff-editor-tab  sfff-alert-editor-li" ><a id="alertEditor" href="#sfff-alert-editor" aria-controls="sfff-alert-editor" role="tab" data-toggle="tab" onclick="toggleTab(this)"><span class="tab-title">Edit Alerts</span><apex:outputPanel style="float:right" rendered="{!IF(isFreemium || (packageTier == 'Base'),true,false)}" styleClass="freemium-icon blue-tooltip"><span class="blue-tooltip-text -marginLT lines-5"><div class="freemium-tooltip-header">Premium Feature</div>Alerts editing is only available for Professional,Enterprise or Native Cloud subscriptions. <span class="upgrade-now" onclick="OpenInNewTab('https://visualantidote.com/fastforms#Subscribe');return false;"  >Upgrade Now!</span></span></apex:outputPanel></a>                                                         
                                                        </li>                              
                                                </ul>                         
                                         </div>                 
                                         <div class="tab-pane fade in sfff-form-editor-content  active" id="sfff-form-editor">
                                                 <div class="main-content-holder display-table" style="width:100%;">
                                                 <div   class="form-canvas-wrapper display-cell">
                                                        <div  class="form-canvas-block" id="formCanvasBlock">
                                                        <div  class="form-canvas-block-Loading" style="display:none">
                                                           <div class="load-status-small" style="margin:50px auto;"> <div class="dialogSmall"></div><div class="primary">Loading form...</div></div>
                                                           </div>
                                                          <div   class="form-canvas-multi-page-wrapper">
                                                         <div id="mainMultiPageWrapper"  >
                                                                 <div id="multiPageUlForm" class="form-canvas-multi-page-inner"></div>
                                                                 

                                                         </div>
                                                          
                                                                 </div>
                                                                  </div>
                                                 </div>
                                                <div    class="available-fields-wrapper display-cell" style="width:340px;">
                                                        <div id="availableFieldBox" class="availablefields-wrapper"  >
                                                        
                                                                 <div class="form-floating-actions" style="display:none"  >
                                                                    <div class="form-actions publish-actions">
                        <div class="action-icons-left">
                         
                         <div class="button-draft draft-event draft-saving italic-text blue-tooltip"   style="display:none"    >
                             
                             <span class="draft-text">Draft Saving</span>
                            </div>
                        <a   href="javascript:void(0);" onClick="publishDraft(this);hideSection();" class="btnPublishedSaved vabutton1 publish-draft {!IF(draftStatus!='' && draftStatus=='Unpublished' ,'','va-disabled')}"      > Publish Draft </a>
                        </div>
                        <div class="action-icons-right">
                         
                     <a class="action-icon preview-icon blue-tooltip vfns-link" href="{!$Site.BaseUrl}/apex/FormdraftPreview?id={!form.Id}" target="_blank"      ><span class="blue-tooltip-text">Preview</span></a> 
                        </div>
                        </div>
                                                                 </div>
                                                                 <a title="Show Search Box" class="toggle-search-box show-box" onclick="toggleSearchBox(this);return false;">+</a>
                                                                 <div class="available-fields-search-box"  >
                                                                 <a style=" margin-top:-30px; margin-right: -15px;" title="Hide Search Box" class="toggle-search-box hide-box" onclick="toggleSearchBox(this);return false;">x</a>
                                                                    <input type="textbox" placeholder="Search for fields" onkeyup="doDynamicSearch(this)" class="ff-type-search" /><a onclick="doSearch(this);return false;" class="search-link" title="Search fields" />
                                                                    <a class="right-side-link" onclick="clearSearch(this);return false;">Clear</a>
                                                                    
                                                                 </div>
                                                                 <div class="available-fields-header"  >
                                                                    <h3>Objects</h3><a class="right-side-link edit-object-link" onclick="toggleFormSettingSection(true);return false;">Edit Objects</a>
                                                                 </div>
                                                                <div style="overflow:hidden;" id="divForFields" >
                                                                            <apex:outputPanel id="pnlForFieldsRepeat"  layout="block"     >   
                                                                                <div id="ListMainRel1" class="list-toggle-div-wrap">
                                                                                <div class="availableHeaderDiv" id="availableHeaderDivFirst"  onclick="toggleAvailableFieldsMenu(this);">
                                                                                <span class="obj-back-btn" ></span>
                                                                                <span class="obj-tab-number" >1</span>
                                                                                <span class="objName">{!form.Object_Name__c}</span> <span name="btnExpand"   class="availableHeader togHover" ></span> <span class="obj-freemium freemium-html" style="display:none" ></span>
                                                                                </div>                            
                                                                                <div id="ListRelToggle1" style="display:none;" class="list-toggle-div">                               
                                                                                         <ul id="sortableForRelFields1" class="dropfields" style="">
                                                                                                <apex:repeat value="{!lstFieldsModel}" var="Field">
                                                                                                        <li title="{!Field.tooltipMessage}" class="tooltip fieldLi sortableForRelFields1 ui-state-default {!IF(isFreemium && Field.isReference,'fm-enabled','')}" obj="{!sobjectName}" id="lblli{!sobjectName}{!Field.fieldName}" isRequired="{!Field.isRequired}" data-otype="{!Field.oType}"><div class="labelDiv"   id="divLabel{!Field.fieldId}" lblName="{!Field.fieldLabel}" > 
                                                                                                        <span class="sfff-field-info display-none"><span    class="field-info-tooltip"  > <span class="field-info-icon">i</span><span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-o"><span class="fi-letter-icon">O</span>Object:{!sobjectName} </span><span class="fi-tooltip-text-f"> </span><span class="fi-tooltip-text-r"> </span><span class="fi-tooltip-text-h"> </span></span></span></span></span>
                                                                                                                        <label  VAOBJ="{!Field.referenceTargetField}"   VATT="{!Field.vatt}" data-apiname="{!Field.fieldName}" id="lbl{!Field.fieldName}" class="ff-label {!IF(Field.isReference,'grayLabel','')}">{!Field.fieldLabel}</label> </div><div style="DISPLAY: none;" class="fieldDiv" id="divField{!Field.fieldId}"><apex:outputtext value="{!Field.htmlField}" /></div></li>
                                                                                                </apex:repeat>
                                                                                        </ul> 
                                                                                </div>
                                                                                </div>                                       
                                                                                <div style="clear:both"></div>
                                                                                 <apex:variable value="{!2}" var="relObjIndx" />
<apex:outputPanel id="relatedFieldsList" layout="block"    styleClass="available-fields-block-wrapper" >
<apex:repeat value="{!relFieldModelList}" var="relatedFFobj" rendered="{!if(relFieldModelList!=null && relFieldModelList.size>0,true,false)}">
<apex:outputPanel layout="block"    styleClass="available-fields-block " >
                                                                                <div id="ListMainRel{!relObjIndx}" class="list-toggle-div-wrap {!if(relatedFFobj.otherInfo!=NULL,relatedFFobj.otherInfo,'no-repeat')}">
                                                                                <div class="availableHeaderDiv "  onclick="toggleAvailableFieldsMenu(this);">
                                                                                <span class="obj-back-btn" ></span>
                                                                                <span class="obj-tab-number" >{!relObjIndx}</span>                                       
                                                                                <div id="{!relatedFFobj.codeName}" class="objName">{!SUBSTITUTE(relatedFFobj.displayName,' ID','')} </div>
                                                                                
                                                                                <span name="btnExpand"   class="availableHeader togHover" ></span>
                                                                                <span class="obj-freemium freemium-html" style="display:none" ></span>
                                                                                <span class="color-span"></span>
                                                                                </div>                            
                                                                                <div id="ListRelToggle{!relObjIndx}" style="display:none;" class="list-toggle-div">
                                                                                        <ul id="sortableForRelFields{!relObjIndx}" class="dropfields" style=""> 
                                                                                                <apex:repeat value="{!relatedFFobj.fieldModelList}" var="Field" rendered="{!relatedFFobj.isEnabled}">
                                                                                                                        <li title="{!Field.tooltipMessage}" class="tooltip fieldLi sortableForRelFields{!relObjIndx} ui-state-default" obj="{!relatedFFobj.displayName}"   id="lblli{!(Field.fieldSafeId)}" isRequired="{!Field.isRequired}" data-otype="{!Field.oType}"><div  class="labelDiv"  id="divLabel{!Field.fieldId}" lblName="{!Field.fieldLabel}" > 
                                                                                                                    <span class="sfff-field-info display-none"><span    class="field-info-tooltip"  > <span class="field-info-icon">i</span><span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-o"><span class="fi-letter-icon">O</span>Object:{!relatedFFobj.displayName} </span><span class="fi-tooltip-text-f"> </span><span class="fi-tooltip-text-r"> </span><span class="fi-tooltip-text-h"> </span></span></span></span></span>
                                                                                                            <label  VAOBJ="{!Field.referenceTargetField}" data-apiname="{!Field.fieldName}"     VATT="{!Field.vatt}" id="lbl{!Field.fieldName}" class="ff-label {!IF(Field.isReference,'grayLabel','')}">{!Field.fieldLabel}</label> </div><div style="DISPLAY: none;" class="fieldDiv" id="divField{!Field.fieldId}"><apex:outputtext value="{!Field.htmlField}" /></div></li>
                                                                                                </apex:repeat>
                                                                                        </ul>
                                                                                </div>
                                                                                </div>
                                                                                
                                                                                </apex:outputPanel>
                                                                                <div style="clear:both"></div>
                                                                                <apex:variable value="{!relObjIndx + 1}" var="relObjIndx" />
                                                                                
</apex:repeat>                                          
</apex:outputPanel>
                                                                         </apex:outputPanel>
                                                                            
                                                                 </div> 
                                                                 
                                                                 
                                                                        
                                                                 
                                                                
                                                         
                                                     
                                                        <div id="generalFieldBox"   class="genlist-toggle-div-wrap">
                                                                <div id="generalFields" class="generalFields"   onclick="toggleGenFieldsSection();">                      <span class="obj-back-btn" ></span><span class="obj-tab-number" >G</span>      
                                                                         <div class="objName" style="float:left">

                                                                         General Fields
                                                                         </div>
                                                                         <div style="float:right;padding-top: 3px;" >
                                                                                  <span class="togHover gnFldImg" ></span>
                                                                         </div>
                                                                         
                                                                </div> 
                                                                                                                                                                                                         
                                                                 <div style="height:220px;display:none;" id="divForGenFields" >
                                                                            <apex:outputPanel id="pnlForGeneralFieldsRepeat" >                                  
                                                                                 <ul id="generalSortableForFields" class="dropfields" style="">
                                                                                         <li title="Text" class="tooltip fieldLi generalSortableForFields ui-state-default"  id="lblliGENERALTEXT" data-otype="OGeneralText" isRequired="false">
                                                                                                 <div class="labelDiv"  id="divLabelGENERALTEXT" lblName="Text" > 
                                                                                                         <label   VATT="STRING" id="lblGENERALTEXT" class="ff-label ff-general-text-label"   data-ishidden="false">Text</label>
                                                                                                          
                                                                                                 </div>
                                                                                                 <div   class="fieldDiv" id="divFieldGENERALTEXT">
                                                                                                                    <input type="textbox" id="GENERALTEXT" name="GENERALTEXT" vatt="STRING" data-formatmessage="" data-maxlength="100" data-maxlengthmessage="Maximum 100 characters" maxlength="100" />
                                                                                                 </div>
                                                                                                 
                                                                                         </li>                                             
                                                                                         <li title="Captcha" class="tooltip fieldLi generalSortableForFields ui-state-default"  id="lblliCAPTCHA"  data-otype="OCaptcha" isRequired="true">
                                                                                                 <div class="labelDiv" id="divLabelCAPTCHA" lblName="CAPTCHA Text" > 
                                                                                                         <label   VATT="CAPTCHA" id="lblCAPTCHA" class="ff-label ff-captcha-label">Captcha</label>
                                                                                                          
                                                                                                 </div>                                                 
                                                                                                 <div  style="DISPLAY: none;" class="fieldDiv" id="divFieldCAPTCHA">
                                                                                                 <apex:outputText rendered="{!IsNative}">
                                                                                                 <img src="http://visualantidote.com/App_Themes/visualantidote/images/reCaptcha.png"/>
                                                                                                 </apex:outputText>
                                                                                                 <apex:outputText rendered="{!!IsNative}">
                                                                                                 <img src="https://fastforms.visualantidote.com/Images/captcha.png" />
                                                                                                 </apex:outputText>
                                                                                                 <br/>
                                                                                                         <input  class="ff-input-type ff-type-text ff-type-captcha {!IF(IsNative,'display-none','')}" type="textbox" id="CAPTCHAINPUT" name="CAPTCHAINPUT" vatt="CAPTCHA" data-formatmessage="" data-maxlength="50" data-maxlengthmessage="Maximum 50 characters" maxlength="50" data-isrequired="true" data-ishidden="false"/>
                                                                                                         <div id="Captcha" name="Captcha" data-isrequired="true" data-requiredmessage="Please enter the text shown in the image above"></div>
                                                                                                 </div>
                                                                                         </li>
                                                                                         
                                                                                         <li title="File Upload" class="tooltip fieldLi generalSortableForFields ui-state-default"  id="lblliFILEUPLOADAREA" data-otype="OFileUpload" isRequired="false">
                                                                                                 <div class="labelDiv"  id="divLabelUPLOAD" lblName="File Text" > 
                                                                                                         <label   VATT="STRING" id="lblUPLOAD" class="ff-label ff-fileupload-label">File Upload</label>
                                                                                                          
                                                                                                         <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                                                                                                          <span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>File Uploads are only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>

                                                                                                         </apex:outputPanel>
                                                                                                         
                                                                                                 </div>
                                                                                                 <div style="DISPLAY: none;" class="fieldDiv" id="divFieldUPLOAD">
                                                                                                         <div id="FileUploadAreaXX" name="FileUploadArea" vatt="FILEUPLOAD" class="ff-fileupload-drop-area" data-maxfiles="3" data-isrequired="false" data-requiredmessage="required" data-allowedfiletypes="" data-uploadtochatter="false">
                                                                                                                        <label id="FileUpload01_Select" for="FileUploadXX" class="ff-fileupload-select">Add File...</label>
                                                                                                                        <input class="ff-type-file" type="file" name="FileUpload01" id="FileUpload01" style="filter:alpha(opacity: 0);position: absolute;top: 0;left: -99999px;"/>
                                                                                                            </div>
                                                                                                                
                                                                                                         
                                                                                                 </div>
                                                                                         </li>
                                                                            <li title="Image" class="tooltip fieldLi generalSortableForFields ui-state-default"  id="lblliIMAGE" data-otype="OImage" isRequired="false" >
                                                                                                 <div class="labelDiv"  id="divLabelIMAGE" lblName="Image" > 
                                                                                                         <label   VATT="STRING" id="lblIMAGE" class="ff-label ff-image-label">Image</label>
                                                                                                          
                                                                                                         
                                                                                                         <div class="imageGeneralFieldDiv" style="DISPLAY: none;" id="divFieldIMAGE">
                                                                                                             <div class="ffse-propname ffse-pc-inline  ffse-file-upload-container-editor">
                                                                                                                    <div class="ffse-img-input-container-editor" style="text-align:center;">
                                                                                                                    <div class="ffse-img-input-wrapper-editor">
                                                                                                                    <span class="img-upload-button-wrap" >Upload</span>
                                                                                                                    <input type="file" class="fileUpload-control" onchange="uploadFiles(this,'');" />
                                                                                                                    </div>
                                                                                                                    <div class="ffse-img-fileextension-dec-editor"> Format gif, png or jpg. Maximum size 600kb.</div>
                                                                                                                    </div>
                                                                                                                    <div   class="ffse-img-upload-error" style="display:none;"></div>
                                                                                                                    <div   class="ffse-img-upload-placeholder-editor"  style="display:none;"></div>
                                                                                                                </div>                                                   
                                                                                                         </div>                                                     
                                                                                                 </div>

                                                                                                 
                                                                                         </li> 
                                                                                         <apex:outputText rendered="{!!IsNative}">
                                                                                                <li  class="tooltip fieldLi generalSortableForFields ui-state-default"    id="lblliFASTFORMSPAYMENT" data-otype="OPayPalPayment" isRequired="false" >
                                                                                                 <div class="payment-overlay-wrapper">
                                                                                                        </div>
                                                                                                    
                                                                                                            <div class="payment-overlay-box">
                                                                                                        
                                                                                                        <div class="alert-payment-setup mb50" style="display:none;height:auto;"  >
                                                                                                                <div class="vff-alert-msg  msg-text-div" style="display:inline-block;font-size:18px;" >Select your payment provider:</div> 
                                                                                                                <div  > <a title="PayPal Pro payment" data-paymenttype="OPayPalPayment" class="vabutton1 ml20" onclick="setupPaymentField(this);return false;">PayPal Pro</a>
                                                                                                                <a title="iATS payment" data-paymenttype="OiATSPayment" class="vabutton1 ml20" onclick="setupPaymentField(this);return false;">iATS</a>
                                                                                                                <a title="Stripe payment" data-paymenttype="OStripePayment" class="vabutton1 ml20" onclick="setupPaymentField(this);return false;">Stripe</a>
                                                                                                                <a title="Authorize.Net payment" data-paymenttype="OAuthorizeNetPayment" class="vabutton1 ml20" onclick="setupPaymentField(this);return false;">Authorize.Net</a>

                                                                                                                </div>
                                                                                                        </div>
                                                                                                            
                                                                                                            </div>
                                                                                                 <div  class="field-div-payment" data-paymentrequired="false"  data-paymentfield-record-id="" id="divLabelFASTFORMSPAYMENT" lblName="FASTFORMSPAYMENT">
  <div class="field-div-payment-inner">
    <div class="payment-item-header">
      <label     class="ff-PaymentFake-label">Payment</label>
      <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
        <span class="blue-tooltip-text -marginLT">
          <div class="freemium-tooltip-header">Premium Feature</div>
          Payment fields are only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a>
        </span>
      </apex:outputPanel>
    </div>
    <div class="payment-item-row pp-amount  pp-default-show" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentAmount" class="ff-label ff-amount-label">Amount</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentAmount"> 
        <span class="ff-currency">$</span>
        <label   class="ff-input-label ff-label ff-amount"  id="FFPaymentAmount" name="FFPaymentAmount"  data-pp-name="FFPaymentAmount" vatt="CURRENCY(18,2)"   >0.00</label>
      </div>
    </div>
    <div class="payment-item-row pp-shipping  pp-default-hide" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label data-label-prop="Label_Shipping__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentShipping" class="ff-label ff-currency-label">Shipping</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentShipping"> 
        <span class="ff-currency">$</span>
        <label class="ff-input-label ff-label ff-shipping"  id="FFPaymentShipping" name="FFPaymentShipping" data-pp-name="FFPaymentShipping"  vatt="CURRENCY(18,2)"    >0.00</label>
      </div>
    </div>
    <div class="payment-item-row pp-taxes pp-default-hide" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Taxes__c" ondblclick="editPaymentFFLabel(this);"  id="lblFFPaymentTaxes" class="ff-label ff-currency-label">Taxes</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentTaxes"> 
        <span class="ff-currency">$</span>
        <label class="ff-input-label ff-label ff-taxes"  id="FFPaymentTaxes" name="FFPaymentTaxes"  data-pp-name="FFPaymentTaxes" vatt="CURRENCY(18,2)"    >0.00</label> 
      </div>
    </div>
    <div class="payment-item-row pp-default-show" style="display: none;">
      <span class="ff-line-seperator"></span>
    </div>
    <div class="payment-item-row pp-stamount pp-default-hide" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Sub_Total_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentSubTotalAmount" class="ff-label ff-currency-label">Subtotal</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentSubTotalAmount"> 
        <span class="ff-currency">$</span>
        <label class="ff-input-label ff-label ff-stamount"  id="FFPaymentSubTotalAmount" name="FFPaymentSubTotalAmount"  data-pp-name="FFPaymentSubTotalAmount" vatt="CURRENCY(18,2)"    >0.00</label>
      </div>
    </div>
    <div class="payment-item-row pp-recurringfee pp-default-hide" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Recurring_Fee__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentRecurringFee" class="ff-label ff-currency-label">Initial Fee</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentRecurringFee"> 
        <span class="ff-currency">$</span>
        <label class="ff-input-label ff-label ff-recurringfee"  id="FFPaymentRecurringFee" name="FFPaymentRecurringFee"  data-pp-name="FFPaymentRecurringFee" vatt="CURRENCY(18,2)"    >0.00</label>
      </div>
    </div>
    <div class="payment-item-row pp-default-hide" style="display: none;">
      <span class="ff-line-seperator"></span>
    </div>
    <div class="payment-item-row pp-tamount pp-default-hide" style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Total_Amount__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentTotalAmount" class="ff-label ff-currency-label">Total</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentTotalAmount"> 
        <span class="ff-currency">$</span>
        <label class="ff-input-label ff-label ff-tamount"  id="FFPaymentTotalAmount" name="FFPaymentTotalAmount"  data-pp-name="FFPaymentTotalAmount" vatt="CURRENCY(18,2)"    >0.00</label>
      </div>
    </div>
    <div class="payment-item-row pp-default-hide" style="display: none;">
      <span class="ff-line-seperator"></span>
    </div>
    <div class="payment-item-row pp-creditcard"  style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label  data-label-prop="Label_Credit_Card__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentCreditCard" class="ff-label ff-FFPaymentCreditCard-label">Credit Card</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentCreditCard">
        <input class="ff-input-type ff-type-text ff-creditcard" type="textbox" id="FFPaymentCreditCard" name="FFPaymentCreditCard" data-pp-name="FFPaymentCreditCard"  vatt="DOUBLE(19,0)" data-formatmessage="Please enter a valid Credit Card number" data-maxlength="19" data-maxlengthmessage="Maximum 19 characters" maxlength="19" data-requiredmessage="required" data-isrequired="false"/>
      </div>
    </div>
    <div class="payment-item-row pp-cvv"  style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label data-label-prop="Label_CVV__c"  ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentCVV" class="ff-label ff-FFPaymentCVV-label">CVV</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentCVV">
        <input class="ff-input-type ff-type-text ff-cvv" type="textbox" id="FFPaymentCVV" name="FFPaymentCVV" data-pp-name="FFPaymentCVV" vatt="DOUBLE(4,0)" data-formatmessage="Please enter a valid CVV value" data-maxlength="4" data-maxlengthmessage="Maximum 4 characters" maxlength="4" data-requiredmessage="required" data-isrequired="false" style="width:60px;"/>
      </div>
    </div>
    <div class="payment-item-row pp-expiry"  style="display: none;">
      <div class="PPGeneralLabelDiv">
        <label data-label-prop="Label_Expiry__c" ondblclick="editPaymentFFLabel(this);" id="lblFFPaymentExpiry" class="ff-label ff-FFPaymentExpiry-label">Expiry</label>
      </div>
      <div class="PPGeneralFieldDiv"   id="divFieldFFPaymentExpiry">
        <select class="ff-select-type ff-singlepicklist ff-mm" id="FFPaymentExpiryMM" name="FFPaymentExpiryMM" data-pp-name="FFPaymentExpiryMM" vatt="PICKLIST" data-requiredmessage="required" data-isrequired="false" data-flexcontrol="picklist-default">
          <option value="">--MM--</option>
        </select>
        <select class="ff-select-type ff-singlepicklist ff-yyyy" id="FFPaymentExpiryYYYY" name="FFPaymentExpiryYYYY" data-pp-name="FFPaymentExpiryYYYY" vatt="PICKLIST" data-requiredmessage="required"  data-isrequired="false" data-flexcontrol="picklist-default">
          <option value="">--YYYY--</option>
        </select>
      </div>
    </div>
  </div>
</div>
 
                                                                                                 

                                                                                                 
                                                                                         </li> 
                                                                                         </apex:outputText> 
                                                                                          <li title="Signature" class="tooltip fieldLi generalSortableForFields ui-state-default"  id="lblliESIGNATURE" data-otype="OESignature" >
                                                                                                 <div style="display: block;" id="divLabelESIGNATURE" lblName="Signature" class="labelDiv" > 
                                                                                                         <label   vatt="ESIGNATURE" id="lblESIGNATURE" class="ff-label ff-esignature-label">Signature</label>
                                                                                                         <apex:outputPanel styleClass="freemium-icon blue-tooltip" rendered="{!isFreemium}">
                                                                                                          <span class="blue-tooltip-text -marginLT"><div class="freemium-tooltip-header">Premium Feature</div>Signature Fields are only available for paid subscriptions.<a class="upgrade-now" href="https://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a></span>

                                                                                                         </apex:outputPanel>
                                                                                                          </div>
                                                                                                         
                                                                                                         <div class="eSignatureFieldDiv" style="display:none;" id="divFieldESIGNATURE">
                                                                                                         <input id="inputESIGNATURE" class="ffd-esignature-input" type="hidden"/>
                                                                                                             <div class="ffd-esignature">
                                                                                                                     
                                                                                                                </div>                                                   
                                                                                                         </div>                                                     
                                                                                                 

                                                                                                 
                                                                                         </li>                                          
                                                                                </ul>  
                                                                         </apex:outputPanel>
                                                                            
                                                                 </div> 
                                                                 
                                                                
                                                        </div> 
                                                        </div> <!-- end of fields list box-->

                                                        </div> 

                                                 </div>
                                        </div>                     
                                        <div class="tab-pane sfff-rule-editor-content" id="sfff-rule-editor" style="display:none">
                                                <div class="main-content-holder sfff-rule-editor-body">
                                                <apex:actionStatus layout="block"    id="rulestatusLoad" startStyleClass="overlay-loading"  >
            <apex:facet name="start">
              <div class="overlay"></div>
                        <div class="status">
                            <div class="dialogHeader"><div class="dialogIcon dialogIconWait">&nbsp;</div></div><div class="dialogFont"><div class="primary">Loading rules, please wait...<br/><br/><br/></div></div>
                        </div>
                

         </apex:facet>
</apex:actionStatus>
                                                        <apex:outputText rendered="{!packageTier == 'Base'}">
                                                                <div style="padding:80px; text-align:center;color:#052942">
                                                                <h3>Conditional Rules are only available in Professional, Enterprise and NativeCloud editions of Fast Forms.</h3>
                                                                <br />
                                                                <br />
                                                                <div class="sfff-action-buttons"> <a class="vabutton1" href="http://visualantidote.com/fastforms#Subscribe" target="_blank">Upgrade Now!</a>
                                                                </div>
                                                                </div>
                                                        </apex:outputText>
                                                    <div class="ruleEditorWrapperCSS">
                                                        <apex:outputPanel id="ruleEditorWrapper" layout="block"   rendered="{! packageTier != 'Base'}">
                                                             <apex:outputPanel layout="block" rendered="{!loadRuleEditor}">
                                                             
                                                             <apex:dynamicComponent invokeAfterAction="true" componentValue="{!DynamicRuleEditorComponent}" />
                                                             
                                                             </apex:outputPanel>
                                                        </apex:outputPanel>
                                                        </div>
                                                </div>
                                        </div>

                                        <div class="tab-pane sfff-style-editor-content" id="sfff-style-editor" style="display:none">
                                                <div class="main-content-holder sfff-style-editor-body">
                                                <apex:actionStatus id="stylestatusLoad">
                                                            <apex:facet name="start">
                                                             
                                                                <div class="load-status-small"  style="margin:50px auto;" >
                                                                
                                                                <div class="dialogSmall"></div>
                                                             <div class="primary"  >Loading, please wait... </div>

                                                                
                                                                </div>
                                                         </apex:facet>
                                                </apex:actionStatus>
                                                         
                                                    <div class="styleEditorWrapperCSS">
                                                        <apex:outputPanel id="styleEditorWrapper" layout="block"    >
                                                             <apex:outputPanel layout="block" rendered="{!loadStyleEditor}">
                                                             
                                                             <apex:dynamicComponent componentValue="{!DynamicStyleEditorComponent}" />
                                                             
                                                             </apex:outputPanel>
                                                        </apex:outputPanel>
                                                        </div>
                                                </div>
                                        </div>
                                        <div class="tab-pane sfff-alert-editor-content" id="sfff-alert-editor" style="display:none">
                                                <div class="main-content-holder sfff-alert-editor-body {!IF(isFreemium || (packageTier == 'Base'),'silver-label','')}">
                                                  
                                                </div>
                                        </div>
                                </div>
             
                         </div>
            </apex:outputpanel>                 
         <apex:outputPanel id="tempSelectRelatedList"  styleClass="tempSelectRelatedListCSS" layout="block"  style="display:none; " >
         <apex:selectList styleclass="dropTemp select-secondary-element"         value="{!selectedRelatedFieldName}" multiselect="false" size="1">
                                                                                                    <apex:selectOptions value="{!fieldRelatedList}"></apex:selectOptions> 
                                                                         </apex:selectList>
            </apex:outputpanel> 
            <div id="previewDiv" style="display:none;">
            </div>
            <div id="parsedHTMLDiv" style="display:none;">
            </div>
            <div id="pageHeaderTEMP" style="display:none">
              <div class="ff-page-header-box"><div class="ff-page-number-tag"><span class="page-tag-text">Page</span> <span class="page-tag-number">1</span></div>
              <div class="ff-page-info" style="display:none">
              <span class="ff-page-title"  >New Page Title</span>
              <span class="is-pagehidden" style="display:none" >Page set as hidden</span>
              </div>
              <div class="ff-page-edit-box"> <a class="action-icon delete-icon blue-tooltip" onclick="DeletePage(this,true);return false;"><span class="blue-tooltip-text">Delete Page</span></a><a class="action-icon expand-icon" onclick="togglePageBlock(this);return false;"></a></div></div>
              <div class="page-header-seperator"></div>
            </div>
            <div id="pageTitleTEMP"  style="display:none">
               <ul class="formPageUl " ><li class="pageLi" id="sortableForPageLabelli"><label id="pageFFLabel" ondblclick="editFFPage(this);" class="ff-page-header">New Page Title</label> 
               <span class="is-pagehidden" style="display:none">Page set as hidden</span>
               <div class="editDelDiv"> <img class="editImg pageEdit" onclick="openEditFFDialog(this)" src="{!URLFOR($Resource.alpha,'blank.png')}" /></div></li>
               <li  class="formSectionUlWrap"></li>
               </ul>
             </div>
             <div id="pageNewSectionTEMP"  style="display:none">
               <ul class="formSectionUl " id="labelSectionformUl"><li class="sectionLi" id="sortableForSectionLabelli"><span class="repeat-icon"></span>
               <label id="sectionLabel" ondblclick="editFFSection(this);" class="ff-section-header">New Section Title</label> <div class="editDelDiv"><img id="deleteFormUl" class="deleteField" onclick="deleteSection(this);" src="{!URLFOR($Resource.alpha,'blank.png')}"/><img class="editImg sectionEdit"  onclick="openEditDialog(this,false);"   src="{!URLFOR($Resource.alpha,'blank.png')}" /></div></li>
                <li  class="formFieldUlWrap"><ul  class="formFieldUl "></ul>
                <li class="ff-section-footer"><a href="#" title="Remove" class="ff-alink ff-remove">- remove</a><span class="link-divider">/</span><a href="#" title="Add another" class="ff-alink ff-add">+ add another</a></li></li>
               </ul>
             </div>
              
             <div id="pageNewSectionBoxTEMP"  style="display:none">
             <div class="add-newsection-box ">
                                                         <a class="vabuttonA1" onclick="addNewSectionItem(this,true); return false;"><span class="btn-icon-plus"></span> <span class="btn-text">Add New Section</span></a>
                                                                 </div>
                                                                </div>  
            <div id="pageFooterTEMP" style="display:none">
            <div id="ftrSortableForLabelli" class="Ulbtn sectionHeader">
            <div class="footnoteDiv"><span class="requiredSpan ff-footnote ff-required-mark">*</span><label class="ff-footnote-label">- required</label></div>
            <div class="btnDiv"> <div class="ff-btn-col btn-col-1"><input style="display:none" type="button" class="sectionHeader ff-btn-prev"  id="btnFFprev" onclick="validateFFPage(this);" value="Back" /></div>  

             <div class="ff-btn-col btn-col-2">
             <input style="display:none" type="button" class="sectionHeader ff-btn-save"  id="btnFFsave" onclick="validateFFPage(this);" value="Save" /><input style="display:none" type="button" class="sectionHeader ff-btn-next"  id="btnFFnext" onclick="validateFFPage(this);" value="Next" />
            <input type="button" class="sectionHeader ff-btn-submit" notificationemails="" id="btnSubmit" onclick="SubmitData();" value="Send" btnmessage="Thank you for your submission!" btnurl="" sendnotificatonemail="false"/></div> 
            </div> 
            </div>
            </div>
            <div id="pageAddNewTEMP" style="display:none">
            <div class="add-newpage-box {!IF(isFreemium,'fm-enabled','')}">
                                                                 <span class="page-divider"></span>
                                                                 <div class="add-newpage-box-inner">
                                                         <a class="vabuttonA1" onclick="addNewPage(this); return false;"><span class="btn-icon-plus"></span> <span class="btn-text">New Page</span></a>
                                                                 </div>
                                                                 <span class="page-divider item-last"></span>
                                                                 </div>
            </div>

               



 <div id="paymentComponentTemp" class="payment-component" style="display: none;">
 <apex:outputPanel layout="block" rendered="true">
 <apex:dynamicComponent componentValue="{!DynamicFormPaymentComponent}" />
 </apex:outputPanel> 
 </div>
 <div id="PageOrSectionEditHTMLTemp" style="display:none">
 <div class="block-div-item" id="changeLabelDiv">
                                        <div class="formatEdit"  >                    
                                        <label style="padding-left:0px">Label:</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2"><input   onblur="changeParentLabelHtml(this);" type="text"/>
                                        </div>
                                </div>
                                 <div class="block-div-item" id="hideBlockDiv">
                                        <div class="formatEdit">
                                         <label class="sectionLbl" >Hide Page:</label>
                                        </div>
                                        <div class="formatEditCol2">
                                         <input class="css-checkbox" id="chkFFHideParent" onchange="hideFFParent(this);" type="checkbox"/><label class="css-label" for="chkFFHideParent"></label> 
                                        </div>
                                 </div>
 </div>
 <div id="DocSignEditHTMLTemp" style="display:none">
                
                         <span class="field-info-tooltip">           
                        <span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-exc"> <span class="fi-letter-icon">!</span>A PDF copy of this completed signed form will be attached to your form's primary object record. <a style="color:#33AEFD" href="http://visualantidote.com/fastforms/help" target="_blank">Learn More</a></span></span></span>
                        </span>
                        <span class="field-info-tooltip email-enabled-info" style="display:none; margin-top: -5px;">           
                        <span class="field-info-tooltip-text"><span class="field-info-tooltip-text-inner"> <span class="fi-tooltip-text-exc"> <span class="fi-letter-icon">!</span>You will receive a PDF copy of the form after your users verify their email addresses. <a style="color:#33AEFD" href="http://visualantidote.com/fastforms/help" target="_blank">Learn More</a></span></span></span>
                        </span>
                        <div class="expandedBlock">
                              
                                <div class="fieldRow" >
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Signature Type</label>
                                        
                                        </div>
                                        <div class="formatEditCol2">
                                        <div class="ffs-radiochklist-element ffs-prop-sign-type"><ul class="ffs-radiochklist"><li><input class="ffs-prop-radiochk" id="chkffsSigntypeFullName" name="sign-type" onchange="signatureConfigChange(this,true);" type="radio" value="full"/><label class="ffs-prop-radiochk-lbl" for="chkffsSigntypeFullName">Full Name</label></li><li><input class="ffs-prop-radiochk"  id="chkffsSigntypeInitials" name="sign-type" onchange="signatureConfigChange(this,true);" type="radio" value="initials"/><label class="ffs-prop-radiochk-lbl" for="chkffsSigntypeInitials">Initials</label></li></ul></div>

                                        </div>
                                </div>
                                <div class="fieldRow"  >
                                        <div class="formatEdit">                    
                                        <label style="padding-left:0px">Signature Options:</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2">
                                        <div class="ffs-radiochklist-element ffs-prop-sign-options"><ul class="ffs-radiochklist"><li><input class="ffs-prop-radiochk" id="chkffsSignoptionsTyped" name="sign-options" onchange="signatureConfigChange(this,true);" type="radio" value="typed"/><label class="ffs-prop-radiochk-lbl" for="chkffsSignoptionsTyped">Typed</label></li><li><input class="ffs-prop-radiochk"  id="chkffsSignoptionsDrawn" name="sign-options" onchange="signatureConfigChange(this,true);" type="radio" value="drawn"/><label class="ffs-prop-radiochk-lbl" for="chkffsSignoptionsDrawn">Drawn</label></li><li><input class="ffs-prop-radiochk"  id="chkffsSignoptionsBoth" name="sign-options" onchange="signatureConfigChange(this,true);" type="radio" value="both"/><label class="ffs-prop-radiochk-lbl" for="chkffsSignoptionsBoth"><span class="se-align-text">Both</span></label></li></ul></div>
                                        </div>
                                </div>
                                <div class="fieldRow" >
                                        <div class="formatEdit" id="defaultLabelDiv" >                    
                                        <label style="padding-left:0px">Signature Label</label>
                                        
                                        </div>
                                        <div class="formatEditCol2"><input id="signatureLabel" onblur="signatureConfigChange(this);"  type="text"/>
                                        </div>
                                </div>
                                <div class="fieldRow"  >
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Include Date</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2">
                                        <input id="signatureDateHide" class="css-checkbox"  onchange="signatureConfigChange(this,true);" type="checkbox"/>
                                         <label for="signatureDateHide" class="css-label"/>
                                        </div>
                                </div>
                                <div class="fieldRow"  >
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Date Label</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2"><input id="signatureDate" onblur="signatureConfigChange(this);" type="text"/>
                                        </div>
                                </div>
                                <apex:outputText rendered="{!if(packageTier != 'NativeCloud',true,false)}">
                                <div class="fieldRow"     >
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Include Email Verification</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2">
                                        <input id="signatureEmailEnabled" class="css-checkbox"  onchange="signatureConfigChange(this,true);" type="checkbox"/>
                                         <label for="signatureEmailEnabled" class="css-label"/>
                                        </div>
                                </div>
                                </apex:outputText>
                                <div class="fieldRow"    >
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Email Label</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2"><input id="signatureEmailLabel" onblur="signatureConfigChange(this);" type="text"/>
                                        </div>
                                </div>
                                <div class="fieldRow">
                                        <div class="formatEdit" >                    
                                        <label style="padding-left:0px">Show 'I agree' checkbox</label> 
                                        
                                        </div>
                                        <div class="formatEditCol2">
                                        <input id="signatureIAgree" class="css-checkbox"  onchange="signatureConfigChange(this,true);" type="checkbox"/>
                                         <label for="signatureIAgree" class="css-label"/>
                                        <div class="sec-col" style="    clear: both;padding-top: 10px;">
                                        <input id="signatureIAgreeText" onblur="signatureConfigChange(this,true);" type="text"/>
                                        </div>
                                        </div>
                                </div>
                                
                                                 
                         
                         </div>
                         
                         
                      
                
 </div>
 <div id="WarningHTMLTemp"  style="display:none">
   <div class="alert alert-warning alert-dismissible fade in" role="alert"><span   class="close-text" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">&times;</span>
  </span><span class="msg-text"></span>
</div>
 </div>
  <div id="ErrorHTMLTemp"  style="display:none">
   <div class="alert alert-error alert-dismissible fade in" role="alert"><span   class="close-text" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">&times;</span>
  </span><span class="msg-text"></span>
</div>
 </div>
 <!-- docsignhtml  starts -->
<div class="doc-sign-block" id="DocSignHTMLTemp" style="display:none"><div class="main-docsign-wrapper" id="ESIGNATURE123"><div class="ff-sign-div"><div class="ffclearButton ff-label" style="visibility:hidden"><a onclick="clearDrawnElements(this); return false;">clear</a></div><ul class="ff-sign-ul"><li class="fftypeIt"><a class="current ff-label" data-signed="typed" onclick="switchSignTab(this);return false;">Typed</a></li><li class="ffdrawIt"><a class="ff-label" data-signed="drawn" onclick="switchSignTab(this);return false;">Drawn</a></li></ul></div><div class="ff-signwrapper-outer"><div class="ff-chkagree ff-col-1"><input data-isrequired="false" id="chkffsignagree" type="checkbox"/> <label class="ff-label" for="chkffsignagree">I agree to terms and services.</label></div><div class="ff-email-verification ff-sign-block"><div class="ffsign-label ff-col-1"><label class="ff-label" ondblclick="editESignLabel(this,false);">Email</label></div><div class="ff-col-2 ff-field-col"><input class="ff-input-type ff-type-text" data-isrequired="false" id="ffsignEmail" type="textbox"/></div></div><div class="ff-signwrapper ff-typed"><div class="doc-sign-name ff-sign-block"><div class="ffsign-label ff-col-1"><label class="ff-label" ondblclick="editESignLabel(this,true);">Signature</label><span class="ff-required-mark ffs-req">*</span></div><div class="docsignWrapper ff-col-2 ff-field-col"><input class="ffsignature ff-input-type ff-type-text" id="ffsignature" name="ffsignature" type="text"/><div class="typedSignName"></div><canvas class="signPadName" height="55" width="232"></canvas><input class="outputSignedName" id="ffSignedName" name="outputSignedName" type="hidden"/></div></div><div class="doc-sign-date ff-sign-block"><div class="ffsign-label ff-col-1"><label class="ff-label" ondblclick="editESignLabel(this,true);">Date</label><span class="ff-required-mark ffs-req">*</span></div><div class="docsignWrapper ff-col-2 ff-field-col"><input class="ffdate ff-input-type ff-type-text hasDate" id="ffdate" name="ffdate" type="textbox"/><div class="typedSignDate"></div><canvas class="signPadDate" height="55" width="232"></canvas><input class="outputSignedDate" id="ffSignedDate" name="outputSignedDate" type="hidden"/></div></div></div><div class="ff-signwrapper ff-drawn display-none"><div class="doc-sign-name ff-sign-block"><div class="ffsign-label ff-col-1"><label class="ff-label" ondblclick="editESignLabel(this,true);">Signature</label><span class="ff-required-mark ffs-req">*</span></div><div class="docsignWrapper ff-col-2 ff-field-col"><canvas class="signPadName" height="55" width="232"></canvas><input class="outputSignedName" id="ffSignedName" name="outputSignedName" type="hidden"/></div></div><div class="doc-sign-date ff-sign-block"><div class="ffsign-label ff-col-1"><label class="ff-label" ondblclick="editESignLabel(this,true);">Date</label><span class="ff-required-mark ffs-req">*</span></div><div class="docsignWrapper ff-col-2 ff-field-col"><canvas class="signPadDate" height="55" width="232"></canvas><input class="outputSignedDate" id="ffSignedDate" name="outputSignedDate" type="hidden"/></div></div></div></div></div></div>
<!-- docsignhtml  ends -->

  <apex:outputPanel id="relatedFFObjsListWrapper" styleClass="relatedFFObjsListWrapperCSS" layout="block"    style="display:none" >
<apex:repeat value="{!relatedObjInfoList}" var="f"  rendered="{!if(relatedObjInfoList!=null && relatedObjInfoList.size>0,true,false)}">
<div class="related-obj-item object-{!f.relObjectType}">
<span class="data-item"  data-objname="{!f.objName}" data-objlabel="{!f.objLabel}" data-relationshipname="{!f.relationshipName}" data-reftorec="{!f.refToRec}" data-reftorectrim="{!f.refToRecTrim}"  data-refidname="{!f.refIdName}"  data-refidlabel="{!f.refIdLabel}"   >{!f.objName}</span>
 
</div>
</apex:repeat>
</apex:outputPanel>
                <div id="relatedSelObjWrapperTEMP" style="display:none">
                           <div        class="secondary-object-block" >
                        <div class="scroll-parent" >
                        <select data-selected="" data-rel-index="0" data-detail-index=""  class="select-secondary-element select-related-" onchange="OnChangeRelatedObject(this,false);"  > 

                        </select>
                         </div>
                         <div class="delete-object-box">
                          <a class="fffe-actions rel-object-delete"  onclick="deleteRelObject(this);return false;"></a> 
                           </div>
                           <div  class="repeat-object-box display-none">
                                                                    <input class="chkbx-repeating vff-checkbox" id="chkbxrepeating0" name="chkbxrepeating1" onchange="repeatRelObject(this,true);return false;" type="checkbox"/>
                                                                <label class="vff-check-label txt-label" for="chkbxrepeating0">repeatable</label>
                                                                <span class="help-icon blue-tooltip">
                        <span class="blue-tooltip-text -mt45 -ml40">Check this box to repeat this child object.</span>
                        <span class="draft-text helpIconCode" style="margin-left: 0px;"></span>
                        </span></div>
                           </div> 
                </div>            
            <div id="labelDiv" style="display:none;">
            </div>
            <div id="jsLoading" style="display:none;">
            <div id="load-status" > 
                                        <div class="overlay"></div>
                                                <div class="status">
                                                        <div class='dialogHeader'><div class='dialogIcon dialogIconWait'>&nbsp;</div></div><div class='dialogFont'><div class="primary">Finalizing setup...<br /><br /><br /></div></div>
                                                </div>
                                    </div>
                                    </div>
            <div id="lblPaymentTEMP" style="display:none;">
            </div>
            <div id="tempBlockQuotesHide" style="display:none;"/>
            <div id="tempLabelFieldDiv" style="display:none;">
            </div>
            <div id="tempDialogHtml" style="display:none;">
            </div>
            <div id="tempBtnDialogHtml" style="display:none;">
            </div>
            <!---Confirm Dialog for close form without save---->
            <div id="dialog-confirm" class="content"></div>
            
            <!---Dialog for error---->
            <div id="dialog-error"></div>      
            
        </apex:outputPanel>
         
        <apex:outputPanel id="hidePopupPanel">
                <input type="hidden" value="{!hidePopup}" id="hidePopup"/>
        </apex:outputPanel>
        <a href="#" class="go-top"><img src="{!URLFOR($Resource.iconImages,'backtotop.png')}"/></a>
        <apex:outputPanel id="valRender">
                <script>        
                        <apex:repeat value="{!lookupFieldMap}" var="child">
                                mapLookup["{!child}"]="{!lookupFieldMap[child]}";
                        </apex:repeat>
                </script>
        </apex:outputPanel>
<div class="intercomHelpIcon" title="Questions? We're here to help!" alt="Questions? We're here to help!"><div class="intercomHelpIconText"><a id="Intercom" href="mailto:uh2s363g@incoming.intercom.io" class="intercomHelpIconLink">?</a></div><div class="intercomHelpIconClose" onclick="hideHelpIcon();">x</div></div>
<script type="text/javascript">
  var _mfq = _mfq || [];
  (function() {
    var mf = document.createElement("script");
    mf.type = "text/javascript"; mf.async = true;
    mf.src = "//cdn.mouseflow.com/projects/59c9bd1d-b0c1-42f4-98eb-590c0642300b.js";
    document.getElementsByTagName("head")[0].appendChild(mf);
  })();
  _mfq.push(["setVariable", "Org ID", "{!$Organization.Id}"]);
</script>
 </apex:form>
</apex:page>
